<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Scenario Misc</title>
    <link href="/tech/scenario_misc/"/>
    <url>/tech/scenario_misc/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>WIP FOREVER!</p>          </div><div class="note note-light">            <p>Glimpse of solutions.</p>          </div><h2 id="ES-深分页">ES 深分页</h2><p><strong>随机跳转问题</strong></p><p>搜索结果列表页下方可能要支持跳转，这个功能可能会给 ES 带来性能问题，普遍没有很好的解决方案，需要结合业务做出限制和优化。</p><ol><li><p>from + size</p><p>多 shard 查询之后在内存中排序后计算结果集。数据量大的时候性能很低。</p></li><li><p>scroll</p><p>生成一个有过期时间的视图，到期之前操作的都是视图内的数据，无法感知新的变更。</p></li><li><p>searchAfter</p><p>每次只能翻一页，但性能很好。</p></li></ol><p>我在飞书的实践中，用的是朴素解法，首先在业务层限制结果集最大 <code>10000</code> 条，然后用户可以自定义单页数量，比如 <code>500 Page * 20 Records</code>，下方允许进行随机跳转，跳转的逻辑是 <code>from + size</code>。</p><blockquote><p>同时系统需要支持导出数据，比如用户希望将某个搜索结果集导出为 Excel，这个场景下我们封装到异步任务中使用 <code>searchAfter</code> 轮询导出。</p></blockquote><p><strong>向前翻页问题</strong></p><p>有的业务可能根据使用习惯，约定向前翻页的结果为视图，向后翻页的结果允许更新 —— 既不是全局视图，也不是全局动态。这个需求在数据量小的场景可以直接缓存查看过的页面结果集到 Redis，向前翻页时取缓存即可。</p><p>大数据量的场景下没有很好的解法，但是一般来说，搜索结果集都会根据特定 Attribute 进行排序，且这个 Attribute 是递增的，插入数据不会影响前置结果集。例如根据创建时间倒序，或者业务保证 doc id 全局有序递增，然后使用这个 id 排序也可以，页面跳转时可以选择重新触发一次搜索来替代缓存。</p><h2 id="异步和一致性">异步和一致性</h2><p>假设一个接口的影响是修改 N 张表，其中一张为主表，其余为关联表，并且这些表之间的数据可能有「一致性」的要求。</p><p><strong>朴素方式：</strong></p><p>业务量小的时候，或者说 N 比较小的时候，直接将变更SQL都放在一个事务当中同步写入。</p><p><strong>异步方式：</strong></p><p>假设业务量逐渐增大，或者是 N 比较大，比如 N = 10，亦或是我们可以将这个场景转化为微服务的调用，比如一个请求的处理逻辑，涉及到调用下游 N 个微服务的 API —— 本质上都是 IO 慢，只是一个是数据库 IO，另一个是网络 IO。此时我们需要考虑将部分“不重要的” IO 异步化来提升接口性能。</p><p>根据实际业务，将接口逻辑调整为：主要数据同步修改+允许一定延迟的关联数据异步修改。</p><p><u>异步化的实现方式一般如下：</u></p><ul><li>内存 spawn 异步任务，coroutine / thread</li><li>消息队列 MQ</li><li>消息表</li></ul><p>基于内存的方式只适用于对数据没有一致性要求的场景，比如 metrics 等。</p><p>基于 MQ 的方式，在实现上一般有一个典型的挑战：写数据库和写MQ之间的事务性如何保证。</p><div class="note note-light">            <p>数据库和缓存之间的一致性也是一个常见的问题，但是注意区分和这个场景的区别：</p><p>缓存与数据库之间的不一致是&quot;无状态&quot;的，也就是说，即使缓存和数据库之间存在不一致，也可以通过过期或者删除等机制来解决。下次读取之后，两侧数据就能保持一致。</p><p>但是数据库和 MQ 之间的一致性问题&quot;可能是有状态&quot;的，比如假设消息的消费在业务上是具有顺序性的，那么丢失/漏发消息是完全无法接受的。比如消费的逻辑是一个状态机，将任务按照 A - B - C 的顺序进行流转，那么一旦丢失了 B 消息，哪怕接到了多条 C 消息，也无法实现 A - C 的流转。</p>          </div><p><u>双写的事务性一般可以有如下几种解决方式：</u></p><ol><li><p>利用 RocketMQ 的事务消息</p><blockquote><p>TIPS: 这种消息本质上是 2PC，为了适应网络或其它类型的通信故障，还要求服务提供对应的回调接口来进行重试。</p></blockquote></li><li><p>先写 Kafka，然后基于 Kafka 消息进行所有数据库的修改<br>如果要求实时性，可以尝试立即写入一次主表数据库，然后消费时幂等处理，极端情况下立即写入失败可能会延迟。需要根据实际业务考量。比如我在交易所基础架构团队工作时，就是采用的这种方式进行的历史 K 线数据的落库。</p></li></ol><p><u>消息表是另外一种思路：</u></p><p>也就是将事务落库 N 张表，修改为事务落库 1（主表） + 1（消息表）张表。然后异步处理的逻辑基于消息表进行，这样能以一种比较简单的方式实现一致性，但是也会造成一定延迟问题。</p><h2 id="读写分离">读写分离</h2><p>这个思想很简单，无非就是读接口和写接口部署在不同的服务上，从而降低单台服务器的压力，并且一般来说读接口是无状态的（数据单纯来源于数据库等持久化组件），所以可以对读服务进行水平扩容，最终压力给到 DB。</p><p>一般来说这个架构适合于<strong>读多写少</strong>的场景，采用写单点+读水平扩展的架构可以应付绝大部分情况。</p><p>如果写服务的压力过大，一般使用分片的方式进行拆分（注意和扩容的区别），比如我们之前在加密货币交易所的账户系统中基本就是采用这个架构进行支撑，简单来说就是线上的 100K+ 用户被分配到 42 个分片上进行处理，每个分片大约处理 3~5000 个用户的请求，即使一个分片出现问题也不会影响整体的用户。基于这个思路还可以对数据库也进行分库分表，比如每个分片的用户使用不同的数据库表甚至是 database 进行存储，和写服务一一对应，当然实际情况不一定需要我们这么做。</p><h2 id="1-n-的推送问题">1 -&gt; n 的推送问题</h2><p>典型的业务场景：</p><ul><li>直播中，主播的音视频数据需要被 N 个观众订阅</li><li>交易所中，某个交易对的 depth 数据需要被用户实时查看到</li></ul><p>假如我们采用简单的循环 push 方案，显然当 N 变大时性能会急剧下降，其原因包括但不限于：</p><ul><li>服务端需要维护的连接过多，N 个</li><li>网络带宽受限，原始数据包上传时占用的带宽为 1，则下放时会写扩散为 N</li></ul><p>针对这个问题上述的两个业务场景的解决方案不太一样，但是本质上还是从以下几个方面着手：</p><ul><li>减小报文体积</li><li>降低推送频次</li><li>分片处理下游</li></ul><p>其中前两点主要依赖应用层实现，比如选用 HLS / HTTP-FLV / WebRTC 等协议和对应的 SDK，推送频次则根据具体的业务要求和 tolerance 进行调优。</p><p>分片的逻辑对于直播场景来说，一般是借助 CDN 来处理：</p><div class="code-wrapper"><pre><code class="hljs text">        ┌──────────┐        │ streamer │        └─────┬────┘              │              │       ┌──────┴──────┐       │  CDN Entry  │       └──────┬──────┘              │   ┌──────────┴──────────┐   ▼                     ▼┌───────────┐     ┌───────────┐│ CDN EdgeA │ ... │ CDN EdgeN │└───────────┘     └───────────┘      ▲                ▲      │                │ 观众拉流1          观众拉流N</code></pre></div><p>对于交易所的 depth 订阅场景而言，则稍微复杂一些：</p><ol><li>一般选用增量 + 全量结合的方式进行数据推送，下游需要自行构建维护好不同档位的 depth，这样有助于减少报文体积</li><li>推送的频次适当降低，比如我们可以 wait 200ms 的窗口的数据整合后进行推送</li><li>分片的逻辑一般不会采用 CDN 架构，因为 CDN 更适合 PULL 模式而不是 PUSH</li></ol><div class="code-wrapper"><pre><code class="hljs text">     ┌──────────────┐     │ Match Engine │     └──────┬───────┘            │┌───────────┴──────────────┐│ MQ (Kafka / Redis / ...) │└───────────┬──────────────┘            │  ┌─────────┴───────────┐  │   WebSocket Fanout  │  └─────────┬───────────┘            │       ┌────┴───┐       │ Client │       └────────┘</code></pre></div><p>对于不同的 Symbol, 肯定推出来是分不同的 partition 甚至 topic 的，常见的策略是：大币独占，小币适当合并。</p><p>对于 Fan-out 层，要做的事情其实就是订阅 MQ 处理后推送给客户端。不难看出这里是可以轻松的进行水平扩容的 —— Fan-out 和 Client 之间显然会有一个 LB。</p><h2 id="分布式事务">分布式事务</h2><p>网络上资料比较多，我看到很多文章都会写&quot;7 种分布式事务的原理&quot;，这里不重复做原理和术语的介绍，主要看一下实际业务场景中的落地方式。事务原理本身并不复杂，实际业务中全部套用教条的模板往往很不灵活，大部分场景下我们完全可以使用更简单的方式进行快速实现，当然前提是逻辑必须闭环。</p><p>个人认为，不论是 TCC 还是 SAGA 的模式，都离不开一点：事务的恢复。</p><p>具体来说，假设事务执行中发生了重启 —— 最常见的也最不可避免的就是发版，这个事务如何恢复现场继续处理。</p><p>基于这个思路，就能衍生出很多类似于业内最佳实践的方案：一般来说，实现的内核无非就是基于事务表重试 + 基于状态机幂等。</p><p>当然，实际落地的时候，我们主要关注的点是在于「重试」和「幂等」，达成这两点的方式有很多种，比如我在 crypto 交易所工作期间，团队整体采用的方式就是基于 Kafka 的 EventSourcing 架构。</p><p>考虑这个场景：假设购买一件商品时，用户账户的扣款和商品库存的扣减需要形成一个事务。</p><p>基于任务表和状态机的方案如下：</p><div class="code-wrapper"><pre><code class="hljs text">Task: [task_id, status, user_id, good_id]Status: pending-&gt; balance_frozen-&gt; inventory_deducted-&gt; balance_transfered-&gt; finished</code></pre></div><p>全局可以基于上面这个任务表达到最终一致性。</p><p>而 TCC / SAGA 的模式下，原理其实是类似的，落地上的差异也许是这样的：</p><ol><li>把上面的 TASK 表以 Order 表的方式实现，全局事务的开始起源于下单。</li><li>上面 STATUS 的枚举未必需要如此细致，实际场景中，可能订单服务会捎带订单 id 去账户服务进行清结算，也就是说某些状态可能是分离保存在账户/库存服务中的，事务的协调者即使不保存状态也可以通过询问的方式计算状态。</li></ol><p>Anyway，只要逻辑能够自洽和闭环，即便引入一些人工操作也未尝不可，实现时不必照搬教条，完全可以根据业务状况进行简化。当然，也有一些大厂开源的框架已经对这类分布式事务的逻辑进行了比较好的封装，你也可以根据实际情况进行选用，E.g. <a href="https://github.com/dtm-labs/dtm">DTM</a>。</p><blockquote><p>引入一个框架一般会对编程范式有严格的要求，灵活性和开发者友好性的问题是不应该但时常是被忽视的。</p></blockquote><h2 id="HyperSwitch">HyperSwitch</h2><p><a href="https://github.com/juspay/hyperswitch">Github Repo</a></p><p>这个东西是支付场景下一个比较有名的解决方案，对接了非常多支付厂商的接口，并且内部对支付流程做了完善的编排。它不是一个所谓的框架或者是寻常的中间件，而是一整套前后端服务本身。</p><p>值得思考的是，我觉得在业内直接部署一整套不具备 Saas 属性的源码不太现实，主要原因有如下几点：</p><ol><li>对于小公司来说，这种完整的解决方案显得太重</li><li>对于大公司来说，这种解决方案无法妥善地解决内部的特化需求，在如山的代码中适配自己公司的要求实在有些强人所难。</li><li>当然还有很多上下游更新带来的兼容问题等，这里不再赘述。</li></ol><p>所以一般我们会以这些解决方案作为参考，而不是开箱即用。</p><p>这个仓库中比较值得关注的点，就是它的架构图展示了一些现代化的存储/时序数据/数据分析的解决方案：</p><p><img src="https://github.com/juspay/hyperswitch/blob/main/docs/imgs/hyperswitch-architecture-v1.png?raw=true" alt="arch"></p><ul><li>时序数据和结构化的 metrics: OpenTelemetry(数据收集) + Promethus(时序数据读写) + Grafana(可视化)。</li><li>日志收集：Promtail + Loki</li><li>其它埋点和事件：<a href="https://github.com/vectordotdev/vector">Vector</a>(这个组件比较新，可视化数据管道) + Kafka(MQ) + ClickHouse(OLAP) + ES(搜索)</li><li>持久化/缓存：PostgreSQL + Redis</li></ul><h2 id="单边场景下的安全问题">单边场景下的安全问题</h2><p>首先明确什么是单边的场景：<u>在这里用于指代在某些业务中，后端无法进行精确校验，从而大幅依赖客户端/请求参数的场景</u>，下面是几个例子。</p><ul><li><p><strong>容易进行对账等校验的场景:</strong></p><ul><li><strong>用户签到领奖励</strong>，后端可以进行精准校验，比如每日/月签到等场景下，可以保存时间窗口内的信息辅助判断。</li><li><strong>充值/转账</strong>，后端可以进行精准校验，比如金融系统常见的复式对账法。</li><li><strong>新手引导任务奖励</strong>，后端可以轻松的实现每个新手任务只允许完成一次的逻辑。</li></ul></li><li><p><strong>单边场景：</strong></p><ul><li><strong>游戏的结果上报</strong>，假如整体游戏流程都由客户端本地实现（比如 H5 / flash / 本地单机游戏），那么游戏结果的上报兑奖则依赖客户端上传。</li><li><strong>刷视频领奖励</strong>，假设某短视频应用根据你浏览的视频进行奖励发放，那么视频是否播放完 / 浏览了多少个则依赖客户端上传。</li><li><strong>直播实时激励</strong>，假如某直播平台为了吸引主播开播，在直播时每 x 秒给主播赠送部分来自官方的礼物。</li></ul></li></ul><p>单边场景下面临的挑战其实比较明显 —— 业务本身无法提供足够的约束供后端进行校验，因此容易出现脚本/爬虫/协议破解直接批量调用接口的问题。</p><p>面对这个问题，不同的业务场景有不同的解决方案，这里主要介绍一下通用的思路，分为前中后置三部分进行探讨：</p><ol><li><p><strong>前置</strong><br>从上面的例子中不难看出，其实单边场景下最困难的实现点就在于前置场景下难以判断。这里其实确实也没有特别好的方式可以给一个没有约束的业务加上约束，因此我们最后往往会把关注点放在「人」这个环节上。</p><p>前置场景内，我们暂时不讨论「人工操作」与「脚本行为」的差异性 —— 这个往往属于中后置场景。<br>我们也暂时不讨论纯技术的方案，这个留在稍后展开。</p><p>我们最终的解决方案一般是环绕这个问题进行构建的：“一个真人在这个业务下，一天最多能够获得多少奖励。”</p><p>于是这就成了一个简单的数学不等式问题，比如说「直播」时，每分钟给主播的平台账户发放 10 元零钱奖励，那么他一天能拿到的奖励最多不会超过 14400 元。那么我们可以构建一个长度为 1 天的时间窗口，对用户的总收益进行暂存，一旦用户的奖励溢出这个范围，则返回错误。同样的，我们也可以构建一个 1 分钟的锁，让这个收益接口每分钟最多只能调用一次。</p><p>这个思路差不多可以总结为：<span class="label label-danger">允许你使用脚本代替人工，但是不允许你通过脚本获得比人工更高的收益</span>。</p><blockquote><p>相信这句话不难理解，比如假设你在玩某些打怪升级的页游，人工操作费时费力，你也许能够通过一些非官方的插件实现自动化清怪。<br>这种方式相当于「打怪升级」变为了「挂机升级」，只是这个挂机功能是非官方的。<br>在这种方式下，唯一的区别就在于你可以躺着拿奖励，别人需要操作才能拿奖励，但是不变的是：1小时后你能获得的最高奖励和人工操作并无区别</p></blockquote></li><li><p><strong>过程中</strong><br>在接口请求的过程中，除了上述的一些简单不等式判断进行快速过滤，我们还可以使用更复杂更精准的校验来进行二次确认。这一般会被沉淀为一个风控服务，在请求处理逻辑中可能会同步的调用一次风控服务询问检查结果，根据结果判断是否应该拒绝请求。</p><p>这里不展开讨论，风控策略一般是公司内部的机密信息，从计算机科学的常识上讲，我们一般需要采集客户端的信息和用户的历史行为来辅助判断。比如设备ID，用户指纹，用户登陆地点等，举例来说：金融行业的风控系统可能会使用 Flink 维护一个窗口内的登陆信息，如果用户在 5 分钟内在不同的地点 / IP 登陆了超过 3 次，则对他进行一些临时的操作限制等。</p></li><li><p><strong>后置</strong><br>后置操作实现的方式和策略也因业务和团队而异，但是一般来说都离不开人工运维进行兜底，比如说：加密货币交易所的提现功能，最后都会依赖一个客服进行人工的确认和审核，我们也许会实现一个工单平台自动采集提现相关的信息供审核同学进行辅助判断，作为最后一道防线。</p><p>当然实际上的后置操作不止于此，往往会有很多异步的流程在后端进行连续的或周期性的运算，依据具体的策略触发一些冻结/封号之类的惩罚等。</p></li></ol><p>总的来说，这种场景下的安全问题并不是某个特定领域的特殊需求，可以用常见的或者 Hack 的方式进行简单的处理 —— 比如登陆态和鉴权这类问题，往往有通用的解决方案。而这类场景的解决方案往往是发散的，不是只存活于链路的某个点的，相对完善的解决思路一般都离不开风控的需求，然而风控（Risk Control）往往在策略（业务层面）和落地（工程层面）都是一件复杂的事情。</p><h2 id="定时任务">定时任务</h2><p>这个场景相对比较简单，首先我们需要明白：定时任务在软件的实现中一定是离不开轮询的，只是这个轮询本身如何做优化的问题。</p><p>首先任务肯定需要持久化到数据库中，那么我们要做的肯定是要把这些任务扫描出来，然后在内存中计算后触发调度。</p><p>为了提高效率，我们可以通过批量的方式扫描出未来一段时间的任务，然后在内存中以小顶堆或者其它的优先级队列的方式进行维护，根据 peek 的结果决定轮询出堆的频次。</p><p>核心的原理其实就是这样了，但是有很多通用的后端思路都可以被应用在工程中进行进一步优化，以 RocketMQ 为例，它实现了不同时间单位下的延时消息，其实现原理也无非是将各个维度的延时消息进行分区，然后使用一个轮询调度器进行查询并把 ready 的消息投递出去:</p><div class="code-wrapper"><pre><code class="hljs text">┌──────────┐│    1s    │◄──────┐└──────────┘       │     ...           │┌──────────┐    ┌──┴──┐    ┌─────┐│    5m    │◄───┤timer├───►│queue│└──────────┘    └──┬──┘    └─────┘     ...           │┌──────────┐       ││    2h    │◄──────┘└──────────┘</code></pre></div><p>那么，在实际的定时任务服务中，我们也可以根据数据的量级，考虑是否要进行任务的分片来避免单点数据过多而导致调度不及时的问题 —— 此时还需要妥善处理任务可能被多个节点触发带来的幂等性问题等。</p><p>值得一提的是，MQ 的使用场景中，天然就带有时序递增的属性，后到的消息就应该排在后面（相同队列）。而实际的定时任务系统中，我们还需要花精力去处理任务执行时间的更新和取消所带来的复杂逻辑甚至是写扩散的问题。</p><h2 id="缓存问题">缓存问题</h2><p>缓存问题从大方向上来说，无非可以分为这两类：「一致性问题」+「存储问题」。</p><p>一致性问题没什么特殊的，业内的解法都有最佳实践，不管是哪种方法都可能在极端情况下出现短暂的不一致问题。值得一提的是，使用了缓存的数据本身就应当在业务上允许短暂不一致，比如商品的库存，点赞的数量等，如果这些数据十分的重要，比如牵涉到金额或者参与重要的运算（不仅仅是展示），那么我们应该额外斟酌。（事实上，我们往往还是采用读写分离的思路，在写单点上可以进行内存缓存，从而部分避免掉缓存一致性的问题）。</p><p>存储问题上，主要从两方面考量，第一部分是如何缓存好有效的数据 —— 热点数据应该让他们尽量命中缓存；第二部分是如何妥善处理缓存数据的更新/过期策略 —— 避免发生雪崩击穿和穿透等问题。</p><p>热点数据的缓存一般也就是这三点：</p><ul><li><p>根据业务选择合适的策略</p><ul><li>热点数据稳定，LFU</li><li>临时的热点（比如假日活动），活动期间不淘汰或者淘汰 TTL 最短的</li><li>随机的访问，随机的淘汰</li></ul></li><li><p>事前进行缓存预热<br>这个不展开说了，很多时候我们可以提前预知哪些东西在某些时间会被大量访问，这类场景除了缓存还能用上 CDN 甚至是客户端本地资源之类的技术手段。</p></li><li><p>主动识别热点缓存<br>这个方案主要是为了解决某些场景我们无法提前预知哪些资源会被大量访问的情况，但是有时候我们能通过一些前置的接口识别出来，尽可能的预测未来的情况。一个典型的热点识别系统架构如下：</p><div class="code-wrapper"><pre><code class="hljs text">┌────┐      ┌─────┐    ┌───────┐│ LB ├─────►│Flink├───►│Service│└────┘      └─────┘    └───┬───┘                           │                  ┌────────┴───────┐                  │┌─────────────┐ │                  ││Redis Cluster│ │                  │└─────────────┘ │                  └────────────────┘</code></pre></div><p>我们可以通过网关层比如 Nginx 的 Access Log 来获取接口请求信息，然后使用 Flink 维护一个流式的窗口计算哪些数据正在被频繁访问，然后根据窗口数据触发缓存的更新。</p><p>Flink 的流式处理特别适合这个场景，避免了传统解决方案中定时扫表可能带来的延迟和压力问题。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于签名的鉴权架构</title>
    <link href="/tech/signature_based_auth_arch/"/>
    <url>/tech/signature_based_auth_arch/</url>
    
    <content type="html"><![CDATA[<blockquote><p>请求处理的核心一环是鉴权，而在加密货币交易所中，鉴权的要求更为严格，因为它涉及到用户的资产安全。本文介绍一下我在前司基础架构组工作时瞥见的鉴权架构与实践。</p></blockquote><h2 id="核心原理">核心原理</h2><p>简单来说，签名鉴权的核心原理就是使用一个字符串对另一个字符串进行散列 / 哈希，然后得到一个新的字符串，该字符串不可逆，且不考虑碰撞的情况下，唯一对应于原字符串。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo separator="true">,</mo><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">hash(key, data) = signature</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ha</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">na</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">re</span></span></span></span></span></p><p>我们将它套用到请求场景中，可以变化为:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo separator="true">,</mo><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi mathvariant="normal">_</mi><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">hash(key, request\_info) = signature</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal">ha</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">es</span><span class="mord mathnormal">t</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">na</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">re</span></span></span></span></span></p><p>实践中，我们一般使用 HMAC-SHA256 算法进行签名:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;data := <span class="hljs-string">&quot;Hello, world!&quot;</span>key := <span class="hljs-string">&quot;my_secret_key&quot;</span>h := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(key))h.Write([]<span class="hljs-type">byte</span>(data))hash := h.Sum(<span class="hljs-literal">nil</span>)hashHex := hex.EncodeToString(hash)fmt.Println(<span class="hljs-string">&quot;HMAC-SHA-256 Hash:&quot;</span>, hashHex)&#125;</code></pre></div>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-5dbffb8d" role="button" aria-expanded="false" aria-controls="collapse-5dbffb8d">        <div class="fold-arrow">▶</div>OUTPUT      </div>      <div class="fold-collapse collapse" id="collapse-5dbffb8d">        <div class="fold-content">          <p>HMAC-SHA-256 Hash: 62aedf0125252922581bf109e6efc01ee2fbef97f9d60f5c065ce4a25e75273b</p>        </div>      </div>    </div><p>一般来说，需要参与签名的请求信息主要是请求参数，比如 Binance 给出的命令行示例:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559&quot;</span> |openssl dgst -sha256 -hmac <span class="hljs-string">&quot;NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j&quot;</span>SHA2-256(stdin)= c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71</code></pre></div><p>生成出来的 <code>signature</code> 作为一个额外的参数附加在请求中捎带给服务器:</p><div class="code-wrapper"><pre><code class="hljs bash">curl -H <span class="hljs-string">&quot;X-MBX-APIKEY: vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A&quot;</span> \-X POST <span class="hljs-string">&#x27;https://api.binance.com/api/v3/order&#x27;</span> \-d <span class="hljs-string">&#x27;symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559&amp;signature=c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71&#x27;</span></code></pre></div><p>服务端在接到请求后，会根据请求参数和密钥重新计算签名，然后与请求中的签名进行比对，如果一致则通过，否则拒绝。</p><p>考虑一下比对不一致的情况，有如下两种原因：</p><ol><li>请求被篡改，比如用户想买一个 BTC，被篡改为买 100 个 BTC</li><li>密钥不正确</li></ol><div class="note note-primary">            <p><strong><em>SUMMARY:</em></strong></p><p>从上可见，如果签名验证成功，我们可以说请求是合法的。</p><p>因为上述签名是基于密钥的，所以混合了防篡改和鉴权的功能。</p><p>不难看出，签名鉴权的核心在于密钥的管理 —— 用户需要使用密钥生成签名，服务器需要使用相同的密钥验证签名。</p>          </div><h2 id="用户创建">用户创建</h2><p>前面提到，签名的核心在于密钥的管理，而密钥的初始化就发生在用户创建的时候 —— 用户注册时，我们需要给用户生成一个密钥，后续用户的请求就使用这个密钥进行签名。</p><p>这里引出三个问题：</p><ol><li><p>创建请求本身的鉴权 —— 此时还没有用户密钥</p></li><li><p>用户密钥的安全传输 —— 生成密钥后，如何安全地传输给用户</p></li><li><p>用户密钥的安全存储 —— 如何安全地保存密钥</p></li></ol><h3 id="调用方发起请求">调用方发起请求</h3><pre><code class=" mermaid">classDiagram    direction LR    class CLIENT &#123;        data_key: string        fingerprint: string        user_info: dict        gen_data_key() string        gen_fingerprint() string        encrypt_user_info(user_info, data_key) dict        encrypt_fingerprint(fingerprint, data_key) string        encrypt_data_key(data_key) string        sign(dict) string    &#125;    class REQUEST &#123;        data_key_encrypted: string        fingerprint_encrypted: string        user_info_encrypted: dict        signature: string    &#125;    CLIENT --&gt; REQUEST : sends</code></pre><p>考虑请求的构建过程如下：</p><ol><li>用户注册时，初始状态下，主要包含 3 个明文信息：</li></ol><ul><li><code>data_key</code>：当前请求的数据加密密钥，是对称的。并且该密钥是临时生成的，特用于处理账号注册请求。</li><li><code>fingerprint</code>：当前用户的指纹，使用特殊算法生成，可以包含设备 ID 或其它的特征。</li><li><code>user_info</code>: 用户的基本信息，比如邮箱、电话等。</li></ul><ol start="2"><li>然后根据以上信息生成 <code>signature</code>:</li></ol><div class="note note-light">            <p>考虑这里的签名是如何生成的：</p><p>可以确定的是，这里的签名和用户密钥无关，因为此时用户还没有密钥。<br>这里的签名实际上是调用方在 AWS KMS 中，使用非对称密钥生成的签名，这个密钥对只有两端能够访问，分别是：</p><ul><li>外层调用方服务</li><li>内层基础架构账号服务</li></ul><p>也就是说，内层基础服务依赖 AWS KMS 来验证请求方的身份，只处理真正来自我司外层服务团队发过来的请求。</p>          </div><ol start="3"><li>接着，使用 <code>data_key</code> 加密 <code>user_info</code> 和 <code>fingerprint</code></li></ol><ul><li><code>data_key + user_info -&gt; user_info_encrypted</code></li><li><code>data_key + fingerprint -&gt; fingerprint_encrypted</code></li></ul><ol start="4"><li>最后，加密 <code>data_key</code> 本身<br>这一步也是利用 AWS KMS 完成的，同样保证只有两端能够访问。即 <code>data_key + KMS -&gt; data_key_encrypted</code></li></ol><p>至此，我们将上述信息打包成一个请求，发送给服务端。</p><div class="note note-primary">            <p><strong><em>SUMMARY:</em></strong></p><p>考虑这里的请求是如何保证安全性的：</p><ol><li><code>data_key</code> 的理论粒度是请求级别的, 每个新用户注册时使用的 <code>data_key</code> 都是不同的。</li><li>所有数据都使用 <code>data_key</code> 加密，保证了数据的机密性。</li><li>使用基于 AWS KMS 的内部签名，保证了请求的完整性和 ACL 功能。</li></ol>          </div><hr><h3 id="服务端验证请求">服务端验证请求</h3><p>接下来看服务端接到请求之后如何对请求进行验证。</p><pre><code class=" mermaid">classDiagram    direction LR    class REQUEST &#123;        data_key_encrypted: string        fingerprint_encrypted: string        user_info_encrypted: dict        signature: string    &#125;    class KMS &#123;        decrypt_data_key() string        decrypt_common_salt() string        sign()    &#125;    class SERVER &#123;        data_key: string        common_salt: string    &#125;    class DATABASE &#123;        common_salt_encrypted: string    &#125;    REQUEST --&gt; KMS    DATABASE --&gt; KMS    KMS --&gt; SERVER : data_key + common_salt</code></pre><ol><li>服务端经过上面步骤可以拿到 <code>data_key</code> 和 <code>common_salt</code></li><li>然后使用 <code>data_key</code> 对请求中的 <code>user_info</code> 和 <code>fingerprint</code> 进行解密，得到明文信息</li><li>使用解密后的信息找 KMS 验证签名</li></ol><p>至此，验证步骤已经完成。</p><hr><h3 id="用户密钥的生成、存储和返回">用户密钥的生成、存储和返回</h3><p>生成步骤比较简单，根据一定算法随机生成一下即可。这里省略具体的生成算法。假设我们已经生成了 <span class="label label-info">secret_key_plain_text</span>，重点关注后续步骤：即存储和返回。</p><ol><li><p><strong>存储</strong><br>分两步骤考虑存储问题：</p><ul><li>如何加密存储 <code>secret_key_plain_text</code> —— 显然我们不能直接存储明文。</li><li>进一步的，密钥的粒度是什么 —— 全局唯一吗？</li></ul><p>一个简单的思路是，继续利用 AWS KMS 对这个 <code>secret_key_plain_text</code> 进行加密，然后存储密文在数据库中。其实对于大部分场景，这个方案是基本够用的，但是这个方案最明显的问题在于：所有用户的 <code>secret_key</code> 都用的一个密钥加密。假设这个唯一的密钥被破解了，那么所有用户的密钥都可以被解密。</p><p>因此我们选择了另外一种方案，在不影响性能的情况下，做到用户粒度的密钥加密，即每个用户的密钥都使用不同的密钥加密。这样即使某个密钥被破解，也只能影响到一个用户:</p><p>上一步中我们拿到了 <code>common_salt</code> 以及 <code>fingerprint</code> 的明文，我们可以直接使用这两个信息拼接生成加密密钥。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GenStorageKey</span><span class="hljs-params">(commonSalt, fingerprint <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;    <span class="hljs-keyword">return</span> hash(commonSalt + fingerprint)&#125;</code></pre></div><p>然后我们使用该 <code>storage_key</code> 加密 <code>secret_key</code> 得到 <code>secret_key_encrypted</code> 再进行存储。</p><p>存储了用户 <code>secret_key</code> 还不够，<code>storage_key</code> 也需要存储，否则后续无法解密 <code>secret_key</code>。这一步我们选择使用 AWS KMS 分别加密 <code>fingerprint</code> 和 <code>common_salt</code>，然后存储在数据库中，而不是加密 <code>storage_key</code> 在存储。</p><pre><code class=" mermaid">classDiagram direction RLclass UserSecretKeyRecord &#123;user_id: u64secret_key_encrypted: stringfingerprint_encrypted: string&#125; class CommonSecretRecord &#123;common_salt_encrypted: string &#125; UserSecretKeyRecord --|&gt; &quot;+&quot; CommonSecretRecord</code></pre></li><li><p><strong>返回生成的密钥，结束请求</strong><br>使用调用方传过来的 <code>data_key</code> 加密我们生成的 <code>secret_key</code> 进行返回即可。保证该响应只有调用方能够解密查看。</p></li></ol><div class="note note-primary">            <p><strong><em>SUMMARY:</em></strong></p><table><thead><tr><th>Field</th><th>Security Layer</th><th>Helper</th></tr></thead><tbody><tr><td>data_key</td><td>请求本身的加密</td><td>KMS</td></tr><tr><td>signature</td><td>请求的完整性</td><td>KMS</td></tr><tr><td>fingerprint</td><td>用户指纹，secret_key 的构成部分</td><td>KMS</td></tr><tr><td>common_salt</td><td>secret_key 的构成部分</td><td>KMS</td></tr></tbody></table>          </div><h2 id="用户请求">用户请求</h2><p>用户注册完成后，用户拿到了自己的密钥，接下来的请求就可以使用这个密钥进行签名了。</p><pre><code class=" mermaid">classDiagram    direction LR    class USER &#123;        api_key: string        secret_key: string        sign(dict) string    &#125;    class REQUEST &#123;        params: dict        signature: string        api_key: string    &#125;    USER --&gt; REQUEST : sends</code></pre><p>服务端接到请求后，首先根据 <code>api_key</code> 找到对应的 <code>secret_key</code>（前面我们省略了关于 <code>api_key</code> 的细节，在这个场景下可以简单理解为 <code>user_id</code>），然后使用 <code>secret_key</code> 对请求参数进行签名，最后与请求中的签名进行比对即可。</p><p>上述核心原理比较好理解，复杂的点在于工程实践上的实际架构。出于保密等原因，这里不展开说明。</p><h2 id="多层签名的实践">多层签名的实践</h2><p>前面的场景中，主要介绍的是如何利用签名进行用户请求的合法性校验。在实际工作中，前司的 CTO 提出了一个更高级的要求 —— 基于多层签名验证全链路的合法性。</p><p>考虑一个典型的场景：</p><pre><code class=" mermaid">flowchart LR    User --&gt; Gateway --&gt; Service_A --&gt; Service_B --&gt; Service_C</code></pre><p>对于服务 C 来说，假设它需要验证请求是否合法，方式与用户请求类似，验证请求中的签名。考虑验证通过的情况下，能够说明什么问题？</p><div class="note note-warning">            <p>服务能过验证说明请求是合法的，但是并不能说明请求的来源是合法的。</p><p>换句话来说，服务 C 在这种状况下不关心请求的来源，只关心请求的合法性。无论是谁，只要发送相同的请求到 C，都能通过验证。</p>          </div><p>CTO 提出，为了避免员工&quot;监守自盗&quot;的问题，需要在基础架构服务上加入验证机制，保证请求来源的可信。</p><div class="note note-light">            <p>这里指的是，假设服务 A 作为入口上游是可信的，服务 C 作为公司基础架构层也是可靠的，此时假设中间服务 B 是外包开发。<br>那么 B 开发者可以利用自己的权限，在没有接到 A 的调用的情况下，手动构造发送一个转账请求到服务 C，于是就未经用户授权，直接将用户的资产转走了。</p>          </div><p>为了应对这种情况，我们引入了多层签名验证机制。</p><pre><code class=" mermaid">classDiagram    direction LR    class REQUEST_A &#123;        payload_a: string        signature_a: string    &#125;    class REQUEST_B &#123;        payload_b: string        signature_b: string    &#125;    class SERVICE_C &#123;    &#125;    REQUEST_A &quot;wrap&quot; &lt;-- REQUEST_B    REQUEST_B --&gt; SERVICE_C : sends</code></pre><ol><li><p>A 构造消息：<br>A 构造原始请求 PAYLOAD_A<br>A 生成签名 SIGN_A(PAYLOAD_A)，然后使用 A 的私钥加密<br>将消息打包为 REQUEST_A = (PAYLOAD_A, SIGN_A)，发送给 B</p></li><li><p>B 接收并签名：<br>B 收到 REQUEST_A 后，使用 A 的公钥解密 SIGN_A，再验证 A 的签名是否有效。<br>如果有效，B 对 PAYLOAD_A 和自己的 PAYLOAD_B 信息整体签名，生成 SIGN_B(PAYLOAD_A, PAYLOAD_B)。<br>将消息打包为 REQUEST_B = (PAYLOAD_A, SIGN_A, PAYLOAD_B, SIGN_B)，发送给 C。</p></li><li><p>C 接收并验证：<br>C 收到 REQUEST_B 后，逐层验证签名：<br>先使用 A 的公钥解密后，验证 SIGN_A(PAYLOAD_A) 是否有效。<br>再使用 B 的公钥解密后，验证 SIGN_B(PAYLOAD_A, PAYLOAD_B) 是否有效。<br>如果所有签名都通过，C 可以确定请求从 A → B → C 的过程中未被篡改。</p></li></ol><p>这里给一个 Demo 演示基本原理：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;crypto&quot;</span><span class="hljs-string">&quot;crypto/rand&quot;</span><span class="hljs-string">&quot;crypto/rsa&quot;</span><span class="hljs-string">&quot;crypto/sha256&quot;</span><span class="hljs-string">&quot;encoding/base64&quot;</span><span class="hljs-string">&quot;encoding/json&quot;</span><span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-keyword">var</span> (PubKeyA *rsa.PublicKeyPriKeyA *rsa.PrivateKeyPubKeyB *rsa.PublicKeyPriKeyB *rsa.PrivateKey)<span class="hljs-keyword">type</span> RequestA <span class="hljs-keyword">struct</span> &#123;Payload   <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>Signature <span class="hljs-type">string</span>&#125;<span class="hljs-keyword">type</span> RequestB <span class="hljs-keyword">struct</span> &#123;PayloadA   <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-comment">// A&#x27;s payload</span>SignatureA <span class="hljs-type">string</span>Payload    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-comment">// B&#x27;s payload</span>Signature  <span class="hljs-type">string</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;chC := serviceC()chB := serviceB(chC)<span class="hljs-comment">// 模拟 A 发送请求给 B</span>payload := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;serviceA&quot;</span>: <span class="hljs-string">&quot;serviceA&quot;</span>&#125;signature := sign(payload, PriKeyA)req := RequestA&#123;Payload:   payload,Signature: signature,&#125;chB &lt;- req<span class="hljs-comment">// 等待异步处理完成</span>time.Sleep(<span class="hljs-number">1</span> * time.Second)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serviceB</span><span class="hljs-params">(chanC <span class="hljs-keyword">chan</span> RequestB)</span></span> <span class="hljs-keyword">chan</span> RequestA &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> RequestA)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> req := <span class="hljs-keyword">range</span> ch &#123;params := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)params[<span class="hljs-string">&quot;serviceB&quot;</span>] = <span class="hljs-string">&quot;serviceB&quot;</span><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.Payload &#123;params[k] = v&#125;signature := sign(params, PriKeyB)reqB := RequestB&#123;PayloadA:   req.Payload,SignatureA: req.Signature,Payload:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;serviceB&quot;</span>: <span class="hljs-string">&quot;serviceB&quot;</span>&#125;,Signature:  signature,&#125;chanC &lt;- reqB&#125;&#125;()<span class="hljs-keyword">return</span> ch&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">serviceC</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">chan</span> RequestB &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> RequestB)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> req := <span class="hljs-keyword">range</span> ch &#123;<span class="hljs-comment">// Verify signature A</span><span class="hljs-keyword">if</span> !verifySignature(req.PayloadA, req.SignatureA, PubKeyA) &#123;<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Invalid signature A&quot;</span>)<span class="hljs-keyword">continue</span>&#125;<span class="hljs-comment">// Verify signature B</span>payload := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.Payload &#123;payload[k] = v&#125;<span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.PayloadA &#123;payload[k] = v&#125;<span class="hljs-keyword">if</span> !verifySignature(payload, req.Signature, PubKeyB) &#123;<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Invalid signature B&quot;</span>)<span class="hljs-keyword">continue</span>&#125;<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Verify OK&quot;</span>)&#125;&#125;()<span class="hljs-keyword">return</span> ch&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sign</span><span class="hljs-params">(payload <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, privateKey *rsa.PrivateKey)</span></span> <span class="hljs-type">string</span> &#123;payloadBs, _ := json.Marshal(payload)h := sha256.New()h.Write(payloadBs)hash := h.Sum(<span class="hljs-literal">nil</span>)signature, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hash)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-keyword">return</span> base64.StdEncoding.EncodeToString(signature)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">verifySignature</span><span class="hljs-params">(payload <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, signature <span class="hljs-type">string</span>, publicKey *rsa.PublicKey)</span></span> <span class="hljs-type">bool</span> &#123;payloadBs, _ := json.Marshal(payload)h := sha256.New()h.Write(payloadBs)hash := h.Sum(<span class="hljs-literal">nil</span>)signatureBytes, _ := base64.StdEncoding.DecodeString(signature)err := rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, hash, signatureBytes)<span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;generateRSAKeyPair := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(bits <span class="hljs-type">int</span>)</span></span> (*rsa.PrivateKey, *rsa.PublicKey, <span class="hljs-type">error</span>) &#123;privateKey, err := rsa.GenerateKey(rand.Reader, bits)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, err&#125;<span class="hljs-keyword">return</span> privateKey, &amp;privateKey.PublicKey, <span class="hljs-literal">nil</span>&#125;PriKeyA, PubKeyA, _ = generateRSAKeyPair(<span class="hljs-number">2048</span>)PriKeyB, PubKeyB, _ = generateRSAKeyPair(<span class="hljs-number">2048</span>)&#125;</code></pre></div><p>实践中, 可能会发生链路长 / 请求参数过大的情况，为了避免最后一个端点的请求性能严重下降，我们可以把捎带的请求参数列表更换为捎带请求参数的 SHA-256 摘要:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;    PayloadDigestSigChain <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> <span class="hljs-comment">// payload digest -&gt; signature</span>&#125;</code></pre></div><p>实际签名的步骤为:</p><ol><li>将参数列表转换为 string 拼接起来</li><li>对这个 string 进行 SHA-256 摘要</li><li>使用私钥对摘要进行签名</li></ol><p>这样可以避免传输完整的参数列表，减轻服务端的压力。</p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Auth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于规则的权限系统</title>
    <link href="/tech/rule_based_auth_sys/"/>
    <url>/tech/rule_based_auth_sys/</url>
    
    <content type="html"><![CDATA[<p>提到鉴权，我们往往会联想到基于 <code>Cookie-Session</code> / <code>Access Token</code> / <code>JWT</code> / <code>Siganature</code> 的方式，然而这些方式的解决的问题是在无状态的系统中进行用户身份识别从而达到有状态的目的的。</p><p>然而在实际的业务场景中，我们还有一种更为复杂的权限需求，比如：</p><ul><li>A 用户可以查看所有用户的信息，B 则只能查看自己的信息</li><li>A 有权修改系统内的数据，B 则只能查看</li></ul><p>这类场景更偏向 「鉴权」 而非 「认证」，因为它们更多的是在描述用户在系统中的行为权限而非身份。所以你可以称之为 <code>Access Control</code> or <code>Permission Control</code>。</p><p>而在鉴权的场景下，一般有两种最佳实践：</p><ol><li>基于角色的权限控制（RBAC, Role-based access control）</li><li>基于属性的权限控制（ABAC, Attribute-based access control）</li></ol><h2 id="RBAC">RBAC</h2><p>RBAC 是一种基于角色的权限控制，它的核心思想是将用户分配到不同的角色，而角色拥有不同的权限。这种方式的优势在于简单易懂，易于维护，适用于中小型系统。</p><p>比如我们可以定义三种角色：</p><ul><li>Admin</li><li>User</li><li>Guest</li></ul><p>对于不同的角色，我们可以定义不同的权限：</p><ul><li>Admin: CRUD</li><li>User: CR</li><li>Guest: R</li></ul><p>最后，我们赋予每个 User 不同的 Role：</p><ul><li>User A<ul><li>Admin</li></ul></li><li>User B<ul><li>User</li></ul></li><li>User C<ul><li>Guest</li></ul></li></ul><p>然后我们可以“硬编码”我们想要的权限逻辑，然后在用户试图进行 CRUD 任意一种操作时，我们基于用户身份，找到其对应的角色，再根据角色的权限判断当前请求是否允许通过即可。</p><pre><code class=" mermaid">classDiagramclass user&#123;+int64 user_id&#125;class role&#123;+int64 role_id+String desc&#125;class user_role_ref&#123;+int64 user_id+int64 role_id&#125;user o--o user_role_ref  role o--o user_role_ref</code></pre><p>鉴权方式类似于：<code>check_role(user)</code>。</p><h2 id="ABAC">ABAC</h2><p>简单来说，ABAC 的权限校验点相比于 RBAC 从 <code>Role</code> 转化为了 <code>Attribute</code>，从而让鉴权粒度更细了，并且组合起来更自由了。沿用上面的例子，我们可以使用 ABAC 实现如下：</p><p>我们不再需要 Role 这个角色的定义，所有人都视为 User：</p><ul><li>User<ul><li>User A</li><li>User B</li><li>User C</li></ul></li></ul><p>然后把 Role 具有的权限抽象为 <code>Attribute</code>：</p><ul><li>Attribute<ul><li>Create</li><li>Read</li><li>Update</li><li>Delete</li></ul></li></ul><p>最后赋予每个 User 不同的 Attribute：</p><ul><li>User A<ul><li>Create + Read + Update + Delete</li></ul></li><li>User B<ul><li>Create + Read</li></ul></li><li>User C<ul><li>Read</li></ul></li></ul><p>鉴权方式类似于: <code>check_attribute(user_id, attribute)</code> 。</p><div class="note note-light">            <p>事实上，k8s 中就可以使用 ABAC 来进行权限控制，参见：<a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/abac/"><u>使用 ABAC 鉴权</u></a></p>          </div><h2 id="R-A">R+A</h2><p>在实际的业务场景中，我们往往会使用 RBAC 和 ABAC 的混合方式，因为 Attribute 的数量可能会非常多，因此直接管理 Attribute 的成本比较高，业务一般不会这么设计。</p><p>通常来说，业务都会基于 R - A 的双层结构来进行不同粒度的权限管控，代入实际例子可以这么说：</p><ul><li>R：系统管理员可以访问某个 resource</li><li>A：普通用户被授予访问该 resource 的权限后，虽然他不是管理员，但也可以访问</li></ul><p>这么做还有一个好处，就是方便用户进行快捷的权限管控，用户把某个员工设置为系统管理员，显然比用户把所有 Attribute 都添加到该员工头上来的简单。</p><p>除此之外，我们一般可以使用 R 进行快速决策，当 R 无法满足时，再引入 A 进行复杂决策，这么做也可以提升鉴权本身的效率。</p><p>总而言之，我们可以使用 Role 来进行基本的权限控制，然后使用 Attribute 来进行更细粒度的权限控制。</p><h2 id="常见架构设计">常见架构设计</h2><p><strong>1. 架构总体设计</strong></p><p>鉴权系统可以分为以下几个核心模块：</p><p><strong>1.1 数据层</strong></p><p>用于存储用户、角色、权限、属性和规则。数据层需要保证高效查询和及时更新。</p><ul><li><p><strong>用户数据</strong>：包含用户基本信息和关联的角色。</p></li><li><p><strong>角色数据</strong>：存储角色与权限、属性的映射关系。</p></li><li><p><strong>属性数据</strong>：存储 ABAC 中需要的用户属性、资源属性等信息。</p></li><li><p><strong>规则存储</strong>：存储复杂场景下的规则，比如条件表达式或策略脚本。</p></li></ul><p><strong>1.2 数据同步层</strong></p><p>负责从各个业务系统同步数据（用户信息、角色、属性等）到鉴权系统。</p><ul><li><p><strong>拉模式</strong>：定期从业务系统拉取更新（如使用 REST API 或消息队列）。</p></li><li><p><strong>推模式</strong>：业务系统在数据变化时推送更新到鉴权系统。</p></li><li><p><strong>缓存层</strong>：对于频繁访问的数据，可以使用内存缓存（如 Redis）以提升性能。</p></li></ul><p><strong>1.3 鉴权核心</strong></p><p>负责权限判断的核心模块。支持 RBAC 和 ABAC 的组合逻辑。</p><ul><li><p><strong>RBAC 模块</strong>：通过用户关联的角色判断权限。</p></li><li><p><strong>ABAC 模块</strong>：通过用户、资源的属性和规则判断权限。</p></li><li><p><strong>规则引擎</strong>：支持动态规则匹配，可能使用 DSL 或标准语言（如 JSONLogic 或 Drools）。</p></li><li><p><strong>决策引擎</strong>：综合 RBAC 和 ABAC 结果，根据优先级或策略作出最终鉴权决策。</p></li></ul><p><strong>1.4 API 接口层</strong></p><p>提供统一的鉴权接口供业务系统调用。</p><ul><li><strong>简单接口</strong>：例如 checkAttr(userId, attr)，用于快速校验简单场景。</li><li><strong>复杂接口</strong>：例如 checkPermission(userId, action, resource)，支持复杂规则判断。</li></ul><p><strong>1.5 日志和审计</strong></p><p>记录所有鉴权请求和结果，便于后续排查和分析。</p><ul><li><strong>日志存储</strong>：记录访问日志。</li><li><strong>审计功能</strong>：提供接口供管理员查询权限决策过程。</li></ul><hr><p><strong>2. 数据同步设计</strong></p><p>鉴权系统需要构建一套机制，与各个业务系统同步数据：</p><p><strong>2.1 数据源和 ETL</strong></p><ul><li><p><strong>用户数据源</strong>：从用户管理系统同步用户信息。</p></li><li><p><strong>角色数据源</strong>：从权限管理系统同步角色及权限。</p></li><li><p><strong>属性数据源</strong>：从多个业务系统同步 ABAC 所需的属性（如用户部门、资源类型）。</p></li><li><p><strong>ETL 管道</strong>：实现数据提取、清洗和加载到鉴权系统。</p></li></ul><p><strong>2.2 数据实时性</strong></p><p>对于属性变化可能影响权限的场景，需要实现实时同步或延迟最小化。</p><ul><li><p>使用事件驱动架构（如 Kafka）捕获数据变化。</p></li><li><p>增量更新而非全量同步。</p></li></ul><p><strong>2.3 数据缓存</strong></p><ul><li><p>对于高频访问的权限数据，可以使用 Redis 等缓存。</p></li><li><p>缓存失效策略应与同步机制匹配，保证数据一致性。</p></li></ul><hr><p><strong>3. 规则引擎设计</strong></p><p>复杂场景下，需要引入规则引擎来动态判断权限。</p><p><strong>3.1 规则表达</strong></p><p>规则可以用 DSL 或标准语言表示：</p><ul><li><p><strong>DSL（领域特定语言）</strong>：如 <code>role == &quot;admin&quot; AND resource.type == &quot;file&quot; AND resource.owner == user.id</code></p></li><li><p><strong>标准规则语言</strong>：如 JSONLogic、Drools 或 Open Policy Agent (OPA)。</p></li></ul><p><strong>3.2 规则存储</strong></p><ul><li><p>存储规则到数据库（如 PostgreSQL）。</p></li><li><p>对复杂规则，可以用版本化管理，支持回滚。</p></li></ul><p><strong>3.3 规则执行</strong></p><ul><li><p><strong>RBAC 优先</strong>：先快速检查角色权限，减少不必要的规则计算。</p></li><li><p><strong>ABAC 动态计算</strong>：根据规则动态计算属性权限。</p></li></ul><p><strong>3.4 规则优化</strong></p><ul><li>使用缓存存储常用规则的结果。</li><li>分析规则的覆盖范围，优化冗余规则。</li></ul><hr><p><strong>4. API 接口层</strong></p><p>提供对外访问接口，并确保性能与安全性。</p><p><strong>4.1 简单接口</strong></p><ul><li><p>checkAttr(userId, attr)：适用于 RBAC 和简单 ABAC 场景。</p></li><li><p>快速校验是否具备某属性（如管理员身份）。</p></li></ul><p><strong>4.2 复杂接口</strong></p><ul><li><p>checkPermission(userId, action, resource)：综合用户角色和属性判断权限。</p></li><li><p>支持返回详细的决策依据（如角色命中、规则匹配等）。</p></li></ul><p><strong>4.3 批量接口</strong></p><p>支持批量鉴权的接口（如批量检查多个资源的权限），提高效率。</p><hr><p><strong>5. 示例工作流</strong></p><p>假设用户 user1 想访问资源 file123：</p><ol><li><p>数据层查询 user1 的角色和属性，以及 file123 的属性。</p></li><li><p>RBAC 模块判断用户是否具备相关角色权限。</p></li><li><p>如果 RBAC 无法决定，则调用 ABAC 模块：</p></li></ol><ul><li>加载 user1 和 file123 的属性。</li><li>加载相关规则并执行。</li></ul><ol start="4"><li>决策引擎综合 RBAC 和 ABAC 的结果，返回最终判断。</li></ol><hr><p><strong>6. 扩展功能</strong></p><ul><li><p><strong>动态更新规则</strong>：支持管理员实时更新规则，立即生效。</p></li><li><p><strong>多租户支持</strong>：为不同业务系统提供隔离的鉴权规则和数据。</p></li><li><p><strong>性能优化</strong>：分析高频鉴权请求，使用缓存或索引优化查询。</p></li></ul><h2 id="实例">实例</h2><p>这里有一个以我在飞书工作期间为灵感的一个鉴权原型服务, 这个 Demo 主要用于演示 / 验证 RBAC + ABAC 的结合, 并没有完整的工程实现, 例如目前并没有考虑 API 设计 / ETL 数据同步等。</p><p>See: <a href="https://github.com/sshelll/raac-demo">raac-demo</a></p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Auth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Backend Misc</title>
    <link href="/tech/backend_misc/"/>
    <url>/tech/backend_misc/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>WIP FOREVER!</p>          </div><div class="note note-secondary">            <p><strong>problems</strong> I encountered(wondered) + <strong>solutions</strong> I found =&gt; <strong>knowledges</strong> I learned.</p>          </div><h2 id="Database">Database</h2><h3 id="Index-types">Index types</h3><p>Basically there’re 3 core index types of databases:</p><ul><li>B / B+ Tree</li><li>LSM Tree</li><li>Hash</li></ul><p>Comparison:</p><table><thead><tr><th>Type</th><th>Benifits</th><th>Downsides</th></tr></thead><tbody><tr><td>Hash</td><td>Super fast</td><td>No range queries;<br>keys need to fit in memory</td></tr><tr><td>B / B+ Tree</td><td>Fast range-queries;<br>Number of keys not limited by memory</td><td>Slow write to btree on disk</td></tr><tr><td>LSM Tree</td><td>Number of keys not limited by memory;<br>Write faster than B tree and slower than Hash;<br>Support range-queries but slower than B tree</td><td>Extra CPU cost for Compaction</td></tr></tbody></table><p>Check this video for more details: <a href="https://www.youtube.com/watch?v=ciGAVER_erw">LSM Tree + SSTable</a></p><hr><h3 id="LSM-Tree">LSM-Tree</h3><p><strong>Core primitives:</strong></p><div class="code-wrapper"><pre><code class="hljs text">                                          ┌───────┐ ┌───────┐                                      ┌──►│SSTable├►│SSTable│ ... L0┌───────────┐   ┌───────────────────┐ │   └───┬───┘ └───────┘│ MemTable  ├──►│ ImmutableMemTable ├─┘   ┌───┴───┐ ┌───────┐└───────────┘   └───────────────────┘     │SSTable├►│SSTable│ ... L1+                                          └───┬───┘ └───────┘                                          ┌───┴───┐ ┌───────┐                                          │SSTable├►│SSTable│ ... L1+                                          └───────┘ └───────┘</code></pre></div><p><strong>Writing:</strong></p><div class="code-wrapper"><pre><code class="hljs text"> disk┌───┐     ┌────────┐│WAL├────►│MemTable│└───┘     └──┬─────┘             │             │ if data is too much      ┌──────┴─────────────────┐ ┌────┴────────────┐    ┌──────┴─────┐ │ImmutableMemTable│    │New MemTable│ └───────┬─────────┘    └────────────┘         │         │ inorder traversal the tree         │     ┌───┴───┐     │SSTable│ disk L0     └───┬───┘         │ compaction     ┌───┴───┐     │SSTable│ disk L1     └───────┘</code></pre></div><p><strong>Querying:</strong></p><div class="code-wrapper"><pre><code class="hljs text">     ┌────────┐     │MemTable│ mem query     └────┬───┘          │  ┌───────┴─────────┐  │ImmutableMemTable│  mem query  └───┬─────────────┘      │      ├─────────────────┐┌─────┴──────┐    ┌─────┴──────┐│Bloom Filter│    │Bloom Filter│  use bloom filter to check if the target exists in the file│------------│    │------------││  SSTable   │    │  SSTable   │  L0, the SSTables might intersect, so we have to check each of &#x27;em└─────┬──────┘    └────────────┘      │┌─────┴──────┐    ┌────────────┐│  SSTable   │    │  SSTable   │  L1+, the SSTables aren&#x27;t intersected, so we can use a binary search to get the target file└────────────┘    └────────────┘     ...</code></pre></div><hr><h3 id="Other-types-except-Index">Other types(except Index)</h3><blockquote><p>I didn’t intend to go into detail on each of them—just a brief introduction and the core ideas.</p></blockquote><ol><li><p><u><strong>Group by storage</strong></u></p><ul><li><strong>Row-oriented</strong>: store the data in rows, and it’s good for OLTP.</li><li><strong>Column-oriented</strong>: store the data in columns, and it’s good for OLAP.</li><li><strong>Column-family</strong>: store the data in column families.</li><li><strong>Doc</strong>: store the data as a document.</li><li><strong>KV</strong>: store the data as HASH.</li></ul></li></ol><p><code>Row-oriented</code> is simple and common, let’s skip it here.</p><p><code>Column-oriented</code> stores data in columns, which speeds up the query like: <code>select col from table where ...</code>(that’s why it’s good for OLAP), but what if you perform a query like <code>select * from table where ...</code>?</p><p>Usually there’re 3 steps:</p><ul><li>Find the rows according to the <code>where clause</code>.</li><li>Use <strong><em>multi-threads</em></strong> to fetch the columns of the rows.</li><li>Aggregate the results.</li></ul><p><code>Column-family</code> could be a litte bit more complex, let’s break it down from 2 perspectives:</p><ul><li>What does it look like?</li><li>What problems does it solve?</li></ul><p>Assume we have a table like this(Row-oriented):</p><table><thead><tr><th>user_id</th><th>name</th><th>age</th><th>order1</th><th>order2</th><th>addr1</th><th>addr2</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>30</td><td>iPhone</td><td>MacBook</td><td>NY</td><td>LA</td></tr><tr><td>2</td><td>Bob</td><td>28</td><td>Android</td><td>Laptop</td><td>SF</td><td>TX</td></tr></tbody></table><p>If we convert it into Column-oriented, there’re 7 columns.</p><p>Column-family is like split the single one table into several related tables, and each table has a group of columns. For example, we could split the table above into 3 column families:</p><div class="code-wrapper"><pre><code class="hljs text">Column-family1 stands for user basic info:Row1: (1, Alice, 30)Row2: (2, Bob, 28)Column-family2 stands for user orders:Row1: (iPhone, MacBook)Row2: (Android, Laptop)Column-family3 stands for user addresses:Row1: (NY, LA)Row2: (SF, TX)</code></pre></div><p>This design benifits in several ways:</p><ul><li><p>Comparing to Row-oriented databases, it avoids loading useless data.</p><p>In Row-oriented db, it will load all the columns of the row and extract the needed ones.</p></li><li><p>Comparing to Column-oriented databases, it avoids extra IOs.</p><p>In Column-oriented db, like we mentioned before, it needs to fetch the columns of the rows from different location of the disk(with or without multi-threads).</p><p>In Column-family db, we can query by rows with a specific family just like a Row-oriented db, which reduces the count of IOs.</p></li></ul><p>Now, we can see that Column-family follows a design pattern that sits between Row-oriented and Column-oriented storage models.</p><p>Let’s consider another question: <u>what if I decide to use a Row-oriented db and manully split a wide table into several related table instead of using a Column-family db?</u></p><p>This question cannot be answered easily, because a Column-family database usually works with LSM-Tree, and a classic RDBMS usually works with B+ Tree. The difference between them is not just about the storage model, but also about the query model, the transaction model, the consistency model, and so on.</p><p>E.g. when we perform DDL to a LSM-Tree based Column-family database to modify a ‘family’ of a table, things’re totally different:</p><ul><li>Adding a column doesn’t require heavy operations for Column-family db, cuz LSM-Tree is append only, which is a bit like the <code>INSTANT</code> mode of MySQL.</li><li>Removing a column is almost the same, we only need to modify the metadata of the family without deleting it from the disk.</li></ul><hr><ol start="2"><li><p><u><strong>Different Aims</strong></u></p><ul><li>GraphDB: solves the n-degree relationship problem.</li><li>TSDB: solves the time series data problem.</li><li>VectorDB: solves the vector data problem.</li></ul></li></ol><p>GraphDB: what does <code>n-degree</code> mean?</p><p>The example below is a classic <code>2-degree</code> relationship:</p><div class="code-wrapper"><pre><code class="hljs text">user_friends_ref:| user_id | friend_user_id ||    1    |      2         ||    1    |      31        ||    1    |      283       |If we want to recommend the friends of the friends of user 1 to himself,how to acheive this in a RDBMS?E.g Alice knows Bob, and Bob knows Charlie, and we want to recommend Charlie to Alice.We have to do things like these:1. select friend_user_id from user_friends_ref where user_id = alice.user_id;2. select distinct(friend_user_id) from user_friends_ref where user_id in $(the_result_above);3. recommend the result in the 2nd step;</code></pre></div><p>And if we want to recommend my friends’ friends’ friends to me, it’ll be a <code>3-degree</code> problem and a disaster:</p><div class="code-wrapper"><pre><code class="hljs text">┌──┐  ┌────┐  ┌───┐  ┌─────┐│Me├─►│Jack├─►│Amy├─►│Steve│└──┘  └────┘  └───┘  └──┬──┘ ▲       recommend      │ └──────────────────────┘</code></pre></div><p>Time Series Databases (TSDBs), such as InfluxDB, are built on LSM-Tree architecture, with extensive optimizations tailored specifically for time series data.</p><p>As for VectorDB, it’s built for vector data, you can use it to perform calculation like <code>L2</code> and <code>Cosine Similarity</code> easily:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mn>2</mn><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo>−</mo><msub><mi>B</mi><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mn>2</mn></msub><mo>−</mo><msub><mi>B</mi><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>A</mi><mi>n</mi></msub><mo>−</mo><msub><mi>B</mi><mi>n</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">L2(A, B) = \sqrt{(A_1 - B_1)^2 + (A_2 - B_2)^2 + \text{…} + (A_n - B_n)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.2561em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9839em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="minner">…</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9439em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.28em" viewBox="0 0 400000 1296" preserveAspectRatio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2561em;"><span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>A</mi><mo>⋅</mo><mi>B</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\cos(\theta) = \frac{A \cdot B}{||A|| \times ||B||}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2963em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord mathnormal">A</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>…</p><hr><h3 id="Transactions">Transactions</h3><h4 id="Optimistic-and-pessimistic-Txs-like-TiDB">Optimistic and pessimistic Txs(like TiDB)</h4><ul><li>Optimistic: commit anyway, if there’re any conflicts, rollback.</li><li>Pessimistic: lock the rows to make sure there’re no conflicts, commit.</li></ul><div class="note note-light">            <p>The lock is a little bit different, cuz we usually use locks to gurantee the resources are modified correctly.</p><p>E.g. if we try to deduct the inventory of a item:<br>using a optimistic lock is like: <code>update item set amount = amount - 1 where amount &gt; 0 and id = 1</code>, and then we check whether the rows affected is <code>1</code>;<br>while using a pessimistic lock is like <code>BEGIN; select amount of item where id = 1; check the amount and do sth; COMMIT;</code></p>          </div><hr><h3 id="MVCC">MVCC</h3><p>MVCC (Multi-Version Concurrency Control) is a solution designed to address transaction management challenges in concurrent environments, allowing for consistent reads and writes without locking.</p><p>Therefore, MVCC is <u>tightly coupled with transactions</u> and is typically a requirement in <u>relational databases</u> to ensure data consistency and concurrency control.</p><p>Different dbs have different approaches, and I don’t intend to go into detail on each of them. Instead, let’s focus on the core ideas:</p><p>Since there’re multi txs trying to perform r/w ops to a same line at the same time(before they ‘COMMIT’), <u>a single row might have several different versions</u>. And when a tx tries to read a row, it’ll try its best to read the latest version.</p><p>To achieve the target, there’re 2 things to be done:</p><ul><li>Determine which version is the ‘latest’ - so I can read it exactly(neither the outdated data nor the uncommitted data).</li><li>And to determine it, we need to know the order of the txs.</li></ul><p><u>Keeping the global tx order is easy, all we need to do is using a serial adder to generate the tx id.</u></p><p>With the tx id, the row might look like this:</p><div class="code-wrapper"><pre><code class="hljs text">              ┌────────────────────┐          ┌──►│ id=1 | data | tx_0 │          │   └────────────────────┘          └─────────────────────┐         ┌────────────────────┐ │       ┌►│ id=1 | data | tx_1 ├─┘       │ └────────────────────┘       └───────────────────┐    ┌────────────────────┐ │    │ id=1 | data | tx_2 ├─┘    └────────────────────┘All of these versions of data can be read</code></pre></div><p>Don’t worry about the disk usage, thoese copies will be cleaned up after the tx is committed by a daemon thread / task asynchronously.</p><p>Now, we can easily get the below information when we’re creating a READ VIEW:</p><ul><li>current active txs<ul><li>the minimal tx_id indicates the oldest active tx</li><li>the maximum tx_id indicates the newest active tx</li></ul></li></ul><p>Finally, we can determine whether a specific version of row can be read with the following steps:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// cur_v is the version of the row we&#x27;re trying to access</span><span class="hljs-comment">// min_id, max_id, my_id are literal meanings</span><span class="hljs-keyword">fn</span> <span class="hljs-title function_">can_read</span>(cur_v: <span class="hljs-type">i32</span>, active_tx_ids: &amp;[<span class="hljs-type">i32</span>], min_id: <span class="hljs-type">i32</span>, max_id: <span class="hljs-type">i32</span>, my_id: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;    <span class="hljs-comment">// current version is old enough</span>    <span class="hljs-keyword">if</span> cur_v &lt; min_id &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-comment">// current version is created by me</span>    <span class="hljs-keyword">if</span> cur_v == my_id &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-comment">// current version is newer than the newest active tx</span>    <span class="hljs-keyword">if</span> cur_v &gt; max_id &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-comment">// if not contains, that means the cur_v was committed before the read view is created</span>    <span class="hljs-comment">// otherwise it means the cur_v is still active and uncommitted</span>    active_tx_ids.<span class="hljs-title function_ invoke__">contains</span>(&amp;cur_v)&#125;</code></pre></div><p>Moreover, we can achieve different <strong>isolation levels</strong> by adjusting the timing of READ VIEW creation:</p><ul><li>If we create a READ VIEW before starting a tx and keep it until the transaction completes, we achieve Repeatable Read (RR) isolation, as the view remains unchanged throughout the transaction’s lifetime.</li><li>If we create a READ VIEW before each query within a transaction, we achieve Read Committed (RC) isolation, as each view may differ, but the data read is always committed.</li></ul><hr><h3 id="Join">Join</h3><h4 id="Nested-Loop-Join">Nested Loop Join</h4><ul><li><p>SQL:<br><code>select * from TableA join TableB on TableA.user_id = TableB.user_id</code></p></li><li><p>Pseudo code:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">rowA</span> <span class="hljs-keyword">in</span> TableA &#123;    <span class="hljs-keyword">for</span> <span class="hljs-variable">rowB</span> <span class="hljs-keyword">in</span> TableB &#123;        <span class="hljs-keyword">if</span> rowA.key == rowB.key &#123;            <span class="hljs-title function_ invoke__">output</span>(rowA, rowB);        &#125;    &#125;&#125;</code></pre></div></li></ul><p>In the above example, <code>TableA</code> is the <code>Outer table</code> and <code>TableB</code> is the <code>Inner table</code>. By default the inner table is <code>TableB</code>, but the actual situation is determined by the SQL Execution Optimizer – it prefer to choose the <strong>smaller</strong> table as the inner table.</p><p>If we have a index on <code>TableB.user_id</code>, the pseudo code should be like:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">rowA</span> <span class="hljs-keyword">in</span> TableA &#123;    rowB = <span class="hljs-title function_ invoke__">index_lookup</span>(TableB, rowA.key); <span class="hljs-comment">// use index</span>    <span class="hljs-keyword">if</span> rowB.<span class="hljs-title function_ invoke__">exists</span>() &#123;        <span class="hljs-title function_ invoke__">output</span>(rowA, rowB);    &#125;&#125;</code></pre></div><div class="note note-primary">            <p>The applicable cases are:</p><ul><li>rows are not too many</li><li>the inner table has proper indexes</li></ul><p>Time complexity: <code>O(n * m)</code>, where <code>n</code> is the number of rows in <code>TableA</code> and <code>m</code> is the number of rows in <code>TableB</code>.<br>With index: <code>O(n * log(m))</code>, if the index provides the <code>O(log(m))</code> time complexity – like B+ Tree.</p>          </div><hr><h4 id="Hash-Join">Hash Join</h4><ul><li><p>Pseudo code:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// Build: walk the inner table to build a hash table</span>hash_table = HashMap::<span class="hljs-title function_ invoke__">new</span>();<span class="hljs-keyword">for</span> <span class="hljs-variable">rowB</span> <span class="hljs-keyword">in</span> TableB &#123;    hash_table.<span class="hljs-title function_ invoke__">insert</span>(rowB.key, rowB);&#125;<span class="hljs-comment">// Probe: walk the outer table to find the corresponding rows</span><span class="hljs-keyword">for</span> <span class="hljs-variable">rowA</span> <span class="hljs-keyword">in</span> TableA &#123;    <span class="hljs-keyword">if</span> hash_table.<span class="hljs-title function_ invoke__">contains_key</span>(rowA.key) &#123;        <span class="hljs-title function_ invoke__">output</span>(rowA, hash_table[rowA.key]);    &#125;&#125;</code></pre></div></li></ul><div class="note note-primary">            <p>The applicable cases are:</p><ul><li>no indexes</li><li>many rows but fit in the mem</li><li>no sorting requirements</li></ul><p>Time complexity: <code>O(n)</code> for building hash table, <code>O(m)</code> for probing, thus the total time complexity is <code>O(n + m)</code> which is faster than <code>Nested Loop Join</code>.</p>          </div><h4 id="Merged-Join">Merged Join</h4><ul><li><p>Pseudo code:</p><div class="code-wrapper"><pre><code class="hljs rust">iterA = TableA.<span class="hljs-title function_ invoke__">iterator</span>();iterB = TableB.<span class="hljs-title function_ invoke__">iterator</span>();rowA = iterA.<span class="hljs-title function_ invoke__">next</span>();rowB = iterB.<span class="hljs-title function_ invoke__">next</span>();<span class="hljs-keyword">while</span> rowA and rowB &#123;    <span class="hljs-keyword">if</span> rowA.key == rowB.key &#123;        <span class="hljs-title function_ invoke__">output</span>(rowA, rowB);        rowA = iterA.<span class="hljs-title function_ invoke__">next</span>();        rowB = iterB.<span class="hljs-title function_ invoke__">next</span>();    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> rowA.key &lt; rowB.key &#123;        rowA = iterA.<span class="hljs-title function_ invoke__">next</span>();    &#125; <span class="hljs-keyword">else</span> &#123;        rowB = iterB.<span class="hljs-title function_ invoke__">next</span>();    &#125;&#125;</code></pre></div></li></ul><div class="note note-primary">            <p>The applicable cases are:</p><ul><li>both tables are sorted</li><li>need sorting</li><li>range query</li></ul><p>Time complexity: <code>O(n + m)</code>.</p>          </div><hr><h4 id="Another-example">Another example</h4><p>SQL:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><span class="hljs-keyword">JOIN</span> avatar <span class="hljs-keyword">ON</span> user.user_id <span class="hljs-operator">=</span> avatar.user_id<span class="hljs-keyword">WHERE</span> user.user_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;</code></pre></div><p>If we have the <code>user_id_idx</code> on both tables, the exec process should be like:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">rowA</span> <span class="hljs-keyword">in</span> (SELECT * FROM user WHERE user_id = <span class="hljs-number">1</span>) &#123;    <span class="hljs-keyword">for</span> <span class="hljs-variable">rowB</span> <span class="hljs-keyword">in</span> (SELECT * FROM avatar WHERE user_id = rowA.user_id) &#123;        <span class="hljs-title function_ invoke__">output</span>(rowA, rowB);    &#125;&#125;</code></pre></div><p>If not, the process is like:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">rowA</span> <span class="hljs-keyword">in</span> (SELECT * FROM user WHERE user_id = <span class="hljs-number">1</span>) &#123;    <span class="hljs-keyword">for</span> <span class="hljs-variable">rowB</span> <span class="hljs-keyword">in</span> (SELECT * FROM avatar) &#123; <span class="hljs-comment">// PERF: scan all the table</span>        <span class="hljs-keyword">if</span> rowA.user_id == rowB.user_id &#123;            <span class="hljs-title function_ invoke__">output</span>(rowA, rowB);        &#125;    &#125;&#125;</code></pre></div><hr><h3 id="How-much-data-is-appropriate-for-a-table-B-Tree-type-index">How much data is appropriate for a table? (B+ Tree type index)</h3><p>Actually this is a math problem, before we dive into it, we need to figure out the <strong><em>page size</em></strong> of the database, like:</p><div class="code-wrapper"><pre><code class="hljs text">postgres@localhost:my_db&gt; show block_size+------------+| block_size ||------------|| 8192       |+------------+SHOWTime: 0.262s</code></pre></div><p>For PostgreSQL it’s 8KB, and for MySQL it’s usually 16KB.</p><p>Assume we’re using MySQL, and the data type of <code>id</code> is <code>BIGINT</code>, which takes 8B(64 bit), and the pointer or any other necessary data of a tree node takes another 8B, thus each level can hold <code>16KB / 16B ≈ 1000</code> nodes.</p><p>And we all know that for a <code>cluster index</code>, the leaf node is the actual data, and the non-leaf node is the index, and of course we have a root node. In that case, if the B+ Tree has 3 level, then the count of leaf nodes are:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Leaf nodes</mtext><mo>=</mo><msup><mn>1000</mn><mn>2</mn></msup><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">\text{Leaf nodes} = 1000^2 = 1,000,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Leaf nodes</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">100</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span></span></p><p>Now assume each row takes 1KB, then a single page could hold <code>16KB / 1KB = 16</code> rows, thus for a 3 level B+ Tree it could hold:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Rows</mtext><mo>=</mo><mtext>Leaf nodes</mtext><mo>∗</mo><mn>16</mn><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn><mo>∗</mo><mn>16</mn><mo>=</mo><mn>16</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">\text{Rows} = \text{Leaf nodes} * 16 = 1,000,000 * 16 = 16,000,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Rows</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Leaf nodes</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">16</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span></span></p><p>For each query it takes 3 IOs(cuz there’re 3 levels). And continuing this idea from above, when the database has more rows, it will take 4-5 and even more IOs for each query in the worst case(there’re buffers, so typically we don’t have to perform that many IOs).</p><hr><p><strong><em>But things’re different in PostgreSQL - it doesn’t store the row data in the leaf nodes!</em></strong></p><p>Instead, it stores the disk pointer in the leaf nodes, and the actual data is stored in the heap. So the leaf nodes of a B+ Tree in PostgreSQL are much smaller than in MySQL, and the number of rows that a single page could hold is much larger.</p><p>Typically a disk pointer takes 6B space, which means a single block can hold <code>7KB(8KB - some reserved space) / 6B ≈ 1200</code> pointers, much more than the MySQL. But keep in mind that since the block stores a pointer instead of the row data, an additional I/O operation is required to fetch the row.</p><p>Let’s do the math again:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Nodes of each level</mtext><mo>=</mo><mn>8</mn><mi>K</mi><mi>B</mi><mi mathvariant="normal">/</mi><mn>16</mn><mi>B</mi><mo>=</mo><mn>500</mn></mrow><annotation encoding="application/x-tex">\text{Nodes of each level} = 8KB / 16B = 500</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Nodes of each level</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">/16</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">500</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Leaf nodes</mtext><mo>=</mo><msup><mn>500</mn><mn>2</mn></msup><mo>=</mo><mn>250</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">\text{Leaf nodes} = 500^2 = 250,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Leaf nodes</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">50</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">250</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Rows</mtext><mo>=</mo><mtext>Leaf nodes</mtext><mo>∗</mo><mn>1200</mn><mo>=</mo><mn>250</mn><mo separator="true">,</mo><mn>000</mn><mo>∗</mo><mn>1200</mn><mo>=</mo><mn>300</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn></mrow><annotation encoding="application/x-tex">\text{Rows} = \text{Leaf nodes} * 1200 = 250,000 * 1200 = 300,000,000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Rows</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord text"><span class="mord">Leaf nodes</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1200</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">250</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1200</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">300</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">000</span></span></span></span></span></p><p>LOL, 300 millions!(With an extra IO though)</p><div class="note note-light">            <p><strong><em>Why don’t you use a larger page size?(to reduce the num of tree layers)</em></strong></p><p>Cuz databases are read and written on a page-by-page basis, not key-by-key. Therefore:</p><p>A large page size will cause <u><strong>Write Amplification</strong> problem</u>, even if we only modified a single row, the whole page will be written to the disk.</p><p>Meanwhile, when we’re reading a single row, we have to read the whole page, which will <u>slow down the query speed</u>.</p><p>What’s more, the <code>Buffer Pool</code> of databases is also based on the page size, and a larger page size will <u>cause a waste of memory</u>.</p><p>Last but not least, a larger page size will <u>cause a waste of disk space</u>, cuz the page is not full, and the <u>file block of operating system is usually 4KB</u>.</p>          </div><hr><h3 id="PostgreSQL">PostgreSQL</h3><h4 id="Conditional-Index">Conditional Index</h4><p>Assume we have a state machine table with stages ‘1’, ‘2’ and ‘3’, and there’s a ‘user_id’ column in the table.</p><table><thead><tr><th>id</th><th>user_id</th><th>stage</th></tr></thead><tbody><tr><td>1</td><td>38413</td><td>1</td></tr><tr><td>2</td><td>38418</td><td>2</td></tr><tr><td>3</td><td>38413</td><td>3</td></tr><tr><td>4</td><td>38413</td><td>3</td></tr><tr><td>5</td><td>38413</td><td>3</td></tr></tbody></table><p>If we want to make sure that the ‘user_id’ is unique within the stage ‘1’ and ‘2’, but it’s allowed to be duplicated in the stage ‘3’, we can create a conditional index like this:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name (user_id) <span class="hljs-keyword">WHERE</span> stage <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);</code></pre></div><p>If the scope is defined by a <code>varchar</code> column, the DDL is a little bit more complex:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index index_name    <span class="hljs-keyword">on</span> table_name (user_id, to_user_id)    <span class="hljs-keyword">where</span> ((status)::text <span class="hljs-operator">=</span> <span class="hljs-keyword">ANY</span>           ((<span class="hljs-keyword">ARRAY</span> [<span class="hljs-string">&#x27;INIT&#x27;</span>::<span class="hljs-type">character</span> <span class="hljs-type">varying</span>, <span class="hljs-string">&#x27;PENDING&#x27;</span>::<span class="hljs-type">character</span> <span class="hljs-type">varying</span>, <span class="hljs-string">&#x27;ACCEPTED&#x27;</span>::<span class="hljs-type">character</span> <span class="hljs-type">varying</span>])::text[]));</code></pre></div><hr><h4 id="Concurrent-Queries-on-One-Connection">Concurrent Queries on One Connection</h4><p><u><em>This is not allowed</em></u> due to the limitation of the PostgreSQL protocol. If you want to run multiple queries in parallel, you need to use multiple connections.</p><p>However, you can use <code>pipelining</code> to send multiple queries to the server in a batch.</p><p>Check this out: <a href="https://github.com/MagicStack/asyncpg/issues/738">Concurrent queries on single connection #738</a></p><hr><h4 id="Connection-Pool-Size-and-QPS">Connection Pool Size and QPS</h4><p>Assume:</p><ul><li>Average query time: t <em>seconds</em></li><li>Connection pool size: n</li><li>QPS: q</li></ul><p>We have the following formula:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>q</mi><mo>≤</mo><mfrac><mi>n</mi><mi>t</mi></mfrac><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>q</mi><mi>p</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q \leq \frac{n}{t} = \max(qps)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathnormal">qp</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></span></p><p>What will happen if the QPS exceeds the limit? - The connection pool will be exhausted.</p><p>Let’s say that <code>q &gt; n/t</code>, then we have:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Extra Reqs</mtext><mo>=</mo><mi>m</mi><mo>=</mo><mi>q</mi><mo>−</mo><mfrac><mi>n</mi><mi>t</mi></mfrac></mrow><annotation encoding="application/x-tex">\text{Extra Reqs} = m = q - \frac{n}{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Extra Reqs</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>These requests will be queued and wait for the connection to be available.</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>delay rounds</mtext><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>≥</mo><mi>m</mi><mo separator="true">,</mo><mtext>but the next n gets smaller</mtext><mo>:</mo><mi>n</mi><mo>−</mo><mi>m</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi mathvariant="normal">/</mi><mi>n</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>&lt;</mo><mi>m</mi><mo separator="true">,</mo><mtext>and the last n gets smaller</mtext><mo>:</mo><mi>n</mi><mo>−</mo><mi>m</mi><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text{delay rounds} =\begin{cases}0,&amp; \text{if } n \geq m, \text{but the next n gets smaller}: n-m\\m / n,&amp; \text{if } n &lt; m, \text{and the last n gets smaller}: n-m \bmod n\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">delay rounds</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">but the next n gets smaller</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">and the last n gets smaller</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>So if the qps is too high, it’ll cause a delay in the response time. What’s worse, <u><em>if the qps consistently exceeds the limit, the delay will be accumulated</em></u>.</p><div class="note note-light">            <p>However, things’re going well in the real world in most cases.</p><p>Because the average query time shoule be quite small (like 10ms), while the connection pool size is usually large enough(like 50).</p><p>Then the limit of QPS is quite high(5000 in this case).</p>          </div><hr><h3 id="MongoDB-vs-MySQL">MongoDB vs MySQL</h3><h4 id="Comparison">Comparison</h4><p><strong>Performance</strong> is rarely the primary factor when choosing between MongoDB and MySQL.</p><div class="note note-warning">            <p>I’m not trying to convince developers to use MongoDB instead of MySQL, or vice verse, or bragging about the benifits of MongoDB. Even if it looks like so…</p><p>Read this: <a href="https://www.mongodb.com/resources/compare/mongodb-mysql"><u>MongoDB vs. MySQL Differences</u></a></p>          </div><p>The “real” differences / considerations are:</p><ul><li><p><strong>user-friendliness</strong><br>No schema means less work, but it also means less control. Do you really need it? – Think about this question.<br>What’s more, MongoDB also provides a collection of friendly APIs, which makes it easier to use.</p></li><li><p><strong>scalability</strong><br>MongoDB provides both <strong><em>sharded cluster</em></strong> and <strong><em>replica set</em></strong> to scale horizontally and vertically, while MySQL doesn’t.</p></li><li><p><strong>performance</strong><br>Like we’ve mentioned above, this is usually not the primary factor cuz it’s really difficult to assessing two completely different database systems.<br>For example, MySQL is optmized for <code>join</code> tables that have been appropriately indexed, while MongoDB uses <code>$lookup</code> to achieve this function - which is slower.<br>However, <code>join</code> is not how Mongo Doc tend to be used - why don’t you merge those collections into the same one to make it simple and compact?</p></li><li><p><strong>dev experience</strong><br><u>You do not need to exec any DDL with MongoDB.</u><br>You do not need ORM with MongoDB.</p></li></ul><p>And here’re some frequently asked questions within the community:</p><ol><li><p><strong><em>Does MongoDB faster than MySQL?</em></strong><br>Hard to explain and assess, cuz you can always choose to denormalize the tables when using MySQL, and anohter consideration is how you query the data.</p><div class="note note-info">            <ul><li><p>Generally speaking, <u><em>querying a single doc</em></u> from MongoDB is faster than using <code>join</code> with MySQL.</p><blockquote><p>It’s easy to understand, join cross a lot of tables and it’s slow, while MongoDB stores the doc in a single collection.</p></blockquote></li><li><p><u><em>Querying a single document</em></u> from MongoDB is <strong><em>theoretically</em></strong> faster than querying a single row from MySQL in theory when <u>using secondary indexes and the queried columns are not covered by the indexes</u>.</p><blockquote><p>Be aware of that’s only ‘in theory’, the reason is MongoDB stores the disk pointer at the leaf nodes, while MySQL stores the primary key at the leaf nodes, thus MySQL has to do an extra lookup on the clustered index.</p></blockquote></li><li><p><u><em>Range query docs</em></u> from MongoDB is <strong><em>theoretically</em></strong> slower than range query rows from MySQL.</p><blockquote><p>The reason is the same as above, MySQL can use the clustered index to get the rows directly, while MongoDB has to do an extra lookup on the disk.</p></blockquote></li></ul><p>However, the real world is more complex, and the performance of the database is not just about the query speed. For example, the <code>join</code> in MySQL is slow, but it’s not a big deal if you have a small dataset.</p>          </div></li><li><p><strong><em>Does MongoDB support ACID Tx?</em></strong><br>Yes, and it makes MongoDB even more user-friendly.</p></li><li><p><strong><em>Does MySQL support JSON docs?</em></strong><br>Yes, but still, it’s not as good as MySQL’s BSON. Cuz MySQL’s approach can detract from developer productivity, consider the following:</p><ul><li>You’ll have to spend time on learning the MySQL-specific SQL functions to access documents - not user-friendly enough.</li><li>You’re tied to the low-level drivers like JDBC - these layers impose high learning overhead.</li><li>MySQL drivers do not have the capability to properly and precisely convert JSON into a useful native data type used by the application.</li><li>MySQL cannot validate the schema of docs, while MongoDB can.</li></ul></li></ol><p>Anyway, the choice between MongoDB and MySQL is not a simple one, and it’s not just about performance. And in my daily work, I use <code>PostgreSQL</code> to store documents, too - I really spent some time on learning it(the SQLs, the functions and the column types), but for me it’s not a big deal :)</p><hr><h4 id="What-happens-when-a-doc-grows-larger">What happens when a doc grows larger?</h4><p>Since MongoDB is schema-less, we have the flexibility to append any data to a document as needed. This allows for dynamic growth, but it also raises important considerations regarding performance and storage efficiency.</p><p>The first question to consider is: <u>how does MongoDB store docs on disk</u>? We’re not going to explain it in detail, instead, let’s simplify it into this question: are those docs stored in a <strong><em>compact</em></strong> or <strong><em>sparse</em></strong> format?</p><div class="code-wrapper"><pre><code class="hljs text">Compact:┌──────┬──────┬──────┬──────┐│ doc1 │ doc2 │ doc3 │ doc4 │└──────┴──────┴──────┴──────┘Sparse:┌──────┬──────┬──────┬──────┐│ doc1 │ free │ doc2 │ free │└──────┴──────┴──────┴──────┘</code></pre></div><p>From a common-sense perspective, a sparse format seems more reasonable. It allows data to be appended to a document without requiring the entire document to be relocated, though this comes at the cost of increased disk space usage.</p><p><u>But the truth is, <code>WiredTiger</code> uses the <strong><em>compact</em></strong> format to store documents on disk.</u></p><p>Before we dive in, it’s important to clarify one key point: “compact” does not imply absolute compaction. There is still some gap space between slots, but compared to a sparse format, these gaps are significantly smaller.</p><p>Each slot is allocated in sizes of 2^n, and since most documents are smaller than the allocated slot, there is usually some leftover space available for appending additional data.</p><p>So how does <code>WiredTiger</code> deal with the situation when a document gets larger than the slot?</p><p>It moves the doc elsewhere — often to the tail end of the available slots, and leaves a pointer in the original location to reference its new position:</p><div class="code-wrapper"><pre><code class="hljs text">┌──────┬──────┬──────┬──────┬──────────┐│ doc1 │ ptr_ │ doc3 │ doc4 │ new_doc2 │└──────┴──┬───┴──────┴──────┴──────────┘          │                      ▲          └──────────────────────┘</code></pre></div><p>And it’ll compact thoes fragmented slots in the background.</p><hr><p>Things are completely different in MySQL. Since MySQL enforces a schema, you must modify the table structure using DDL (Data Definition Language) before appending extra data to a row.</p><p>Basically there’re 2 ways to run DDL:</p><ol><li><code>INSTANT</code>, only modifies the metadata of the table, and the actual data is not moved.</li><li><code>COPY TABLE</code>, create a new temporary table, copy the data to the new table, and then swap the tables and delete the original one.</li></ol><p>The <code>COPY TABLE</code> approach is straightforward but comes with a major drawback—it’s slow.</p><p>On the other hand, the <code>INSTANT</code> method is extremely fast, but it may lead to increased page splits during future write operations.</p><p>E.g. If we execute this SQL query immediately after altering a row using the INSTANT method, it will still be super slow:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> userinfo <span class="hljs-keyword">add</span> new_col <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>, ALGORITHM<span class="hljs-operator">=</span>INSTANT;<span class="hljs-keyword">update</span> userinfo <span class="hljs-keyword">set</span> new_col <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xx&#x27;</span>; <span class="hljs-comment">-- this sql leads to a lot of page splits</span></code></pre></div><hr><h2 id="Rust">Rust</h2><h3 id="Cross-Compile">Cross Compile</h3><p>See this blog: <a href="https://kayce.world/tech/rust_cross_compile_on_osx/">Rust Cross Compile on OSX</a></p><h2 id="Neovim">Neovim</h2><p>Check my NeoVim configuration <a href="https://github.com/sshelll/dotconfigs/tree/master/nvim">here</a>.</p><h3 id="Lua-snippet">Lua snippet</h3><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-comment">-- print debug info to another buf</span>vim.cmd(<span class="hljs-string">&quot;new&quot;</span>)<span class="hljs-keyword">local</span> buf = vim.api.nvim_get_current_buf()vim.api.nvim_buf_set_lines(buf, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-literal">false</span>, vim.split(vim.inspect(your_own_target), <span class="hljs-string">&quot;\n&quot;</span>))<span class="hljs-keyword">local</span> buf = vim.api.nvim_create_buf(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)vim.api.nvim_buf_set_lines(buf, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-literal">false</span>, result)vim.api.nvim_buf_set_option(buf, <span class="hljs-string">&quot;modifiable&quot;</span>, ext_opt.display_with_buf.modifiable) <span class="hljs-comment">-- deprecated</span>vim.api.nvim_set_option_value(<span class="hljs-string">&quot;modifiable&quot;</span>, ext_opt.display_with_buf.modifiable, &#123; buf = buf &#125;)vim.cmd(<span class="hljs-string">&#x27;botright &#x27;</span> .. ext_opt.display_with_buf.height .. <span class="hljs-string">&#x27; split | &#x27;</span> .. buf .. <span class="hljs-string">&#x27;buffer&#x27;</span>)</code></pre></div><h2 id="Common">Common</h2><h3 id="Max-open-files-limit">Max open files limit</h3><p>One day I found that the <code>max open files limit</code> of my server was set to <code>1024</code>:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ulimit</span> -n1024<span class="hljs-built_in">ulimit</span> -Hn1048576</code></pre></div><p>And then I checked the java service process:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/2562403/limitsLimit                     Soft Limit           Hard Limit           UnitsMax open files            1048576              1048576              files</code></pre></div><p>I checked another rust process:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/2562403/limitsLimit                     Soft Limit           Hard Limit           UnitsMax open files            1024                 1048576              files</code></pre></div><p>As we can see, the <code>Max open files</code> limit of the <code>java</code> process was set to <code>1048576</code>, which was increased to the hard limit of the system. Both of them were set to <code>1048576</code>.</p><p>So I did a little bit research and figured out that was the <u>JVM default behavior</u>.</p><p>Check this out:</p><ul><li><a href="https://stackoverflow.com/questions/30487284/how-and-when-and-where-jvm-change-the-max-open-files-value-of-linux">stackoverflow</a></li><li><a href="https://access.redhat.com/solutions/1339423#:~:text=Issue-,Java%20process%20ignores%20the%20soft%20limit%20of%20%22open%20files%22%20%28%2C%2Dn%22%20of%20the%20user.%29">redhat</a></li></ul><hr><h3 id="Don’t-forget-ssh-agent">Don’t forget ssh-agent</h3><p>One day a colleague asked me why he couldn’t clone the git repo from github. I checked his github ssh key settings, and it’s all good.</p><p>Then I tried to regenerate a brand new ssh key pair and configured it in the github settings. But it still didn’t work.</p><p>I solved the problem by doing these steps:</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Check the ssh connection to github</span>ssh -T git@github.com<span class="hljs-comment"># The output was like this:</span><span class="hljs-comment"># Hi $&#123;another_guys_username&#125;! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><span class="hljs-comment"># Bingo! The reason must be that he forgot to clean the `ssh-agent`.</span><span class="hljs-comment"># So I checked with this command and of course, there was an old key in the agent:</span>ssh-add -l<span class="hljs-comment"># Finally, I removed the old key from the agent:</span>ssh-add -D</code></pre></div><hr><h3 id="Tools">Tools</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># compress image</span>magick before.png -resize 35% after.png<span class="hljs-comment"># transcode audio</span>ffmpeg -i path/to/input_audio.flac -ar 44100 -sample_fmt s16 path/to/output_audio.wav<span class="hljs-comment"># convert flac to alac</span>xld -o ~/Downloads song.flac -f alac<span class="hljs-comment"># generate gpg keys</span>gpg --full-generate-keygpg --list-secret-keys --keyid-format=longgpg --armor --<span class="hljs-built_in">export</span> $(KEY_ID_OR_SUB_KEY_ID)</code></pre></div><h2 id="Simple-Math">Simple Math</h2><p>I’ve been doing some practicing(kata) on Codewars, and I’ve noticed that there’re some frequently used math tricks / formulas.</p><h3 id="GCD-LCM">GCD / LCM</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// gcd(a, b) = gcd(b, a % b)</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gcd</span><span class="hljs-params">(a, b *big.Int)</span></span> *big.Int &#123;<span class="hljs-keyword">for</span> b.Cmp(big.NewInt(<span class="hljs-number">0</span>)) != <span class="hljs-number">0</span> &#123;a, b = b, <span class="hljs-built_in">new</span>(big.Int).Mod(a, b)&#125;<span class="hljs-keyword">return</span> a&#125;<span class="hljs-comment">// (a * b) / gcd(a, b)</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lcm</span><span class="hljs-params">(a, b *big.Int)</span></span> *big.Int &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(big.Int).Div(<span class="hljs-built_in">new</span>(big.Int).Mul(a, b), gcd(a, b))&#125;</code></pre></div><hr><h3 id="Prime">Prime</h3><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// gen prime of [0, m]</span><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gen_prime</span>(m: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u64</span>&gt; &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">primes</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">2</span>];    <span class="hljs-keyword">let</span> <span class="hljs-variable">limit</span> = (m <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>).<span class="hljs-title function_ invoke__">sqrt</span>().<span class="hljs-title function_ invoke__">ceil</span>() <span class="hljs-keyword">as</span> <span class="hljs-type">u64</span>;    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">3</span>..m).<span class="hljs-title function_ invoke__">step_by</span>(<span class="hljs-number">2</span>) &#123;        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">is_prime</span> = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span> &amp;p <span class="hljs-keyword">in</span> &amp;primes &#123;            <span class="hljs-keyword">if</span> p * p &gt; i &#123;                <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-keyword">if</span> i % p == <span class="hljs-number">0</span> &#123;                is_prime = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span> is_prime &#123;            primes.<span class="hljs-title function_ invoke__">push</span>(i);        &#125;    &#125;    primes&#125;<span class="hljs-comment">// find the prime divisors of n</span><span class="hljs-keyword">fn</span> <span class="hljs-title function_">prime_factors</span>(<span class="hljs-keyword">mut</span> n: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> HashMap&lt;<span class="hljs-type">u64</span>, <span class="hljs-type">u64</span>&gt; &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">factors</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">divisor</span> = <span class="hljs-number">2</span>;    <span class="hljs-keyword">while</span> n &gt;= divisor * divisor &#123;        <span class="hljs-keyword">while</span> n % divisor == <span class="hljs-number">0</span> &#123;            *factors.<span class="hljs-title function_ invoke__">entry</span>(divisor).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>) += <span class="hljs-number">1</span>;            n /= divisor;        &#125;        divisor += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span> &#123;        *factors.<span class="hljs-title function_ invoke__">entry</span>(n).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>) += <span class="hljs-number">1</span>;    &#125;    factors&#125;</code></pre></div><hr><h3 id="Bit-Op">Bit Op</h3><ul><li>xor</li></ul><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">xor_encrypt_decrypt</span>(data: &amp;<span class="hljs-type">str</span>, key: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;    data.<span class="hljs-title function_ invoke__">chars</span>().<span class="hljs-title function_ invoke__">map</span>(|c| (c <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span> ^ key) <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>).<span class="hljs-title function_ invoke__">collect</span>()&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">xor_swap</span>(a: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>, b: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>) &#123;    *a ^= *b;    *b ^= *a;    *a ^= *b;&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">xor_find_once_in_twice</span>(arr: &amp;[<span class="hljs-type">u8</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;    arr.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">fold</span>(<span class="hljs-number">0</span>, |acc, &amp;x| acc ^ x)&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">xor_bit_flip</span>(bit: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;    <span class="hljs-keyword">static</span> MASK: <span class="hljs-type">u8</span> = <span class="hljs-number">0b11111111</span>;    bit ^ MASK&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">xor_checksum</span>(data: &amp;[<span class="hljs-type">u8</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;    data.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">fold</span>(<span class="hljs-number">0</span>, |acc, &amp;x| acc ^ x)&#125;</code></pre></div><hr><h3 id="Which-x-for-that-sum">Which x for that sum?</h3><p>This is a Codewars kata, you can find it <a href="https://www.codewars.com/kata/5b1cd19fcd206af728000056">here</a>.</p><p>Actually this isn’t that ‘simple’… Cuz I almost forgot those math fundamentals. <strong>And thanks to the ChatGPT which helped me solve this kata!!! (•`_´•)!!!</strong></p><p>Consider we have a sum of the num sequence below:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mtext>...</mtext><mo>+</mo><mi>n</mi><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">Sum = x + 2x^2 + 3x^3 + \text{...} + nx^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">...</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>We can convert it into:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>k</mi><msup><mi>x</mi><mi>k</mi></msup></mrow></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{kx^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>And when <code>x</code> in its domain of convergence, the sum goes to a finite limit depending on <code>x</code>(when <code>n</code> goes to infinite). <u><strong>Now with the given <code>Sum</code>, how to calculate the value of <code>x</code></strong></u>?</p><ol><li><p>Before we start, we could easily tell that <code>abs(x) &lt; 1</code>, otherwise the sum should be infinite.</p></li><li><p>First let’s consider the sum this sequence:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mi>x</mi><mi>k</mi></msup><mo>=</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mtext>...</mtext><mo>+</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\sum_{k=0}^n{x^k} = 1 + x + x^2 + \text{...} + x^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">...</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>With this formula:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><mi>a</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>r</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_n = \frac{a(1-r^n)}{1-r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1963em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>We got:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>x</mi><mi>k</mi></msup><mo>=</mo><mfrac><mrow><mn>1</mn><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mi>x</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k=1}^n{x^k} = \frac{1(1-x^n)}{1-x} = \frac{1-x^n}{1-x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1963em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1107em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>And when <code>n</code> goes infinity:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><msup><mi>x</mi><mi>k</mi></msup><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo stretchy="false">(</mo><mtext>cuz </mtext><msup><mi>x</mi><mi>n</mi></msup><mtext> goes to 0</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{k=1}^\infty{x^k} = \frac{1-x^n}{1-x} = \frac{1}{1-x}(\text{cuz } x^n \text{ goes to 0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1107em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3414em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord text"><span class="mord">cuz </span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord"> goes to 0</span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p>Now let’s calculate the derivative of this sum:</p><p>First let’s cal the left side:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><msup><mi>x</mi><mi>k</mi></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mi>k</mi><msup><mi>x</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">\frac{d}{dx}\sum_{k=1}^\infty{x^k} = \sum_{k=1}^\infty{kx^{k-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Now the right side:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{d}{dx}\frac{1}{1-x} = \frac{1}{(1-x)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1408em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>So we have:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mi>k</mi><msup><mi>x</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k=1}^\infty{kx^{k-1}} = \frac{1}{(1-x)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>We almost got there! Now we only need to plus x to both side, we can get the original formula:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mi>k</mi><msup><mi>x</mi><mi>k</mi></msup></mrow><mo>=</mo><mfrac><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k=1}^\infty{kx^{k}} = \frac{x}{(1-x)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0436em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p>Finally, all we need to do is solve the equation:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><mtext>given already</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{x}{(1-x)^2} = S(\text{given already})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0436em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord text"><span class="mord">given already</span></span><span class="mclose">)</span></span></span></span></span></p><p>we get:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>±</mo><msqrt><mrow><mn>4</mn><mi>S</mi><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><mrow><mn>2</mn><mi>S</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x = \frac{(2S + 1) \pm \sqrt{4S + 1}}{2S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.248em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.562em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.885em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-2.845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.155em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>for <code>abs(x) &lt; 1</code>, we should choose this answer:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>S</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><msqrt><mrow><mn>4</mn><mi>S</mi><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><mrow><mn>2</mn><mi>S</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x = \frac{(2S + 1) - \sqrt{4S + 1}}{2S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.248em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.562em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.885em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-2.845em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.155em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>So the final code is:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">solve</span>(S: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;    ((<span class="hljs-number">2.0</span> * S + <span class="hljs-number">1.0</span>) - (<span class="hljs-number">4.0</span> * S + <span class="hljs-number">1.0</span>).<span class="hljs-title function_ invoke__">sqrt</span>()) / (<span class="hljs-number">2.0</span> * S)&#125;</code></pre></div></li></ol><hr><h3 id="Power-Tower">Power Tower</h3><p>I ain’t gonna lie, it’s out of my league :-(</p><p>See this <a href="https://www.codewars.com/kata/5518a860a73e708c0a000027/rust">kata</a>.</p><p>There are two important corollaries:</p><ol><li><p>(HARD) When we consider a number as a base, its behavior under the modulo 10 system depends only on its value under the modulo 20 systems.<br>For example:</p><div class="code-wrapper"><pre><code class="hljs text">21^1 % 10 = 1^1 % 1021^2 % 10 = 1^2 % 1021^3 % 10 = 1^3 % 10</code></pre></div></li><li><p>(EASY) The last number of power calculation is periodic, and the period could reach to 4.<br>For example:</p><div class="code-wrapper"><pre><code class="hljs text">0 = [0]1 = [1]2 = [2, 4, 8, 6, ...]3 = [3, 9, 7, 1, ...]4 = [4, 6, ...]5 = [5]6 = [6]7 = [7, 9, 3, 1, ...]8 = [8, 4, 2, 6, ...]9 = [9, 1, ...]</code></pre></div></li></ol><p>With these two corollaries, we can easily solve this kata:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">last_digit</span>(lst: &amp;[<span class="hljs-type">u64</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u64</span> &#123;    lst.<span class="hljs-title function_ invoke__">into_iter</span>()       .<span class="hljs-title function_ invoke__">rev</span>()       .<span class="hljs-title function_ invoke__">fold</span>(<span class="hljs-number">1u64</span>, |p, &amp;v| &#123;           <span class="hljs-keyword">let</span> <span class="hljs-variable">base</span> = <span class="hljs-keyword">if</span> v &gt;= <span class="hljs-number">20</span> &#123; v % <span class="hljs-number">20</span> + <span class="hljs-number">20</span> &#125; <span class="hljs-keyword">else</span> &#123; v &#125;;           <span class="hljs-keyword">let</span> <span class="hljs-variable">exp</span> = <span class="hljs-keyword">if</span> p &gt;= <span class="hljs-number">4</span> &#123; p % <span class="hljs-number">4</span> + <span class="hljs-number">4</span> &#125; <span class="hljs-keyword">else</span> &#123; p &#125;;           base.<span class="hljs-title function_ invoke__">pow</span>(exp <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>)       &#125;) % <span class="hljs-number">10</span>&#125;</code></pre></div><hr><h3 id="Magic-Square">Magic Square</h3><p>See the wiki <a href="https://en.wikipedia.org/wiki/Siamese_method">here</a>.</p><hr><h3 id="Pascal’s-Triangle-杨辉三角">Pascal’s Triangle (杨辉三角)</h3><p>See the wiki <a href="https://en.wikipedia.org/wiki/Pascal's_triangle">here</a></p><p>A important collary is the ith number at nth level(n start from 0) is:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mi>u</mi><msub><mi>m</mi><mtext>n,i</mtext></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><mrow><mi>i</mi><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">Num_\text{n,i} = \frac{n!}{i!(n-i)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3175em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">n,i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mclose">!</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mclose">)!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="Network">Network</h2><h3 id="Hub-switch-router">Hub, switch, router</h3><ul><li><p>Hub: all the devices are connected to the hub(with cable), and the hub broadcasts the packets to all the devices.</p></li><li><p>Switch: basically the same as hub, but it has a MAC addr table, so it can forward the packets to the specific device.</p></li><li><p>Router: it’s used to connect different networks, and it has an IP addr table, so it can forward the packets to the specific network.</p></li></ul><p>To be short, assume the topology is like this:</p><div class="code-wrapper"><pre><code class="hljs text">A - Switch1 - B      |    Router      |C - Switch2 - D</code></pre></div><p>If a packet is send to a device which is in the same subnet, the packet will be sent to the target device directly (or through switch), like A to B.</p><blockquote><p>To judge whether the target device is in the same subnet, we do calculation like this: <code>IP &amp; Mask</code> and compare this value.</p></blockquote><p>Otherwise if the target device is not in the same subnet, the packet will be sent to the Router, and the Router will forward the packet to the target device.</p><p>And the router is normally known as the <strong>default gateway</strong>. Actually, in the real world, <u>the default gateway is somewhere you send the packet to when you don’t know where to send it</u>.</p><p>A typical route table can be like this:</p><table><thead><tr><th>Network</th><th>Gateway</th><th>Interface</th></tr></thead><tbody><tr><td>0.0.0.0/0</td><td>ISP Gateway</td><td>ppp0</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>All the unrecognized packets will be treated as <code>0.0.0.0</code> and be sent to the ISP gateway.</p><hr><h3 id="NAT">NAT</h3><p>To be short, all the devices behind a router share the same public IP address, and the router will translate the private IP address to the public IP address when the packet is sent to the internet.</p><p>The NAT table is like this:</p><table><thead><tr><th>Source IP</th><th>Source Port</th><th>Target IP</th><th>Target Port</th><th>Status</th></tr></thead><tbody><tr><td>192.168.31.100</td><td>54321</td><td>140.82.113.3</td><td>443</td><td>ESTABLISHED</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>If there’re 2 devices connected to the same target, we need to add <strong><em>another layer</em></strong> to avoid conflict:</p><table><thead><tr><th>Internal IP</th><th>Internal Port</th><th>External IP</th><th>External Port</th><th>Target IP</th><th>Target Port</th><th>Status</th></tr></thead><tbody><tr><td>192.168.31.100</td><td>54321</td><td>203.0.113.2</td><td>50001</td><td>140.82.113.3</td><td>443</td><td>ESTABLISHED</td></tr><tr><td>192.168.33.100</td><td>54321</td><td>203.0.113.2</td><td>50002</td><td>140.82.113.3</td><td>443</td><td>ESTABLISHED</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Backend</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Network Topology at Home</title>
    <link href="/chores/network_topology_at_home/"/>
    <url>/chores/network_topology_at_home/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Simple</p></blockquote><pre><code class=" mermaid">flowchart TD    0[Optical Fiber] --&gt; 1    1[/Optical Modem\] --&gt; 2&#123;&#123;Router&#125;&#125;    2 --&gt; PC    2 --&gt; SmartTV    2 --&gt; Mobile</code></pre><hr><blockquote><p>Normal</p></blockquote><pre><code class=" mermaid">graph TD    0[Optical Fiber] --&gt; A    A[/Optical Modem\] --&gt; B&#123;&#123;Router&#125;&#125;    B --&gt; C[Switch]    C --&gt; SmartTV    C --&gt; n[(NAS)]    B --&gt; Mobile    B --&gt; D&#123;&#123;Access Point 1&#125;&#125;    D --&gt; Mobile    D --&gt; p[PC in Bedroom]    B --&gt; E&#123;&#123;Access Point 2&#125;&#125;    E --&gt; Mobile    E --&gt; q2[PC in Living Room]</code></pre><hr><blockquote><p>Use a switch to speed up the internal network</p></blockquote><pre><code class=" mermaid">graph TD    0[Optical Fiber] --&gt; A    A[/Optical Modem\] --&gt; B&#123;&#123;Switch&#125;&#125;    B --&gt; X&#123;&#123;Main Router&#125;&#125; --&gt; C[Switch]    X --&gt; Mobile    C --&gt; SmartTV    C --&gt; n[(NAS)]    B --&gt; Mobile    B --&gt; D&#123;&#123;Access Point 1&#125;&#125;    D --&gt; Mobile    D --&gt; p[PC in Bedroom]    B --&gt; E&#123;&#123;Access Point 2&#125;&#125;    E --&gt; Mobile    E --&gt; q2[PC in Living Room]</code></pre>]]></content>
    
    
    <categories>
      
      <category>chores</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recursion to Iteration</title>
    <link href="/tech/recur_to_iter/"/>
    <url>/tech/recur_to_iter/</url>
    
    <content type="html"><![CDATA[<p>Normally, recursion is more readable and easier to understand than iteration. However, recursion can be less efficient than iteration because of the overhead of function calls and the stack. What’s more, some languages don’t optimize tail recursion, which can lead to stack overflow errors.</p><div class="note note-primary">            <p>Luckily, we can always convert recursion to iteration.</p>          </div><h2 id="Example-Generate-balanced-parentheses">Example: Generate balanced parentheses</h2><blockquote><p>Given <code>n</code> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<br>Such as, with <code>n = 3</code>, a solution set is:<br><code>[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</code></p></blockquote><h3 id="Rust">Rust</h3><h4 id="Recursion">Recursion</h4><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">balanced_parens</span>(n: <span class="hljs-type">u16</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">res</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();    <span class="hljs-title function_ invoke__">balanced_parens0</span>(n, n, <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>(), &amp;<span class="hljs-keyword">mut</span> res);    res&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">balanced_parens0</span>(l: <span class="hljs-type">u16</span>, r: <span class="hljs-type">u16</span>, s: <span class="hljs-type">String</span>, res: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt;) &#123;    <span class="hljs-keyword">if</span> l + r == <span class="hljs-number">0</span> &#123;        res.<span class="hljs-title function_ invoke__">push</span>(s);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">if</span> l &gt; <span class="hljs-number">0</span> &#123;        <span class="hljs-title function_ invoke__">balanced_parens0</span>(l - <span class="hljs-number">1</span>, r, s.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;(&quot;</span>, res);    &#125;    <span class="hljs-keyword">if</span> r &gt; l &#123;        <span class="hljs-title function_ invoke__">balanced_parens0</span>(l, r - <span class="hljs-number">1</span>, s.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;)&quot;</span>, res);    &#125;&#125;</code></pre></div><h4 id="Iteration">Iteration</h4><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">balanced_parens</span>(n: <span class="hljs-type">u16</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">res</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">stack</span> = <span class="hljs-built_in">vec!</span>[];    stack.<span class="hljs-title function_ invoke__">push</span>((n, n, <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>()));    <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>((l, r, s)) = stack.<span class="hljs-title function_ invoke__">pop</span>() &#123;        <span class="hljs-keyword">if</span> l + r == <span class="hljs-number">0</span> &#123;            res.<span class="hljs-title function_ invoke__">push</span>(s);            <span class="hljs-keyword">continue</span>;        &#125;        <span class="hljs-keyword">if</span> l &gt; <span class="hljs-number">0</span> &#123;            stack.<span class="hljs-title function_ invoke__">push</span>((l - <span class="hljs-number">1</span>, r, s.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;(&quot;</span>));        &#125;        <span class="hljs-keyword">if</span> r &gt; l &#123;            stack.<span class="hljs-title function_ invoke__">push</span>((l, r - <span class="hljs-number">1</span>, s.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;)&quot;</span>));        &#125;    &#125;    res&#125;</code></pre></div><hr><h3 id="Golang">Golang</h3><h4 id="Recursion-2">Recursion</h4><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BalancedParens</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">string</span> &#123;res := []<span class="hljs-type">string</span>&#123;&#125;balancedParens(n, n, <span class="hljs-string">&quot;&quot;</span>, &amp;res)<span class="hljs-keyword">return</span> res&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">balancedParens</span><span class="hljs-params">(l, r <span class="hljs-type">int</span>, s <span class="hljs-type">string</span>, res *[]<span class="hljs-type">string</span>)</span></span> &#123;<span class="hljs-keyword">if</span> l == <span class="hljs-number">0</span> &amp;&amp; r == <span class="hljs-number">0</span> &#123;*res = <span class="hljs-built_in">append</span>(*res, s)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> l &gt; <span class="hljs-number">0</span> &#123;balancedParens(l<span class="hljs-number">-1</span>, r, s+<span class="hljs-string">&quot;(&quot;</span>, res)&#125;<span class="hljs-keyword">if</span> r &gt; l &#123;balancedParens(l, r<span class="hljs-number">-1</span>, s+<span class="hljs-string">&quot;)&quot;</span>, res)&#125;&#125;</code></pre></div><h4 id="Iteration-2">Iteration</h4><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stackFrame <span class="hljs-keyword">struct</span> &#123;l <span class="hljs-type">int</span>r <span class="hljs-type">int</span>s <span class="hljs-type">string</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BalancedParens</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">string</span> &#123;res := []<span class="hljs-type">string</span>&#123;&#125;stack := <span class="hljs-built_in">make</span>([]stackFrame, <span class="hljs-number">0</span>, n)stack = <span class="hljs-built_in">append</span>(stack, stackFrame&#123;n, n, <span class="hljs-string">&quot;&quot;</span>&#125;)<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<span class="hljs-comment">// pop</span>frame := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<span class="hljs-keyword">if</span> frame.l == <span class="hljs-number">0</span> &amp;&amp; frame.r == <span class="hljs-number">0</span> &#123;res = <span class="hljs-built_in">append</span>(res, frame.s)<span class="hljs-keyword">continue</span>&#125;<span class="hljs-keyword">if</span> frame.l &gt; <span class="hljs-number">0</span> &#123;stack = <span class="hljs-built_in">append</span>(stack, stackFrame&#123;frame.l - <span class="hljs-number">1</span>, frame.r, frame.s + <span class="hljs-string">&quot;(&quot;</span>&#125;)&#125;<span class="hljs-keyword">if</span> frame.r &gt; frame.l &#123;stack = <span class="hljs-built_in">append</span>(stack, stackFrame&#123;frame.l, frame.r - <span class="hljs-number">1</span>, frame.s + <span class="hljs-string">&quot;)&quot;</span>&#125;)&#125;&#125;<span class="hljs-keyword">return</span> res&#125;</code></pre></div><h2 id="3-Steps-to-Convert">3 Steps to Convert</h2><p>Let’s dissect what’s going on:</p><ol><li>Extract the <strong><code>arguments</code></strong> of the recursive function signature into a <strong><code>frame</code></strong> struct(or tuple, etc.)</li><li>Make a stack and store the <strong><code>first</code></strong> frame with the arguments of the initial call to the recursive function</li><li>Copy the code inside the recursive function to the iteration loop, and…<ul><li>replace the recursive <strong><code>call</code></strong> with <strong><code>pushing</code></strong> a new frame to the stack</li><li>replace the <strong><code>return</code></strong> statement with <strong><code>continue</code></strong> to jump to the next iteration</li></ul></li></ol><div class="note note-primary">            <p>By following these steps, we can 100% convert any recursive function to an iterative one.</p>          </div><p>Yes, the iterative code still has some space for optimization in some cases, such as reusing variables, etc. But the key point is to show you how to convert recursion to iteration.</p><h2 id="Another-Example-Flip-Tree">Another Example: Flip Tree</h2><p>In this example, <code>go</code> is a lot easier to convert than <code>rust</code>, because the <code>Ownership</code> system in <code>rust</code> makes things more complicated.</p><h3 id="Go">Go</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TreeNode <span class="hljs-keyword">struct</span> &#123;Val   <span class="hljs-type">int</span>Left  *TreeNodeRight *TreeNode&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flipTreeRecur</span><span class="hljs-params">(root *TreeNode)</span></span> *TreeNode &#123;<span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;root.Left, root.Right = right, leftleft := flipTree(root.Left)right := flipTree(root.Right)<span class="hljs-keyword">return</span> root&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flipTree</span><span class="hljs-params">(root *TreeNode)</span></span> *TreeNode &#123;<span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;stack := []*TreeNode&#123;root&#125;<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;root := stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<span class="hljs-keyword">if</span> root.Left != <span class="hljs-literal">nil</span> &#123;stack = <span class="hljs-built_in">append</span>(stack, root.Left)&#125;<span class="hljs-keyword">if</span> root.Right != <span class="hljs-literal">nil</span> &#123;stack = <span class="hljs-built_in">append</span>(stack, root.Right)&#125;root.Left, root.Right = root.Right, root.Left&#125;<span class="hljs-keyword">return</span> root&#125;</code></pre></div><hr><h3 id="Rust-2">Rust</h3><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::cell::RefCell;<span class="hljs-keyword">use</span> std::rc::Rc;<span class="hljs-meta">#[derive(Debug, PartialEq, Eq)]</span><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;    <span class="hljs-keyword">pub</span> val: <span class="hljs-type">i32</span>,    <span class="hljs-keyword">pub</span> left: <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt;,    <span class="hljs-keyword">pub</span> right: <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt;,&#125;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">TreeNode</span> &#123;    <span class="hljs-meta">#[inline]</span>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(val: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        TreeNode &#123;            val,            left: <span class="hljs-literal">None</span>,            right: <span class="hljs-literal">None</span>,        &#125;    &#125;&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">flip_tree_recur</span>(root: <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt; &#123;    root.<span class="hljs-title function_ invoke__">as_ref</span>()?;    <span class="hljs-keyword">let</span> <span class="hljs-variable">root</span> = root.<span class="hljs-title function_ invoke__">unwrap</span>();    <span class="hljs-keyword">let</span> <span class="hljs-variable">left</span> = root.<span class="hljs-title function_ invoke__">borrow_mut</span>().left.<span class="hljs-title function_ invoke__">take</span>();    <span class="hljs-keyword">let</span> <span class="hljs-variable">right</span> = root.<span class="hljs-title function_ invoke__">borrow_mut</span>().right.<span class="hljs-title function_ invoke__">take</span>();    root.<span class="hljs-title function_ invoke__">borrow_mut</span>().left = <span class="hljs-title function_ invoke__">flip_tree_recur</span>(right);    root.<span class="hljs-title function_ invoke__">borrow_mut</span>().right = <span class="hljs-title function_ invoke__">flip_tree_recur</span>(left);    <span class="hljs-title function_ invoke__">Some</span>(root)&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">flip_tree_iter</span>(root: <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;Rc&lt;RefCell&lt;TreeNode&gt;&gt;&gt; &#123;    root.<span class="hljs-title function_ invoke__">as_ref</span>()?;    <span class="hljs-keyword">let</span> <span class="hljs-variable">root</span> = root.<span class="hljs-title function_ invoke__">unwrap</span>();    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">stack</span> = <span class="hljs-built_in">vec!</span>[root.<span class="hljs-title function_ invoke__">clone</span>()];    <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(node) = stack.<span class="hljs-title function_ invoke__">pop</span>() &#123;        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">node</span> = node.<span class="hljs-title function_ invoke__">borrow_mut</span>();        <span class="hljs-keyword">let</span> <span class="hljs-variable">left</span> = node.left.<span class="hljs-title function_ invoke__">take</span>();        <span class="hljs-keyword">let</span> <span class="hljs-variable">right</span> = node.right.<span class="hljs-title function_ invoke__">take</span>();        node.left = right;        node.right = left;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(left) = node.left.<span class="hljs-title function_ invoke__">as_ref</span>() &#123;            stack.<span class="hljs-title function_ invoke__">push</span>(left.<span class="hljs-title function_ invoke__">clone</span>());        &#125;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(right) = node.right.<span class="hljs-title function_ invoke__">as_ref</span>() &#123;            stack.<span class="hljs-title function_ invoke__">push</span>(right.<span class="hljs-title function_ invoke__">clone</span>());        &#125;    &#125;    <span class="hljs-title function_ invoke__">Some</span>(root)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust Cross Compile on OSX</title>
    <link href="/tech/rust_cross_compile_on_osx/"/>
    <url>/tech/rust_cross_compile_on_osx/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Talk is cheap, show me the Makefile.</p></blockquote><h2 id="Setup">Setup</h2><div class="code-wrapper"><pre><code class="hljs make"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: osx-setup-musl</span><span class="hljs-section">setup-osx-musl:</span>@brew install filosottile/musl-cross/musl-cross<span class="hljs-comment"># @sudo ln -s &quot;$(brew --prefix musl-cross)/bin/x86_64-linux-musl-gcc&quot; /usr/local/bin/musl-gcc</span><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: osx-setup-gnu</span><span class="hljs-section">setup-osx-gnu:</span>@brew tap SergioBenitez/osxct@brew install x86_64-unknown-linux-gnu</code></pre></div><h2 id="Build">Build</h2><div class="code-wrapper"><pre><code class="hljs make"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: osx-cross-build-gnu</span><span class="hljs-section">osx-cross-build-gnu:</span>@echo <span class="hljs-string">&quot;Building presence-tool with gnu&quot;</span>@rustup target add x86_64-unknown-linux-gnu@CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc cargo build --release --target=x86_64-unknown-linux-gnu<span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: osx-cross-build-musl</span><span class="hljs-section">osx-cross-build-musl:</span>@echo <span class="hljs-string">&quot;Building presence-tool with musl&quot;</span>@rustup target add x86_64-unknown-linux-musl@CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc cargo build --release --target x86_64-unknown-linux-musl</code></pre></div><h2 id="Chore">Chore</h2><div class="code-wrapper"><pre><code class="hljs make"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: osx-setup-cargo-hint</span><span class="hljs-section">setup-osx-cargo-hint:</span>@echo <span class="hljs-string">&quot;Put these lines into your ~/.cargo/config.toml:&quot;</span>@echo &#x27;```toml&#x27;@echo <span class="hljs-string">&quot;[target.x86_64-unknown-linux-musl]&quot;</span>@echo <span class="hljs-string">&quot;linker = \&quot;x86_64-linux-musl-gcc\&quot;&quot;</span>@echo <span class="hljs-string">&quot;[target.x86_64-unknown-linux-gnu]&quot;</span>@echo <span class="hljs-string">&quot;linker = \&quot;x86_64-unknown-linux-gnu-gcc\&quot;&quot;</span>@echo &#x27;```&#x27;<span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: install-bin</span><span class="hljs-section">install-bin:</span>@echo <span class="hljs-string">&quot;Installing current bin crate to ~/.cargo/bin&quot;</span>@cargo install --path .<span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: check-dynamic-link-osx</span><span class="hljs-section">check-dynamic-link-osx: build</span>@echo <span class="hljs-string">&quot;Checking for dynamic linking on OSX&quot;</span>@otool -L target/release/presence-tool<span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: check-dynamic-link-linux</span><span class="hljs-section">check-dynamic-link-linux: build-musl</span>@echo <span class="hljs-string">&quot;Checking for dynamic linking on Linux&quot;</span>@ldd target/release/presence-tool</code></pre></div><h2 id="Cargo-Config">Cargo Config</h2><div class="code-wrapper"><pre><code class="hljs toml"><span class="hljs-section">[target.x86_64-unknown-linux-musl]</span><span class="hljs-attr">linker</span> = <span class="hljs-string">&quot;x86_64-linux-musl-gcc&quot;</span><span class="hljs-section">[target.x86_64-unknown-linux-gnu]</span><span class="hljs-attr">linker</span> = <span class="hljs-string">&quot;x86_64-unknown-linux-gnu-gcc&quot;</span></code></pre></div><p>Once you’ve configured your <code>Cargo.toml</code> and <code>~/.cargo/config.toml</code>, you can simply try this:</p><div class="code-wrapper"><pre><code class="hljs make"><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: build-musl</span><span class="hljs-section">build-musl:</span>@rustup target add x86_64-unknown-linux-musl <span class="hljs-comment"># this line is optional</span>@cargo build --release --target x86_64-unknown-linux-musl</code></pre></div><h2 id="Docker">Docker</h2><p>You can use a docker image to set up a build env:</p><div class="code-wrapper"><pre><code class="hljs bash">docker run -it --name rust-linux-builder rust:1.83.0-bullseyedocker <span class="hljs-built_in">exec</span> -it rust-linux-builder bashdocker <span class="hljs-built_in">cp</span> . rust-linux-builder:/root <span class="hljs-comment"># cp the source code to the container</span></code></pre></div><p>Then you can install the necessary dependencies and start building:</p><div class="code-wrapper"><pre><code class="hljs bash">apt install gcc-multilib-x86-64-linux-gnuCARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-gnu-gcc cargo build --release --target x86_64-unknown-linux-musl</code></pre></div><p>Or, you can use a <code>docker-compose.yml</code> file:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span>  <span class="hljs-attr">rust-linux-builder:</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">rust-linux-builder</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">rust:1.83.0-bullseye</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">.:/root/myapp</span>    <span class="hljs-attr">working_dir:</span> <span class="hljs-string">/root/myapp</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">bash</span> <span class="hljs-string">-c</span> <span class="hljs-string">&quot;</span><span class="hljs-string">      rustup target add x86_64-unknown-linux-musl</span><span class="hljs-string">      &amp;&amp; apt update</span><span class="hljs-string">      &amp;&amp; apt install -y gcc-multilib-x86-64-linux-gnu</span><span class="hljs-string">      &amp;&amp; CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-gnu-gcc cargo build --release --target x86_64-unknown-linux-musl</span><span class="hljs-string">      &quot;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust Atomics and Locks</title>
    <link href="/tech/rust_atomics_and_locks/"/>
    <url>/tech/rust_atomics_and_locks/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>WIP, No ETA provided</p>          </div><div class="note note-danger">            <p>TL;DR - Please refer to the ToC on the right side</p>          </div><blockquote><p>The <strong><em>tremendous</em></strong> book<br><a href="https://marabos.nl/atomics/"><em>Rust Atomics and Locks</em></a> by <a href="https://marabos.nl/">Mara Bos</a><br>in my POV.</p></blockquote><h2 id="Cell-RefCell">Cell, RefCell</h2><p><strong><em>Interior mutability</em></strong>: a design pattern in Rust that allows you to mutate data even when there are immutable references to that data.</p><p>In short, you can use <code>fn foo(&amp;self)</code> to change the data inside the struct. Normally, we have to use <code>fn foo(&amp;mut self)</code>.</p><p><strong>Cell</strong></p><ul><li><code>take()</code> out the data, modify it, and <code>set()</code> it back.<blockquote><p><code>Mutex</code> is the concurrent version of <code>Cell</code>.</p></blockquote></li></ul><p><strong>Refcell:</strong></p><ul><li><code>borrow_mut()</code> will panic if there’s already a mutable borrow.<blockquote><p><code>RWMutex</code> is the concurrent version of <code>RefCell</code>, but it will block until the mutable borrow is released instead of panicking.</p></blockquote></li></ul><div class="note note-light">            <p><strong><em>Aside: UnsafeCell</em></strong></p><p>Both of them are built with a core primitive called <code>UnsafeCell</code>.</p><p>This struct provides the basic abstraction for interior mutability, however, you have to use <code>unsafe</code> to access.</p><p><code>Cell</code>, <code>RefCell</code> and all other types that allows internal mutability use <code>UnsafeCell</code> to wrap their data and provide <code>safe</code> apis.</p>          </div><h2 id="MutexGuard-lifetime">MutexGuard lifetime</h2><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">if</span> list.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">pop</span>() == <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// &lt;--- drop here</span>    <span class="hljs-title function_ invoke__">do_something</span>();&#125;<span class="hljs-comment">// PERF: needlessly hold on to the lock while processing the item.</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(item) = list.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">pop</span>() &#123;    <span class="hljs-title function_ invoke__">process_item</span>(item);&#125; <span class="hljs-comment">// &lt;--- drop here</span><span class="hljs-comment">// FIXED:</span><span class="hljs-keyword">let</span> <span class="hljs-variable">item</span> = list.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">pop</span>(); <span class="hljs-comment">// &lt;--- drop here</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(item) = item &#123;    <span class="hljs-title function_ invoke__">process_item</span>(item);&#125;</code></pre></div><p>Reason:</p><ul><li>The basic <code>if</code> statement is always a simple <code>boolean</code> expression.</li><li>If we replace <code>pop()</code> with <code>front()</code>, things’re clear. That’s how borrow checker works.</li></ul><h2 id="Parking">Parking</h2><p>Consider this situation: we only process items when the list is not empty.<br>If we use <code>Mutex</code>, then we have to keep calling <code>lock()</code> again and again, which is not efficient.</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::VecDeque;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">queue</span> = Mutex::<span class="hljs-title function_ invoke__">new</span>(VecDeque::<span class="hljs-title function_ invoke__">new</span>());    thread::<span class="hljs-title function_ invoke__">scope</span>(|s| &#123;        <span class="hljs-comment">// Consuming thread</span>        <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = s.<span class="hljs-title function_ invoke__">spawn</span>(|| <span class="hljs-keyword">loop</span> &#123;            <span class="hljs-keyword">let</span> <span class="hljs-variable">item</span> = queue.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">pop_front</span>();            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(item) = item &#123;                dbg!(item);            &#125; <span class="hljs-keyword">else</span> &#123;                thread::<span class="hljs-title function_ invoke__">park</span>();            &#125;        &#125;);        <span class="hljs-comment">// Producing thread</span>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>.. &#123;            queue.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">push_back</span>(i);            t.<span class="hljs-title function_ invoke__">thread</span>().<span class="hljs-title function_ invoke__">unpark</span>();            thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>));        &#125;    &#125;);&#125;</code></pre></div><div class="note note-primary">            <p>A call to <code>unpark()</code> before the thread parks itself <strong><em>does not get lost</em></strong></p><p>However, unpark requests <strong><em>don’t stack up</em></strong>.</p><p>Calling unpark() two times and then calling park() two times afterwards still results in the thread going to sleep.</p>          </div><h2 id="Cond-Vars">Cond Vars</h2><p>The example above is low-efficiency when we want to use more consumers.<br>Because the producer doesn’t know which consumer to wake up.</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-keyword">use</span> std::sync::Condvar;    <span class="hljs-keyword">use</span> std::&#123;collections::VecDeque, sync::Mutex, thread, time::Duration&#125;;    <span class="hljs-keyword">let</span> <span class="hljs-variable">queue</span> = Mutex::<span class="hljs-title function_ invoke__">new</span>(VecDeque::<span class="hljs-title function_ invoke__">new</span>());    <span class="hljs-keyword">let</span> <span class="hljs-variable">not_empty</span> = Condvar::<span class="hljs-title function_ invoke__">new</span>();    <span class="hljs-keyword">let</span> <span class="hljs-variable">empty</span> = Condvar::<span class="hljs-title function_ invoke__">new</span>();    thread::<span class="hljs-title function_ invoke__">scope</span>(|s| &#123;        <span class="hljs-comment">// not_empty handler</span>        s.<span class="hljs-title function_ invoke__">spawn</span>(|| <span class="hljs-keyword">loop</span> &#123;            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">q</span> = queue.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>();            <span class="hljs-keyword">let</span> <span class="hljs-variable">item</span> = <span class="hljs-keyword">loop</span> &#123;                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(item) = q.<span class="hljs-title function_ invoke__">pop_front</span>() &#123;                    <span class="hljs-keyword">break</span> item;                &#125; <span class="hljs-keyword">else</span> &#123;                    empty.<span class="hljs-title function_ invoke__">notify_one</span>(); <span class="hljs-comment">// wake up the empty handler(s)</span>                    q = not_empty.<span class="hljs-title function_ invoke__">wait</span>(q).<span class="hljs-title function_ invoke__">unwrap</span>();                &#125;            &#125;;            <span class="hljs-title function_ invoke__">drop</span>(q);            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Got item: &#123;&#125;&quot;</span>, item);        &#125;);        <span class="hljs-comment">// empty handler</span>        s.<span class="hljs-title function_ invoke__">spawn</span>(|| <span class="hljs-keyword">loop</span> &#123;            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">q</span> = queue.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>();            <span class="hljs-keyword">loop</span> &#123;                <span class="hljs-keyword">if</span> q.<span class="hljs-title function_ invoke__">is_empty</span>() &#123;                    <span class="hljs-keyword">break</span>;                &#125; <span class="hljs-keyword">else</span> &#123;                    q = empty.<span class="hljs-title function_ invoke__">wait</span>(q).<span class="hljs-title function_ invoke__">unwrap</span>();                &#125;            &#125;            <span class="hljs-title function_ invoke__">drop</span>(q);            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Queue is empty&quot;</span>);            thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">400</span>));        &#125;);        <span class="hljs-comment">// producer</span>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>.. &#123;            queue.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">push_back</span>(i);            not_empty.<span class="hljs-title function_ invoke__">notify_one</span>(); <span class="hljs-comment">// wake up the not_empty handler(s)</span>            thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>));        &#125;    &#125;);&#125;</code></pre></div><h2 id="Memory-Ordering">Memory Ordering</h2><h3 id="Happens-Before">Happens-Before</h3><p>Before we dive into the specific memory orderings below, we must have a deep understanding of <code>happens-before</code> relationship.</p><p><code>happens-before</code> dose not mean that the first operation is literally executed before the second one. (If you want to achieve that, you should use <code>Mutex</code>, <code>CondVar</code>, <code>Chan</code> or other synchronization primitives to help threads communicate.)</p><p>There’re 2 points to remember:</p><ol><li><p><code>happens-before</code> is all about the ‘instruction reordering’ by the compiler or the CPU.</p></li><li><p><code>happens-before</code> itself doesn’t happen until <code>observable behavior</code> occurs.</p></li></ol><p>For example:</p><div class="code-wrapper"><pre><code class="hljs text">Thread A:                          Thread B:some ops (A) ----------...                   |a.store(1, Release);  | visible                      |                      |     if a.load(Acquire) == 1 &#123;                      -&gt; (B)    // do something                            &#125;</code></pre></div><p>There’s no <code>happens-before</code> relationship until Thread B sees the value <code>1</code> in <code>a.load(Acquire)</code>, and at that point, we can say that <code>(A)</code> happens before <code>(B)</code>, or <code>(A)</code> is visible to <code>(B)</code>.</p><h3 id="Relaxed">Relaxed</h3><p>While atomic operations using relaxed memory ordering do not provide any happens-before relationship,<br>they do guarantee a total modification order of each individual atomic variable.<br>This means that all modifications of the same atomic variable happen in an order that is the same from the perspective of every single thread.</p><p>Example:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> X: AtomicI32 = AtomicI32::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// thread 1</span><span class="hljs-keyword">fn</span> <span class="hljs-title function_">a</span>() &#123;    X.<span class="hljs-title function_ invoke__">fetch_add</span>(<span class="hljs-number">5</span>, Relaxed);    X.<span class="hljs-title function_ invoke__">fetch_add</span>(<span class="hljs-number">10</span>, Relaxed);&#125;<span class="hljs-comment">// thread 2</span><span class="hljs-keyword">fn</span> <span class="hljs-title function_">b</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = X.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = X.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = X.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-keyword">let</span> <span class="hljs-variable">d</span> = X.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;a&#125; &#123;b&#125; &#123;c&#125; &#123;d&#125;&quot;</span>);&#125;</code></pre></div><p>The output will never be <code>0 5 0 15</code> or <code>0 0 10 15</code> due to the order of the 2 <code>fetch_add</code> ops.</p><ul><li><code>0 5 0 15</code>: since we’ve written 5 and it has been read, the next read mustn’t be 0.</li><li><code>0 0 10 15</code>: write 5 happens before write 10.</li></ul><hr><h3 id="Release-Acquire">Release / Acquire</h3><p><code>Release</code> corresponds to the <code>store</code> operation, and <code>Acquire</code> corresponds to the <code>load</code> operation.</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::sync::atomic::Ordering::&#123;Acquire, Release&#125;;<span class="hljs-keyword">static</span> DATA: AtomicU64 = AtomicU64::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">static</span> READY: AtomicBool = AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>);<span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;        DATA.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">123</span>, Relaxed);        READY.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Release); <span class="hljs-comment">// Everything from before this store ..</span>    &#125;);    <span class="hljs-keyword">while</span> !READY.<span class="hljs-title function_ invoke__">load</span>(Acquire) &#123; <span class="hljs-comment">// .. is visible after this loads `true`.</span>        thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">100</span>));        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;waiting...&quot;</span>);    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, DATA.<span class="hljs-title function_ invoke__">load</span>(Relaxed));&#125;</code></pre></div><div class="note note-info">            <p>Note that if we use <code>Relaxed</code> instead of <code>Acquire</code> for <code>READY</code>, we might read <code>0</code> instead of <code>123</code>.<br>That’s because <code>Relaxed</code> only provides a total order for the <strong><em>same</em></strong> atomic variable, not across <strong><em>different</em></strong> variables.</p>          </div><p>Since <code>Release</code> and <code>Acquire</code> have a happens-before relationship, we can simply use <code>u64</code> instead of <code>AtomicU64</code>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> <span class="hljs-keyword">mut</span> DATA: <span class="hljs-type">u64</span> = <span class="hljs-number">0</span>;<span class="hljs-keyword">static</span> READY: AtomicBool = AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>);<span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    thread::<span class="hljs-title function_ invoke__">spawn</span>(|| &#123;        <span class="hljs-comment">// Safety: Nothing else is accessing DATA,</span>        <span class="hljs-comment">// because we haven&#x27;t set the READY flag yet.</span>        <span class="hljs-keyword">unsafe</span> &#123; DATA = <span class="hljs-number">123</span> &#125;;        READY.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Release); <span class="hljs-comment">// Everything from before this store ..</span>    &#125;);    <span class="hljs-keyword">while</span> !READY.<span class="hljs-title function_ invoke__">load</span>(Acquire) &#123;        <span class="hljs-comment">// .. is visible after this loads `true`.</span>        thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_millis</span>(<span class="hljs-number">100</span>));        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;waiting...&quot;</span>);    &#125;    <span class="hljs-comment">// Safety: Nothing is mutating DATA, because READY is set.</span>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; DATA &#125;);&#125;</code></pre></div><hr><h3 id="SeqCst">SeqCst</h3><p>To be short, the order of excution is just like the order of the codes.<br>Here’s a example of the difference between <code>Acq/Rel</code> and <code>SeqCst</code>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> A: AtomicUsize = AtomicUsize::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">static</span> B: AtomicUsize = AtomicUsize::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">fn</span> <span class="hljs-title function_">thread1</span>() &#123;    A.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, SeqCst);    B.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">2</span>, SeqCst);&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">thread2</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = B.<span class="hljs-title function_ invoke__">load</span>(SeqCst);    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = A.<span class="hljs-title function_ invoke__">load</span>(SeqCst);    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a = &#123;&#125;, b = &#123;&#125;&quot;</span>, a, b);&#125;</code></pre></div><blockquote><p>If b is <code>2</code> then a must be <code>1</code>.</p></blockquote><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> A: AtomicUsize = AtomicUsize::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">static</span> B: AtomicUsize = AtomicUsize::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">fn</span> <span class="hljs-title function_">thread1</span>() &#123;    A.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, Release);    B.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">2</span>, Relaxed);&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">thread2</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = B.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = A.<span class="hljs-title function_ invoke__">load</span>(Acquire);    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a = &#123;&#125;, b = &#123;&#125;&quot;</span>, a, b);&#125;</code></pre></div><blockquote><p>If b is <code>2</code>, we can’t guarantee that a is <code>1</code>.</p></blockquote><hr><h3 id="Fence">Fence</h3><p>To be short, <code>fence</code> stops the compiler from reordering instructions following the fence with instructions preceding the fence.</p><blockquote><p>More specifically, a <code>fence(Release)</code> will prevent the <strong><em>store</em></strong> instructions being reordered <strong><em>after</em></strong> the fence, and a <code>fence(Acquire)</code> will prevent the <strong><em>read</em></strong> instructions being reordered <strong><em>before</em></strong> the fence.</p></blockquote><p>We’ve already known that <code>Release</code> and <code>Acquire</code> have a happens-before relationship, and we can use <code>fence</code> to substitute them like this:</p><p><strong>before:</strong></p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// Thread A</span>&#123;    DATA.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">42</span>, Relaxed);    READY.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Release); <span class="hljs-comment">// What happens-before the `Release`...</span>&#125;<span class="hljs-comment">// Thread B</span><span class="hljs-keyword">if</span> READY.<span class="hljs-title function_ invoke__">load</span>(Acquire) &#123;            <span class="hljs-comment">// ... is visible after the `Acquire`.</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = DATA.<span class="hljs-title function_ invoke__">load</span>(Relaxed); <span class="hljs-comment">// The observation has occured (READY false -&gt; true), so we can see the value must be 42.</span>    <span class="hljs-built_in">assert_eq!</span>(value, <span class="hljs-number">42</span>);&#125;</code></pre></div><p><strong>after:</strong></p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// Thread A</span>&#123;    DATA.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">42</span>, Relaxed);    <span class="hljs-title function_ invoke__">fence</span>(Release);             <span class="hljs-comment">// fence before store</span>    READY.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Relaxed); <span class="hljs-comment">// just Relaxed</span>&#125;<span class="hljs-comment">// Thread B</span><span class="hljs-keyword">if</span> READY.<span class="hljs-title function_ invoke__">load</span>(Relaxed) &#123; <span class="hljs-comment">// just Relaxed</span>    <span class="hljs-title function_ invoke__">fence</span>(Acquire);      <span class="hljs-comment">// fence after load</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = DATA.<span class="hljs-title function_ invoke__">load</span>(Relaxed);    <span class="hljs-built_in">assert_eq!</span>(value, <span class="hljs-number">42</span>);&#125;</code></pre></div><ol><li><code>fence</code> after <code>load</code>:</li></ol><p>Let’s say, if we move the <code>fence</code> to the front of the <code>if</code> block, then the compiler <strong><em>might</em></strong> reorder the <code>load</code> before the <code>if</code> check:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-comment">// Thread B</span><span class="hljs-title function_ invoke__">fence</span>(Acquire);<span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = DATA.<span class="hljs-title function_ invoke__">load</span>(Relaxed); <span class="hljs-comment">// what value will be?</span><span class="hljs-keyword">if</span> READY.<span class="hljs-title function_ invoke__">load</span>(Relaxed) &#123;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;DATA = &#123;&#125;&quot;</span>, value);&#125;</code></pre></div><p>So we’ll probably get <code>DATA = 0</code> instead of <code>DATA = 42</code>.</p><ol start="2"><li><code>fence</code> before <code>store</code></li></ol><div class="code-wrapper"><pre><code class="hljs rust">&#123;    DATA.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">42</span>, Relaxed);    <span class="hljs-title function_ invoke__">fence</span>(Release); <span class="hljs-comment">// make sure DATA is stored</span>    READY.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Relaxed);&#125;</code></pre></div><p>Finally, check another example to make a deeper impression - use <code>fence</code> to get better performance:</p><div style="display: flex; flex-direction: row; justify-content: space-between;">  <div style="width: 49%;">    <div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = PTR.<span class="hljs-title function_ invoke__">load</span>(Acquire);<span class="hljs-keyword">if</span> p.<span class="hljs-title function_ invoke__">is_null</span>() &#123;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;no data&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;data = &#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; *p &#125;);&#125;</code></pre></div>  </div>  <div style="width: 49%;">    <div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = PTR.<span class="hljs-title function_ invoke__">load</span>(Relaxed);<span class="hljs-keyword">if</span> p.<span class="hljs-title function_ invoke__">is_null</span>() &#123;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;no data&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-title function_ invoke__">fence</span>(Acquire);    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;data = &#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; *p &#125;);&#125;</code></pre></div>  </div></div><div class="note note-info">            <ul><li><p>Why is the performance better?<br>Because the <code>fence</code> is only needed when <code>p</code> is not null, and load by <code>Relaxed</code> is lighter weight than <code>Acquire</code>.</p></li><li><p>How does it work?<br>Because <code>fence</code> stops <code>*p</code> from being reordered before the <code>if</code> check, and we can avoid the <code>Acquire</code> load when <code>p</code> is null.</p></li></ul>          </div><div class="note note-second">            <p>Any way, if you find it hard to understand, keeping these 2 rules in mind might help:</p><div class="code-wrapper"><pre><code class="hljs rust">a.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, Release);<span class="hljs-comment">// equals to</span><span class="hljs-title function_ invoke__">fence</span>(Release);a.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">1</span>, Relaxed);</code></pre></div><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = b.<span class="hljs-title function_ invoke__">load</span>(Acquire);<span class="hljs-comment">// equals to</span><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = b.<span class="hljs-title function_ invoke__">load</span>(Relaxed);<span class="hljs-title function_ invoke__">fence</span>(Acquire);</code></pre></div><p>If you simply do ‘Variable Replacement’, you’ll see that a <code>fence</code> isn’t actually dependent on another <code>fence</code>, it can also work with a <code>store</code> or a <code>load</code>.</p><p>i.e. A <code>fence(Acquire)</code> doesn’t have to work with a <code>fence(Release)</code>, we don’t have to use <code>fence</code> in pairs.</p><p>And that’s how the last example works.</p><p>PS: The ‘replacement’ doesn’t strictly requires you to do something like <code>:s/ori/new</code>. Of course you can add some lines between <code>fence</code> and <code>store</code> / <code>load</code>, as long as the codes you add don’t care about the mem order.</p>          </div><hr><h3 id="Misconceptions">Misconceptions</h3><ol><li><strong>I need strong memory ordering to make sure changes are immediately visible to other threads.</strong></li></ol><ul><li>In real life, memory ordering is about things like reordering instructions, which usually happen at nanosecond scale.<br>Stronger memory ordering does not make your data travel faster; it might even slow your program down.</li></ul><ol start="2"><li><strong>Disabling optimization means I don’t need to care about memory ordering.</strong></li></ol><ul><li>Processor optimizations still happen even if you disable compiler optimizations.</li></ul><ol start="3"><li><strong>Sequentially consistent memory ordering can be used for a “release-load” or an “acquire-store.”</strong></li></ol><ul><li>Release-store <strong><em>does not</em></strong> form any release-acquire relationship with a SeqCst-store.<br>If you need them to be part of a globally consistent order, <u>both operations will have to use SeqCst</u>.</li></ul><hr><h3 id="Summary">Summary</h3><table><thead><tr><th>type</th><th>guarantee</th></tr></thead><tbody><tr><td>Relaxed</td><td>Total modification order of a specific single atomic variable</td></tr><tr><td>Acq/Rel</td><td>Make sure changes before “Rel” are visible to “Acq”</td></tr><tr><td>SeqCst</td><td>Just like the order of the codes look like</td></tr><tr><td>Fence</td><td>Codes after the fence are not reordered with the codes before the fence</td></tr></tbody></table><div class="note note-light">            <p><strong><em>Aside: <code>compare_exchange</code> vs. <code>compare_exchange_weak</code></em></strong></p><p>To be short, <code>compare_exchange_weak</code> might return <code>Err</code> even if the comparison is successful.</p><p>This is because the low-level instructions of <code>_weak</code> is <code>LL/SC</code> (Load-Linked/Store-Conditional), which might fail due to cache contention.</p><p>Since we always need to use <code>while</code> loop to retry, <code>compare_exchange_weak</code> is <strong>more efficient</strong> on some specific platforms, such as <code>ARM</code>.</p><p>What’s more, since the <code>x86/x64</code> arch provides a strong memory named <code>TSO</code> (Total Store Order), thus <code>store(Release)</code> or <code>load(Acquire)</code> might simply be compiled into a <code>MOV</code> instruction;</p><p>However, on <code>ARM</code>, the memory model is less strict, so the compiler might generate a <code>DMB</code> (Data Memory Barrier) instruction for <code>Release</code> or <code>Acquire</code>.</p>          </div><h2 id="Spin-Lock">Spin Lock</h2><blockquote><p>If a lock is only ever held for very brief moments and the threads locking it can run in parallel on <strong><u>different processor cores</u></strong>,<br>it might be better for the threads to repeatedly try to lock it without actually going to sleep.</p></blockquote><h3 id="Minimal-Impl">Minimal Impl</h3><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">SpinLock</span> &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        <span class="hljs-keyword">Self</span> &#123; locked: AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>) &#125;    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.locked.<span class="hljs-title function_ invoke__">swap</span>(<span class="hljs-literal">true</span>, Acquire) &#123;            std::hint::<span class="hljs-title function_ invoke__">spin_loop</span>();        &#125;    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">unlock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">self</span>.locked.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">false</span>, Release);    &#125;&#125;</code></pre></div><hr><h3 id="Hold-value">Hold value</h3><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SpinLock</span>&lt;T&gt; &#123;    locked: AtomicBool,    value: UnsafeCell&lt;T&gt;,&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; SpinLock&lt;T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(value: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        <span class="hljs-keyword">Self</span> &#123;            locked: AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>),            value: UnsafeCell::<span class="hljs-title function_ invoke__">new</span>(value),        &#125;    &#125;    <span class="hljs-comment">// use this macro to suppress the clippy error</span>    <span class="hljs-meta">#[allow(clippy::mut_from_ref)]</span>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-keyword">mut</span> T &#123;        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.locked.<span class="hljs-title function_ invoke__">swap</span>(<span class="hljs-literal">true</span>, Acquire) &#123;            std::hint::<span class="hljs-title function_ invoke__">spin_loop</span>();        &#125;        <span class="hljs-keyword">unsafe</span> &#123; &amp;<span class="hljs-keyword">mut</span> *<span class="hljs-keyword">self</span>.value.<span class="hljs-title function_ invoke__">get</span>() &#125;    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">unlock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">self</span>.locked.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">false</span>, Release);    &#125;&#125;</code></pre></div><hr><h3 id="Use-Guard-to-auto-unlock">Use Guard to auto unlock</h3><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Guard</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; &#123;    lock: &amp;<span class="hljs-symbol">&#x27;a</span> SpinLock&lt;T&gt;,&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; Deref <span class="hljs-keyword">for</span> <span class="hljs-title class_">Guard</span>&lt;<span class="hljs-symbol">&#x27;_</span>, T&gt; &#123;    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Target</span> = T;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">deref</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-keyword">Self</span>::Target &#123;        <span class="hljs-keyword">unsafe</span> &#123; &amp;*<span class="hljs-keyword">self</span>.lock.value &#125;    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; DerefMut <span class="hljs-keyword">for</span> <span class="hljs-title class_">Guard</span>&lt;<span class="hljs-symbol">&#x27;_</span>, T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">deref_mut</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">Self</span>::Target &#123;        <span class="hljs-keyword">unsafe</span> &#123; &amp;<span class="hljs-keyword">mut</span> *<span class="hljs-keyword">self</span>.lock.value &#125;    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Guard</span>&lt;<span class="hljs-symbol">&#x27;_</span>, T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">self</span>.lock.<span class="hljs-title function_ invoke__">unlock</span>();    &#125;&#125;</code></pre></div><p>Now let’s change the <code>lock</code> method to return a <code>Guard</code>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span>&lt;T&gt; SpinLock&lt;T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Guard&lt;T&gt; &#123;        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.locked.<span class="hljs-title function_ invoke__">swap</span>(<span class="hljs-literal">true</span>, Acquire) &#123;            std::hint::<span class="hljs-title function_ invoke__">spin_loop</span>();        &#125;        Guard &#123; lock: <span class="hljs-keyword">self</span> &#125;    &#125;&#125;</code></pre></div><hr><h3 id="Fence-it">Fence it!</h3><p>Remember we’ve talked about using <code>fence</code> to substitute <code>load</code> or <code>store</code> in the previous section <a href="#Fence">Fence</a>? There happens to be an example of building a <code>SpinLock</code> with <code>fence</code> in the rust doc of <code>fence</code> itself:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Mutex</span> &#123;    flag: AtomicBool,&#125;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Mutex</span> &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> Mutex &#123;        Mutex &#123;            flag: AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>),        &#125;    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;        <span class="hljs-comment">// Wait until the old value is `false`.</span>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>            .flag            .<span class="hljs-title function_ invoke__">compare_exchange_weak</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, Ordering::Relaxed, Ordering::Relaxed)            .<span class="hljs-title function_ invoke__">is_err</span>()        &#123;&#125;        <span class="hljs-comment">// This fence synchronizes-with store in `unlock`.</span>        <span class="hljs-title function_ invoke__">fence</span>(Ordering::Acquire);    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">unlock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">false</span>, Ordering::Release);    &#125;&#125;</code></pre></div><p>A little bit confused of the single <code>fence</code>? Let’s break it down:</p><p>First, to see things clearly, we can cast the <code>while</code> loop to a <code>loop</code>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;    <span class="hljs-comment">// Wait until the old value is `false`.</span>    <span class="hljs-keyword">loop</span> &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>            .flag            .<span class="hljs-title function_ invoke__">compare_exchange_weak</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, Ordering::Relaxed, Ordering::Relaxed)            .<span class="hljs-title function_ invoke__">is_ok</span>()        &#123;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-comment">// This fence synchronizes-with store in `unlock`.</span>    <span class="hljs-title function_ invoke__">fence</span>(Ordering::Acquire);&#125;</code></pre></div><p>Then, we replace <code>compare_exchange_weak</code> with <code>load</code> and <code>store</code>, note that this is <span class="label label-danger">impossible</span> in real code because split <code>cas</code> into individual <code>load</code> and <code>store</code> will break the atomicity:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;    <span class="hljs-comment">// Wait until the old value is `false`.</span>    <span class="hljs-keyword">loop</span> &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">load</span>(Ordering::Relaxed) == <span class="hljs-literal">false</span> &#123;            <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Ordering::Relaxed);            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-comment">// This fence synchronizes-with store in `unlock`.</span>    <span class="hljs-title function_ invoke__">fence</span>(Ordering::Acquire);&#125;</code></pre></div><p>Do a little bit adjustment:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;    <span class="hljs-comment">// Wait until the old value is `false`.</span>    <span class="hljs-keyword">loop</span> &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">load</span>(Ordering::Relaxed) == <span class="hljs-literal">false</span> &#123;            <span class="hljs-title function_ invoke__">fence</span>(Ordering::Acquire);            <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Ordering::Relaxed);            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre></div><p>Now we can see that <code>fence</code> after <code>load</code> pattern! It’s equivalent to:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">lock</span>(&amp;<span class="hljs-keyword">self</span>) &#123;    <span class="hljs-comment">// Wait until the old value is `false`.</span>    <span class="hljs-keyword">loop</span> &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">load</span>(Ordering::Acquire) == <span class="hljs-literal">false</span> &#123;            <span class="hljs-keyword">self</span>.flag.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Ordering::Relaxed);            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre></div><p>And that’s exactly how does the <code>fence</code> synchronizes-with the <code>store</code> in <code>unlock</code>.</p><p>It’s a little bit verbose, but it’s a good way to understand how <code>fence</code> works.</p><h2 id="Chan">Chan</h2><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Channel</span>&lt;T&gt; &#123;    message: UnsafeCell&lt;MaybeUninit&lt;T&gt;&gt;,    ready: AtomicBool,&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Sync</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Channel</span>&lt;T&gt; <span class="hljs-keyword">where</span> T: <span class="hljs-built_in">Send</span> &#123;&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sender</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; &#123;    channel: &amp;<span class="hljs-symbol">&#x27;a</span> Channel&lt;T&gt;,    recv_thread: Thread,&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Receiver</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; &#123;    channel: &amp;<span class="hljs-symbol">&#x27;a</span> Channel&lt;T&gt;,    _marker: std::marker::PhantomData&lt;&amp;<span class="hljs-symbol">&#x27;a</span> T&gt;,&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; Channel&lt;T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        <span class="hljs-keyword">Self</span> &#123;            message: UnsafeCell::<span class="hljs-title function_ invoke__">new</span>(MaybeUninit::<span class="hljs-title function_ invoke__">uninit</span>()),            ready: AtomicBool::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-literal">false</span>),        &#125;    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">split</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> (Sender&lt;T&gt;, Receiver&lt;T&gt;) &#123;        *<span class="hljs-keyword">self</span> = <span class="hljs-keyword">Self</span>::<span class="hljs-title function_ invoke__">new</span>();        (            Sender &#123;                channel: <span class="hljs-keyword">self</span>,                recv_thread: thread::<span class="hljs-title function_ invoke__">current</span>(),            &#125;,            Receiver &#123;                channel: <span class="hljs-keyword">self</span>,                _marker: std::marker::PhantomData,            &#125;,        )    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; Sender&lt;<span class="hljs-symbol">&#x27;_</span>, T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">send</span>(<span class="hljs-keyword">self</span>, message: T) &#123;        <span class="hljs-keyword">unsafe</span> &#123; (*<span class="hljs-keyword">self</span>.channel.message.<span class="hljs-title function_ invoke__">get</span>()).<span class="hljs-title function_ invoke__">write</span>(message) &#125;;        <span class="hljs-keyword">self</span>.channel.ready.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-literal">true</span>, Release);        <span class="hljs-keyword">self</span>.recv_thread.<span class="hljs-title function_ invoke__">unpark</span>();    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; Receiver&lt;<span class="hljs-symbol">&#x27;_</span>, T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_ready</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;        <span class="hljs-keyword">self</span>.channel.ready.<span class="hljs-title function_ invoke__">load</span>(Relaxed)    &#125;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">receive</span>(<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> T &#123;        <span class="hljs-keyword">while</span> !<span class="hljs-keyword">self</span>.channel.ready.<span class="hljs-title function_ invoke__">swap</span>(<span class="hljs-literal">false</span>, Acquire) &#123;            thread::<span class="hljs-title function_ invoke__">park</span>();        &#125;        <span class="hljs-keyword">unsafe</span> &#123; (*<span class="hljs-keyword">self</span>.channel.message.<span class="hljs-title function_ invoke__">get</span>()).<span class="hljs-title function_ invoke__">assume_init_read</span>() &#125;    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Channel</span>&lt;T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">if</span> *<span class="hljs-keyword">self</span>.ready.<span class="hljs-title function_ invoke__">get_mut</span>() &#123;            <span class="hljs-keyword">unsafe</span> &#123; <span class="hljs-keyword">self</span>.message.<span class="hljs-title function_ invoke__">get_mut</span>().<span class="hljs-title function_ invoke__">assume_init_drop</span>() &#125;        &#125;    &#125;&#125;</code></pre></div><p>Pay attention to these points:</p><ol><li>Use <code>MaybeUninit</code> to save memory.</li><li>Abstract <code>Sender</code> and <code>Receiver</code> to limit the user’s access to the channel.(Think about the <code>MutexGuard</code> in <code>Mutex</code>)</li><li>Use thread handle to park / unpark the receiver thread.</li><li>Do not forget to drop the <code>MaybeUninit</code> due to the struct won’t drop the inner data automatically.</li></ol><h2 id="Arc">Arc</h2><h3 id="Minimal-Impl-2">Minimal Impl</h3><ul><li><p>snippet 1:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcData</span>&lt;T&gt; &#123;    ref_cnt: AtomicUsize,    data: T,&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;    ptr: NonNull&lt;ArcData&lt;T&gt;&gt;,&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Send</span> + <span class="hljs-built_in">Sync</span>&gt; <span class="hljs-built_in">Send</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Send</span> + <span class="hljs-built_in">Sync</span>&gt; <span class="hljs-built_in">Sync</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;&#125;</code></pre></div><ul><li><code>NonNull</code> is almost same as <code>*mut T</code> but non-null and [covariant]</li><li><code>Arc&lt;T&gt;</code> should be shared between threads, so <code>T</code> should be <code>Sync</code>.</li><li><code>Arc&lt;T&gt;</code> could be dropped by other threads, so <code>T</code> should be <code>Send</code>.</li></ul></li><li><p>snippet 2:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span>&lt;T&gt; Arc&lt;T&gt; &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(data: T) <span class="hljs-punctuation">-&gt;</span> Arc&lt;T&gt; &#123;        Arc &#123;            ptr: NonNull::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(ArcData &#123;                ref_count: AtomicUsize::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>),                data,            &#125;))),        &#125;    &#125;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">data</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;ArcData&lt;T&gt; &#123;        <span class="hljs-keyword">unsafe</span> &#123; <span class="hljs-keyword">self</span>.ptr.<span class="hljs-title function_ invoke__">as_ref</span>() &#125;    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; Deref <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Target</span> = T;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">deref</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;        &amp;<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">data</span>().data    &#125;&#125;</code></pre></div><ul><li>Use <code>Box::leak</code> to give up the exclusive ownership of a <code>Box</code> allocation.</li></ul></li><li><p>snippet 3:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Clone</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">clone</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">data</span>().ref_count.<span class="hljs-title function_ invoke__">fetch_add</span>(<span class="hljs-number">1</span>, Relaxed) &gt; <span class="hljs-type">usize</span>::MAX / <span class="hljs-number">2</span> &#123;            std::process::<span class="hljs-title function_ invoke__">abort</span>();        &#125;        Arc &#123; ptr: <span class="hljs-keyword">self</span>.ptr &#125;    &#125;&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">data</span>().ref_count.<span class="hljs-title function_ invoke__">fetch_sub</span>(<span class="hljs-number">1</span>, Release) == <span class="hljs-number">1</span> &#123;            <span class="hljs-title function_ invoke__">fence</span>(Acquire);            <span class="hljs-keyword">unsafe</span> &#123;                <span class="hljs-title function_ invoke__">drop</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">from_raw</span>(<span class="hljs-keyword">self</span>.ptr.<span class="hljs-title function_ invoke__">as_ptr</span>()));            &#125;        &#125;    &#125;&#125;</code></pre></div><ul><li><code>fetch_add</code> and <code>fetch_sub</code> are used to increment and decrement the reference count.</li><li><code>fetch_add</code> is <code>Relaxed</code> because we don’t need to guarantee the order of the reference count, but pay attention to the next line.</li><li><code>fetch_sub</code> is <code>Release</code> and then <code>fence(Acquire)</code> to make sure no one is still accessing the data when we drop it.<br>We need to guarantee that <strong>all the previous</strong> <code>fetch_sub</code> <strong><u>happens before</u></strong> the <strong>final</strong> <code>fetch_sub</code>.<br>In hence, we can use <code>AcqRel</code> for that, however, only the final decrement needs <code>Acquire</code>, so we use <code>Release</code> + <code>fence(Acquire)</code> for efficiency.</li></ul></li></ul><hr><h3 id="Self-Reference">Self-Reference</h3><p>Futher more, if we want to handle ‘self-reference’ struct with <code>Arc</code>, it might cause memory leak, because the <code>Arc</code> will only be dropped when the reference count is zero while self-reference struct will never be zero:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::sync::&#123;Arc, Mutex&#125;;<span class="hljs-meta">#[derive(Debug)]</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyStruct</span> &#123;    value: <span class="hljs-type">String</span>,    self_ref: <span class="hljs-type">Option</span>&lt;Arc&lt;Mutex&lt;MyStruct&gt;&gt;&gt;,&#125;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyStruct</span> &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(value: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        MyStruct &#123;            value,            self_ref: <span class="hljs-literal">None</span>,        &#125;    &#125;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">set_reference</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, other: Arc&lt;Mutex&lt;MyStruct&gt;&gt;) &#123;        <span class="hljs-keyword">self</span>.self_ref = <span class="hljs-title function_ invoke__">Some</span>(other);    &#125;&#125;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">MyStruct</span> &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;MyStruct is dropped&quot;</span>);    &#125;&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DetectDrop</span> &#123;&#125;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">DetectDrop</span> &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;DetectDrop is dropped&quot;</span>);    &#125;&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Arc::<span class="hljs-title function_ invoke__">new</span>(Mutex::<span class="hljs-title function_ invoke__">new</span>(MyStruct::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())));    <span class="hljs-keyword">let</span> <span class="hljs-variable">_b</span> = Arc::<span class="hljs-title function_ invoke__">new</span>(DetectDrop &#123;&#125;);    &#123;        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">a_ref</span> = a.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">unwrap</span>();        a_ref.<span class="hljs-title function_ invoke__">set_reference</span>(a.<span class="hljs-title function_ invoke__">clone</span>());    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Arc count: &#123;&#125;&quot;</span>, Arc::<span class="hljs-title function_ invoke__">strong_count</span>(&amp;a));&#125;<span class="hljs-comment">// OUTPUT:</span><span class="hljs-comment">// Arc count: 2</span><span class="hljs-comment">// DetectDrop is dropped</span></code></pre></div><p>So, here comes the <code>Weak</code>.</p><hr><h3 id="Weak">Weak</h3><p><code>Weak</code> is a non-owning reference to the managed allocation, which means it won’t increase the reference count.</p><p>To achieve that, we can simply split the <code>Arc</code> into <code>Weak</code> and <code>Arc</code>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;    ptr: NonNull&lt;ArcData&lt;T&gt;&gt;,&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>&gt; <span class="hljs-built_in">Send</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>&gt; <span class="hljs-built_in">Sync</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Arc</span>&lt;T&gt; &#123;&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Weak</span>&lt;T&gt; &#123;    ptr: NonNull&lt;ArcData&lt;T&gt;&gt;,&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>&gt; <span class="hljs-built_in">Send</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Weak</span>&lt;T&gt; &#123;&#125;<span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>&gt; <span class="hljs-built_in">Sync</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Weak</span>&lt;T&gt; &#123;&#125;<span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcData</span>&lt;T&gt; &#123;    <span class="hljs-comment">/// Number of `Arc`s.</span>    data_ref_count: AtomicUsize,    <span class="hljs-comment">/// Number of `Weak`s, plus one if there are any `Arc`s.</span>    alloc_ref_count: AtomicUsize,    <span class="hljs-comment">/// The data. Dropped if there are only weak pointers left.</span>    data: UnsafeCell&lt;ManuallyDrop&lt;T&gt;&gt;,&#125;</code></pre></div><p>We’re not going to copy the code from the book, let’s just summarize the key points:</p><ul><li>Using giant numbers as a limit is feasible, in the usage scenario of <code>Arc</code>, there’re no operating systems that can handle <code>usize::MAX / 2</code> threads.</li><li>The inner data is still accessible even if all the <code>Arc</code> instances are dropped, because the <code>Weak</code> is still holding the <code>ArcData</code>. However, nobody can access it outside of the <code>Arc</code> crate - since we only provide <code>upgrade</code> method, and it’ll return <code>None</code>.</li><li><code>get_mut</code> returns <code>None</code> unless the <code>Arc</code> is the only one holding the data.</li></ul><p>Have a look at this example:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-meta">#[cfg(test)]</span><span class="hljs-keyword">mod</span> tests &#123;    <span class="hljs-keyword">use</span> std::thread::&#123;<span class="hljs-keyword">self</span>&#125;;    <span class="hljs-keyword">use</span> super::*;    <span class="hljs-meta">#[test]</span>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">test_arc</span>() &#123;        thread::<span class="hljs-title function_ invoke__">scope</span>(|s| &#123;            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">arc</span> = Arc::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">42</span>);            <span class="hljs-comment">// only one reference, so we can get_mut</span>            <span class="hljs-built_in">assert!</span>(Arc::<span class="hljs-title function_ invoke__">get_mut</span>(&amp;<span class="hljs-keyword">mut</span> arc).<span class="hljs-title function_ invoke__">is_some</span>());            <span class="hljs-keyword">let</span> <span class="hljs-variable">weak1</span> = Arc::<span class="hljs-title function_ invoke__">downgrade</span>(&amp;arc);            <span class="hljs-comment">// more than one reference, so we cannot get_mut</span>            <span class="hljs-built_in">assert!</span>(Arc::<span class="hljs-title function_ invoke__">get_mut</span>(&amp;<span class="hljs-keyword">mut</span> arc).<span class="hljs-title function_ invoke__">is_none</span>());            <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = s.<span class="hljs-title function_ invoke__">spawn</span>(<span class="hljs-keyword">move</span> || &#123;                thread::<span class="hljs-title function_ invoke__">park</span>();                <span class="hljs-comment">// we cannot upgrade again</span>                <span class="hljs-built_in">assert!</span>(weak1.<span class="hljs-title function_ invoke__">upgrade</span>().<span class="hljs-title function_ invoke__">is_none</span>());                <span class="hljs-comment">// but the data is still there, it&#x27;s just not accessible outside of the crate</span>                <span class="hljs-keyword">let</span> <span class="hljs-variable">d</span> = weak1.<span class="hljs-title function_ invoke__">data</span>();                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;arc refs: &#123;:?&#125;&quot;</span>, d.data_ref_count.<span class="hljs-title function_ invoke__">load</span>(Relaxed));                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;weak refs: &#123;:?&#125;&quot;</span>, d.alloc_ref_count.<span class="hljs-title function_ invoke__">load</span>(Relaxed));                <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;data: &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; &amp;*d.data.<span class="hljs-title function_ invoke__">get</span>() &#125;);            &#125;);            <span class="hljs-comment">// wait until the Arc is dropped</span>            s.<span class="hljs-title function_ invoke__">spawn</span>(<span class="hljs-keyword">move</span> || &#123;                <span class="hljs-title function_ invoke__">drop</span>(arc);            &#125;)            .<span class="hljs-title function_ invoke__">join</span>()            .<span class="hljs-title function_ invoke__">unwrap</span>();            t.<span class="hljs-title function_ invoke__">thread</span>().<span class="hljs-title function_ invoke__">unpark</span>();        &#125;)    &#125;&#125;</code></pre></div><h2 id="Extra-Primitives">Extra - Primitives</h2><p>We’ve talked about <code>UnsafeCell</code> in the first chapter <a href="#Cell-RefCell">Cell, RefCell</a>, and we’ve seen more primitives in <a href="#Chan">Chan</a> and <a href="#Arc">Arc</a>. So it’s time to summarize them:</p><h3 id="UnsafeCell">UnsafeCell</h3><p>As we’ve mentioned before, <code>UnsafeCell</code> is the core primitive for interior mutability, and it’s <u>the <span class="label label-warning">only</span> safe way to have mutable data behind a shared reference</u>.</p><p>E.g:</p><div style="display: flex; flex-direction: row; justify-content: space-between;">  <div style="width: 49%;">    <div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">cannot_compile</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = UnsafeCell::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>);    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;x <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> UnsafeCell&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span>;    <span class="hljs-keyword">unsafe</span> &#123;        *y = <span class="hljs-number">2</span>;    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; *x.<span class="hljs-title function_ invoke__">get</span>() &#125;);&#125;</code></pre></div>  </div>  <div style="width: 49%;">    <div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">ok</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = UnsafeCell::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>);    <span class="hljs-keyword">unsafe</span> &#123;        <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">get</span>();        *y = <span class="hljs-number">2</span>;    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; *x.<span class="hljs-title function_ invoke__">get</span>() &#125;);&#125;</code></pre></div>  </div></div><p>Note that the complex casting in the left code is copied from <code>UnsafeCell::get()</code>, so the two snippets are <u>actually the same</u>.</p><p>However, the code on the left side will <u>not compile</u>, rustc will throw an error like this:</p><div class="note note-danger">            <p>error: assigning to <code>&amp;T</code> is undefined behavior, consider using an <code>UnsafeCell</code></p>          </div><p>Nonetheless, you can wrap the conversion in to a method of a struct to ‘make it work’:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyUnsafeCell</span>&lt;T: ?<span class="hljs-built_in">Sized</span>&gt; &#123;    value: T,&#125;<span class="hljs-keyword">impl</span>&lt;T&gt; MyUnsafeCell&lt;T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(v: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;        MyUnsafeCell &#123; value: v &#125;    &#125;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> *<span class="hljs-keyword">mut</span> T &#123;        <span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> MyUnsafeCell&lt;T&gt; <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> T <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> T    &#125;&#125;<span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">ok</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = MyUnsafeCell::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>);    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">get</span>();    <span class="hljs-keyword">unsafe</span> &#123;        *y = <span class="hljs-number">2</span>;    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x.value);&#125;</code></pre></div><p>But this is not the right way, because:</p><div class="note note-light">            <p><strong><em>Aside: lang item</em></strong></p><p>There’re some ‘black magic’ in rust – if you’re trying to copy the code of some builtin types, such as <code>UnsafeCell</code> or <code>ManuallyDrop</code>, and expect it to work just like the std lib, you might get disappointed. (Like you cannot compile the code above)</p><p>It’s even worse when you’re doing the same way with <code>ManuallyDrop</code>, because the compiler will not prevent you from writing those codes, so the unexpected behavior will happen at runtime and it’s hard to detect.</p><p>So why does the std lib work and yours does not? The answer is <code>lang item</code>.</p><p>You can find the <code>Attribute</code> above the <code>UnsafeCell</code>: <code>#[lang = &quot;unsafe_cell&quot;]</code><br>And this will make the compiler treat <code>UnsafeCell</code> as a special type, and it will be handled differently from the normal types, what’s more, this ‘handle’ is pluggable.</p><p>Check this for more detail: <a href="https://doc.rust-lang.org/nightly/unstable-book/language-features/lang-items.html"><u>lang item</u></a></p>          </div><p>So, what if we put this attribute on our struct?</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-meta">#[lang = <span class="hljs-string">&quot;unsafe_cell&quot;</span>]</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MyUnsafeCell</span>&lt;T: ?<span class="hljs-built_in">Sized</span>&gt; &#123;    value: T,&#125;</code></pre></div><p>Bad news, it won’t work, because this attribute cannot be redefined:</p><div class="note note-danger">            <p>error[E0152]: found duplicate lang item <code>unsafe_cell</code></p>          </div><p>If you insist to do so, you’ll have to build a free-standing crate yourself.<br>Check this out: <a href="https://doc.rust-lang.org/error_codes/E0152.html">Error code E0152, #![no_std]</a></p><hr><h3 id="NonNull">NonNull</h3><p>To be short, as the doc says: “<code>*mut T</code> but non-zero and <strong><em>covariant</em></strong>”.</p><p>So we can use it if we’re sure that the pointer is not null, and we can use it to <u>bypass the safety check of <code>*mut T</code></u> to get better performance.</p><h4 id="non-zero-mut-T">non-zero *mut T</h4><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-comment">// addr = 0x0</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">nptr</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> = ptr::<span class="hljs-title function_ invoke__">null_mut</span>();    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, nptr.<span class="hljs-title function_ invoke__">is_null</span>(), nptr.<span class="hljs-title function_ invoke__">is_aligned</span>()); <span class="hljs-comment">// true true</span>    <span class="hljs-comment">// safe</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">nnull</span> = NonNull::<span class="hljs-title function_ invoke__">new</span>(nptr);    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, nnull); <span class="hljs-comment">// None</span>    <span class="hljs-comment">// compile error in debug mode</span>    <span class="hljs-comment">// runtime error in release mode if you try to dereference it</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">force_create</span> = <span class="hljs-keyword">unsafe</span> &#123; NonNull::<span class="hljs-title function_ invoke__">new_unchecked</span>(nptr) &#125;;    <span class="hljs-keyword">let</span> <span class="hljs-variable">fptr</span> = force_create.<span class="hljs-title function_ invoke__">as_ptr</span>();    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, fptr); <span class="hljs-comment">// 0x0</span>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-keyword">unsafe</span> &#123; *fptr &#125;); <span class="hljs-comment">// runtime error</span>&#125;</code></pre></div><p><code>NonNull</code> will prevent you from creating a null <code>NonNull</code> instance, but if you insist to do so by calling <code>new_unchecked</code>, you’ll get a runtime error(if there’re no errors, it’s still a UB) when you try to dereference it.</p><div class="note note-light">            <p><strong><em>Aside: assert_unsafe_precondition!</em></strong></p><p><code>NonNull::new_unchecked</code> uses this macro to check the null pointer.</p><p>As we know, <code>xxx_unchecked</code> is a common pattern in rust, and it’s always used to bypass the safety check to improve performance.</p><p>So why does <code>NonNull</code> still check the null pointer? The secret is:</p><p>“The check is enabled at runtime if debug assertions are enabled when the caller is monomorphized. In const-eval/Miri checks implemented with this macro for language UB are always ignored.”</p><p>So, this check is only enabled in debug mode.</p><p>BTW, do you know how to enable/disable the debug assertions? There’re 3 ways:</p><ul><li>put <code>RUSTFLAGS=&quot;-C debug-assertions=on&quot;</code> before <code>cargo build</code></li><li>add <code>debug-assertions = true</code> in the <code>Cargo.toml</code></li><li>by default, <code>cargo build --release</code> will disable the debug assertions</li></ul>          </div><hr><h4 id="covariant">covariant</h4><div class="note note-danger">            <p>This is a quite complex and subtle concept, I recommend you to read this article in <em>Rustonomicon</em>: <u><a href="https://doc.rust-lang.org/nomicon/subtyping.html">🔗Subtyping and Variance</a></u>.</p>          </div><p>Anyway, let’s have a quick look of <code>Variance</code> in rust:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">debug</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(a: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, b: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) &#123;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a = &#123;a:?&#125; b = &#123;b:?&#125;&quot;</span>);&#125;</code></pre></div><p>We can see that <code>a</code> and <code>b</code> have the same lifetime <code>'a</code>, but does the <code>debug</code> function really requires the same lifetime for <code>a</code> and <code>b</code>?</p><p>The answer is <strong><em>NO</em></strong>:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span>: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello&quot;</span>;    &#123;        <span class="hljs-keyword">let</span> <span class="hljs-variable">world</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>);        <span class="hljs-keyword">let</span> <span class="hljs-variable">world</span> = &amp;world; <span class="hljs-comment">// &#x27;world has a shorter lifetime than &#x27;static</span>        <span class="hljs-title function_ invoke__">debug</span>(hello, world);    &#125;&#125;</code></pre></div><p><strong>Let’s break it down without complicated concepts:</strong></p><ul><li>assume there’re 2 lifetimes: <code>'long</code> and <code>'short</code></li><li><code>'long</code>’s code scope completely covers <code>'short</code>’s code scope</li></ul><p>Then we can say that <code>'long</code> can be downgraded to <code>'short</code>.</p><div class="note note-info">            <p>In hence, <code>debug(hello, world)</code> is:</p><p><code>debug&lt;'world&gt;('world hello, 'world world)</code></p><p>instead of</p><p><code>debug&lt;'static&gt;('static hello, 'static world)</code>.</p>          </div><p><strong>Now let’s find the concepts back:</strong></p><ul><li><code>'static</code> is a <u><strong><em>SubType</em></strong></u> of <code>'world</code></li><li><code>'world</code> is a <u><strong><em>SuperType</em></strong></u> of <code>'static</code></li></ul><p>It’s not hard to understand the naming - we can always cast a child class into a parent class in OO languages like Java.</p><p>So we can always cast a <u><strong><em>SubType</em></strong></u> into a <u><strong><em>SuperType</em></strong></u> in Rust.</p><p><strong>Look back to <code>Variance</code>:</strong></p><p>‘Variance’ is another concept for describing the relationship between lifetimes. And it has 3 sub-concepts:</p><ul><li><strong>Covariant</strong>: if <code>'a</code> is a subtype of <code>'b</code>, then <code>Foo&lt;'a&gt;</code> is a subtype of <code>Foo&lt;'b&gt;</code>.</li><li><strong>Contravariant</strong>: if <code>'a</code> is a subtype of <code>'b</code>, then <code>Foo&lt;'b&gt;</code> is a subtype of <code>Foo&lt;'a&gt;</code>.</li><li><strong>Invariant</strong>: if <code>'a</code> is a subtype of <code>'b</code>, then <code>Foo&lt;'a&gt;</code> and <code>Foo&lt;'b&gt;</code> are not related to the precondition.</li></ul><p>Let’s stop here, we can find more details in the book <em>Rustonomicon</em>.</p><hr><h3 id="ManuallyDrop">ManuallyDrop</h3><p>A wrapper to inhibit the compiler from automatically calling <code>T</code>’s destructor and it’s 0-cost.</p><p>Take a look at the definition:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-meta">#[stable(feature = <span class="hljs-string">&quot;manually_drop&quot;</span>, since = <span class="hljs-string">&quot;1.20.0&quot;</span>)]</span><span class="hljs-meta">#[lang = <span class="hljs-string">&quot;manually_drop&quot;</span>]</span><span class="hljs-meta">#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]</span><span class="hljs-meta">#[repr(transparent)]</span><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ManuallyDrop</span>&lt;T: ?<span class="hljs-built_in">Sized</span>&gt; &#123;    value: T,&#125;</code></pre></div><p>This is a <code>lang item</code> and it’s <code>repr(transparent)</code>, so it’s just a wrapper of <code>T</code>, and the implementation is a plugin of the compiler.</p><p>Using <code>ManuallyDrop</code> is quite simple:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DetectDrop</span>&lt;T: <span class="hljs-built_in">Debug</span>&gt; &#123;    value: T,&#125;<span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Debug</span>&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">DetectDrop</span>&lt;T&gt; &#123;    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Dropping DetectDrop with value: &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.value);    &#125;&#125;<span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-comment">// immutable, use into_inner to take the value out and drop it</span>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ManuallyDrop::<span class="hljs-title function_ invoke__">new</span>(DetectDrop &#123; value: <span class="hljs-number">52</span> &#125;);    &#123;        <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span> = ManuallyDrop::<span class="hljs-title function_ invoke__">into_inner</span>(x);    &#125;    <span class="hljs-comment">// mutable, use `drop` to drop the value</span>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span> = ManuallyDrop::<span class="hljs-title function_ invoke__">new</span>(DetectDrop &#123; value: <span class="hljs-number">99</span> &#125;);    <span class="hljs-keyword">unsafe</span> &#123;        ManuallyDrop::<span class="hljs-title function_ invoke__">drop</span>(&amp;<span class="hljs-keyword">mut</span> y);    &#125;&#125;</code></pre></div><hr><h3 id="MaybeUninit">MaybeUninit</h3><p>A wrapper to represent an value which is probably uninitialized.</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-meta">#[stable(feature = <span class="hljs-string">&quot;maybe_uninit&quot;</span>, since = <span class="hljs-string">&quot;1.36.0&quot;</span>)]</span><span class="hljs-meta">#[lang = <span class="hljs-string">&quot;maybe_uninit&quot;</span>]</span><span class="hljs-meta">#[derive(Copy)]</span><span class="hljs-meta">#[repr(transparent)]</span><span class="hljs-keyword">pub</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">MaybeUninit</span>&lt;T&gt; &#123;    uninit: (),    value: ManuallyDrop&lt;T&gt;,&#125;</code></pre></div><p>As we can see, it’s also a <code>lang item</code> and <code>repr(transparent)</code>, meanwhile it’s a wrapper of <code>ManuallyDrop&lt;T&gt;</code>.</p><p>The design pattern is easy to understand:</p><ul><li>when you create an <code>uninit</code> value, it’s just a <code>()</code> and it’s safe to drop</li><li>but when you assign a value to it, it’ll become a <code>ManuallyDrop&lt;T&gt;</code> so it’s unsafe to drop</li></ul><p>So what’s the purpose of <code>MaybeUninit</code>? Especially when we have <code>ManuallyDrop</code>?</p><p>A typical use is lazy initializing:</p><div class="code-wrapper"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">arr</span>: [MaybeUninit&lt;<span class="hljs-type">i32</span>&gt;; <span class="hljs-number">10000</span>] = <span class="hljs-keyword">unsafe</span> &#123; MaybeUninit::<span class="hljs-title function_ invoke__">uninit</span>().<span class="hljs-title function_ invoke__">assume_init</span>() &#125;;    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">100</span> &#123;        arr[i] = MaybeUninit::<span class="hljs-title function_ invoke__">new</span>(i <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>);    &#125;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">sum</span> = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">100</span> &#123;        sum += <span class="hljs-keyword">unsafe</span> &#123; arr[i].<span class="hljs-title function_ invoke__">assume_init</span>() &#125;;    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, sum);&#125;</code></pre></div><div class="note note-info">            <p>The cost of the array itself cannot be reduced, but the cost of element is optimized.</p><p>The example above is quite simple, what if we replace <code>i32</code> with a complex struct? – <u>We have to call <code>T::new()</code> for each element, and those ‘zero’ values don’t take zero cost.</u></p>          </div><p>You may noticed that we can replace <code>MaybeUninit</code> with <code>Option</code> in this example, so what’s the difference?</p><ul><li><code>Option</code> is a <code>enum</code> and it’s a fat pointer, while <code>MaybeUninit</code> is zero-cost.</li><li><code>Option</code> can tell you whether the value is initialized, but <code>MaybeUninit</code> cannot.<br>Which indicates that you as a programmer, are responsible for keeping track of it and never reading it if it’s uninitialized</li></ul><hr><h3 id="PhantomData-TODO">PhantomData(TODO)</h3>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复式记账法</title>
    <link href="/chores/double_entry_bookkeeping/"/>
    <url>/chores/double_entry_bookkeeping/</url>
    
    <content type="html"><![CDATA[<h2 id="核心点">核心点</h2><ul><li>有借必有贷，借贷必相等</li><li>借 = debit，贷 = credit</li></ul><p>核心点不难理解，就是字面意思。只是注意不要陷入中文的语言陷阱中 —— 有人觉得&quot;找银行借钱和找银行贷款&quot;是同一个意思，于是就会搞混 debit 和 credit 的概念。</p><p>你只需要记住&quot;贷 credit&quot;才是需要偿还的即可（类比你的房贷）。如果你希望让&quot;借&quot;的理解更合理，你可以理解为是你把钱借给了银行，因为钱是你的，而你放在银行那存着。</p><h2 id="记账过程">记账过程</h2><p>假设我使用某支付平台通过我的银行卡支付了 5 元购买了一瓶饮料，我的钱最终应该从我的账户流向商家的账户，理论上来说一个完备的记账流程大致如下：</p><table><thead><tr><th>事件</th><th>D 应收待清算</th><th>C 网关过渡户</th><th>C 商户待结算</th><th>D 应收应清算</th><th>D 备付金头寸</th><th>C 商户余额户</th></tr></thead><tbody><tr><td>渠道扣款成功</td><td>D + 5</td><td>C + 5</td><td></td><td></td><td></td><td></td></tr><tr><td>支付成功</td><td></td><td>D - 5</td><td>C + 5</td><td></td><td></td><td></td></tr><tr><td>网联清分完成(完成明细对账)</td><td>C - 5</td><td></td><td></td><td>D + 5</td><td></td><td></td></tr><tr><td>资金到账(完成资金对账)</td><td></td><td></td><td></td><td>C - 5</td><td>D + 5</td><td></td></tr><tr><td>结算完成</td><td></td><td></td><td>D - 5</td><td></td><td></td><td>C + 5</td></tr></tbody></table><p>我们先不管上述复杂的流程，按照下面的步骤从易到难逐步理解。</p><hr><h3 id="一、事件">一、事件</h3><p>事件的类型已经在上面标注出来了，你可以理解为这是行业内的通用实践，也可以理解为这是基于安全考量所必备的一些步骤。</p><p>比如，理论上来说，平台给商家打款，也可以不关心外部的网联的对账：</p>    <div class="fold">      <div class="fold-title fold-default collapsed" data-toggle="collapse" href="#collapse-a9d83a35" role="button" aria-expanded="false" aria-controls="collapse-a9d83a35">        <div class="fold-arrow">▶</div>TL;DR      </div>      <div class="fold-collapse collapse" id="collapse-a9d83a35">        <div class="fold-content">          <p>假设我是「XX 支付」，用户的钱在我的系统里本质上只是一个数字，在不涉及出入金的情况下，我完全可以随意修改这个数字。<br>平台的零钱 / 余额只能在平台内流通，直到你点击「提现到银行卡」，这笔钱我才真正需要和银行结算。<br>因此用户付费购买商品这个流程，我可以直接把 user.balance - 5, merchant.balance + 5，然后告诉商家「你的钱到账了」。<br>我们之所以需要消费上述的具体事件来推进流程，是因为这笔钱的来源并不是平台内的用户零钱，而是用户的银行卡，也就是说用户选择了「使用银行卡支付」。<br>所以如果我主动跳过其中的核心检查步骤，直接给商户加钱，那么万一用户的银行卡扣款失败，那我作为平台就损失了 5 元。</p>        </div>      </div>    </div><hr><h3 id="二、C-D-的特征">二、C / D 的特征</h3><p>复习一下：C = credit 贷记，D = debit 借记。</p><p>我们不难发现上述表中有如下特征：</p><ul><li><p>每一列的 C 和 D 的和都是 0（除了最后两列）</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-ec4cc7c3" role="button" aria-expanded="false" aria-controls="collapse-ec4cc7c3">        <div class="fold-arrow">▶</div>解释      </div>      <div class="fold-collapse collapse" id="collapse-ec4cc7c3">        <div class="fold-content">          <p><u>每一列代表的都是某个独立账户的变动</u>，那么显然，除了最终的商户余额户和备付金头寸，其他账户的变动都是功能性的、短暂的。<br>换句话来说，钱只是经过这些账户流入了商户的钱包，这些账户在不收取手续费的情况下，不应该从中拿取或者给予任何金额。<br>为什么后两列不符合特征呢？因为商户通过卖饮料赚到了 5 元。</p>        </div>      </div>    </div></li><li><p>每一行的 C 和 D 的和都是 0（除了第一行）</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-bb76695e" role="button" aria-expanded="false" aria-controls="collapse-bb76695e">        <div class="fold-arrow">▶</div>解释      </div>      <div class="fold-collapse collapse" id="collapse-bb76695e">        <div class="fold-content">          <p><u>每一行代表的都是一个事件产生的账户变动</u>，这个变动显然是双向的，要符合借贷必相等的原则。<br>为什么第一行不符合特征呢？因为商户本质是要收钱的，这个钱本身就是由外部用户的银行卡流入我们平台再结算给商户的。<br>换句话来说，我向第一个杯子里倒了水，此时第一个杯子里的水就独立的增加了，后续向第二第三个杯子里转移水的时候，前一个杯子里的水会减少，后一个杯子里的水会增加。</p>        </div>      </div>    </div></li><li><p>符号与账户类型对应</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-2871e189" role="button" aria-expanded="false" aria-controls="collapse-2871e189">        <div class="fold-arrow">▶</div>解释      </div>      <div class="fold-collapse collapse" id="collapse-2871e189">        <div class="fold-content">          <p><u>账户本身的CD代表了账户的基本属性——表达资产还是负债</u>。<br>那么对应的，如果我是一个负债账户C，此时我又额外背上了一笔贷款，显然我在这个账户上应该使用加法，而不是减法。<br>同样，如果我还清了一笔债务D，那么我应该使用减法，而不是加法。</p>        </div>      </div>    </div></li></ul><hr><h3 id="三、账户的功能">三、账户的功能</h3><p>现在我们可以尝试理解，为什么我们会定义这么多账户了，每个账户又有什么功能。<br>主要考虑以下两个方面：</p><h4 id="账户的属性-——-资产还是负债">账户的属性 —— 资产还是负债?</h4><p>这一步比较复杂，说起来也比较抽象，更像是一个逻辑题 / 文字游戏。我个人认为，单个账户本身的属性是什么都不重要，重要的是账户之间的关系。</p><p>比如，我用 0 / 1 来标注账户属性显然是完全可以的，关键点在于当前账户的对手账户必须是我的属性的对立面。</p><p>例如，商户的余额账户，显然和平台的备付金账户是对立的，因为商户的余额账户是平台的负债，而备付金账户是平台的资产。那么如果我用 1 标注了其中一者，那么另一个账户就必须用 0 标注。</p><p>然后我们在&quot;符合逻辑&quot;的基础上，可以根据实际情况来定义账户的属性。比如前面说了，商户的余额账户，显然是平台的负债，我们就给它赋予 C 的属性，然后给备付金账户赋予 D 的属性。</p><hr><h4 id="账户的功能-——-用途是什么">账户的功能 —— 用途是什么?</h4><p>如果我们直接去探究某一个具体账户的功能，可能会感觉有些头疼。因此我们需要转换一下思路：<br>当我们站在技术的视角上审视这个问题，可能会更简单一些。作为平台，我们显然需要对安全性和健壮性负责，避免出现任何资金的误差导致资金的亏损和信誉的下降。</p><p>因此，我们可能会首先归纳出，外部事件的种类和功能，然后选取必要的事件进行消费，同时构建其状态机 —— 形成一个事件驱动的模型。<br>那么每个账户的功能就是在这个状态机中的一个节点，我们需要在这个节点上完成一些操作，然后将状态转移到下一个节点。</p><p>举例来说，上述记账过程中，最抽象的账户是「C 网关过渡户」，这看起来就很 Hack，不像是金融领域的术语和模型。但是如果我们站在状态机的视角来观察，你会发现它的功能其实是很明确的：帮助我们消费「支付成功」这个事件，也就是说，如果「C 网关过渡户」里面的负债过多，那显然意味着外部平台的资金没有及时完成支付，我们需要联系对应的平台进行处理。</p><p>类似的，如果我们的「D 应收应清算」里面的头寸过多，那么显然意味着外部平台比如银行没有及时的把资金转入我们的平台账户中，钱还卡在银行那，我们此时应该及时联系银行进行处理。</p><blockquote><p>上述没有及时结算的状态，在金融领域往往被称为「风险敞口」<br>这个敞口需要我们及时的进行处理，处理的过程往往被称为「头寸管理(Position Management)」或者「平盘」<br>如果平台不及时的进行平盘，那么显然当用户大量提现的时候，平台就会出现资金链断裂的情况，导致资金的亏损和信誉的下降。</p></blockquote><br>为了方便理解以上陈述，我们做出一个假设：银行渠道扣款和支付成功是一回事，于是可以剔除「C 网关过渡户」进行简化，表格也就变成了如下样貌：<table><thead><tr><th>事件</th><th>D 应收待清算</th><th>C 商户待结算</th><th>D 应收应清算</th><th>D 备付金头寸</th><th>C 商户余额户</th></tr></thead><tbody><tr><td>渠道扣款成功</td><td>D + 5</td><td>C + 5</td><td></td><td></td><td></td></tr><tr><td>网联清分完成(完成明细对账)</td><td>C - 5</td><td></td><td>D + 5</td><td></td><td></td></tr><tr><td>资金到账(完成资金对账)</td><td></td><td></td><td>C - 5</td><td>D + 5</td><td></td></tr><tr><td>结算完成</td><td></td><td>D - 5</td><td></td><td></td><td>C + 5</td></tr></tbody></table><p>明细对账？我们也不要了！钱收到了就行！</p><table><thead><tr><th>事件</th><th>D 应收待清算</th><th>C 商户待结算</th><th>D 备付金头寸</th><th>C 商户余额户</th></tr></thead><tbody><tr><td>渠道扣款成功</td><td>D + 5</td><td>C + 5</td><td></td><td></td></tr><tr><td>资金到账(完成资金对账)</td><td>C - 5</td><td></td><td>D + 5</td><td></td></tr><tr><td>结算完成</td><td></td><td>D - 5</td><td></td><td>C + 5</td></tr></tbody></table><p>再简化就不礼貌了，也不现实了，但我们可以让它变得更抽象，更明显的表达状态机的思想：</p><table><thead><tr><th>Events</th><th>D Account1</th><th>C Account2</th><th>D Position</th><th>C Merchant</th></tr></thead><tbody><tr><td>Init Event</td><td>D + 5</td><td>C + 5</td><td></td><td></td></tr><tr><td>Processing Event</td><td>C - 5</td><td></td><td>D + 5</td><td></td></tr><tr><td>Final Event</td><td></td><td>D - 5</td><td></td><td>C + 5</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>chores</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Finance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chores</title>
    <link href="/chores/chores/"/>
    <url>/chores/chores/</url>
    
    <content type="html"><![CDATA[<h2 id="Stories">Stories</h2><h3 id="Donate-a-laptop-for-a-child-in-Bangladesh-2024-12-13">Donate a laptop for a child in Bangladesh - 2024.12.13</h3><p>I’ve been using <code>NeoVim</code> as my primary code editor for 3 years, and I found a plug called <code>markview.nvim</code> in the first half of 2024.</p><p>This plug is a markdown previewer, and it’s very convenient for me to preview the markdown file I’m editing in real-time.</p><blockquote><p>Actually, this article is written in markdown, and I’m exactly using <code>markview.nvim</code> to edit it.</p></blockquote><p>Recently, I found the author of this plugin is a child from Bangladesh, and he completed all the development with his phone…</p><p>In hence, someone suggested that we can donate a laptop to him.</p><p><strong>See:</strong></p><ul><li><a href="https://www.reddit.com/r/neovim/comments/1h7vhmg/bro_been_developing_his_2k_star_plugin_on_a/">Bro been developing his 2k star plugin on a freaking touch phone 🤯🤯🤯</a></li><li><a href="https://github.com/OXY2DEV/markview.nvim/issues/218">Thinkpad GoFundMe</a></li><li><a href="https://www.reddit.com/r/neovim/comments/1hb5szp/please_help_me_raise_funds_for_a_laptop/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button">Please help me raise funds for a laptop</a></li><li><a href="https://hcb.hackclub.com/oxy2dev-laptop/transactions">Transparent ledger of donations</a></li></ul><p><strong>Community’s response:</strong><br><img src="/img/chores/donations_for_the_markview_author.jpg" alt="Donations in 3 days"></p><p><img src="/img/chores/my_comment_for_markview_author.jpg" alt="My Comment"></p><p><strong>markview.nvim</strong></p><p><img src="/img/chores/without_markview.jpg" alt="Without markview.nvim"></p><p><img src="/img/chores/with_markview.jpg" alt="With markview.nvim"></p><p>What a touching and inspiring story!</p>]]></content>
    
    
    <categories>
      
      <category>chores</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>「胡思乱想」：马克思的货币与神造的 BTC</title>
    <link href="/imagination/gods_currency/"/>
    <url>/imagination/gods_currency/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果神造出了一种像 BTC 一样的东西, 它会成为货币吗？</p></blockquote><h2 id="神造的货币">神造的货币</h2><p>神造的货币是什么样子？我们以 BTC 的形态给它再赋予上神的特性，并给它起名为 <u><strong>goin</strong></u>：</p><ul><li>总量固定</li><li>可以无限微分</li><li>社会共识同一使用</li><li>余额无法篡改</li><li>神替每一个人保管账户</li></ul><p>比如，我用 1 <u><strong>goin</strong></u> 买了一杯咖啡，神会在我的账户上扣除 1 <u><strong>goin</strong></u>，然后在咖啡店的账户上增加 1 <u><strong>goin</strong></u>。<br>这个过程是不可逆的，因为神的账本是不可篡改的。</p><h2 id="能成为货币吗？">能成为货币吗？</h2><p>想象这样一种情况：</p><p>世界上只有 2 个人，这两个人加起来一天可以造 2 个人量的水以及 2 个人量的饭，除此之外他们没有别的产出和需求。<br>此时神设定这个世界上一共有 4 个 <u><strong>goin</strong></u>，每个 <u><strong>goin</strong></u> 可以换取一份水或饭。</p><p>假如 A 包揽了 4 个活，B 什么都不干，但是初始情况下，B 毫不费力地占有了全部的 4 个 <u><strong>goin</strong></u>。</p><p>此时 A 是不会接受 B 用 <u><strong>goin</strong></u> 来与他交换水或者饭的，因为他知道 B 没有劳动，所以 B 的 <u><strong>goin</strong></u> 是不值钱的。</p><p>同理 B 会发现，他的 <u><strong>goin</strong></u> 一文不值，因为他的 goin 无法换到任何东西。</p><p><u>所以问题的关键在于 <strong>goin</strong> 的分配。</u></p><p>具体来说，神会在第一天的劳动结束后，也就是 A 造出 2 个人的水，B 造出 2 个人的饭之后，将 4 个 <u><strong>goin</strong></u> 平均分配给他们，于是 A 和 B 各自拥有 2 个 <u><strong>goin</strong></u>。</p><p>换句话来说，如果 A 包揽了所有的活，那么 A 就会拥有全部的 <u><strong>goin</strong></u>，而 B 什么都得不到。此时 A 的 <u><strong>goin</strong></u> 当然也没有什么交换价值，因为他的 <u><strong>goin</strong></u> 无法换到任何东西，因为 B 没有产出。<br>当然了，A 可以在第二天选择啥也不干，由 B 包揽所有的活，A 就可以用他的 <u><strong>goin</strong></u> 来换取水和饭了。</p><p>这还不够，如果 A 和 B 之间稳定的分工合作，两人各自稳定的持有 2 个 <u><strong>goin</strong></u>，让我们假设在这个情况下，冒出来了一个新的人 C，C 也需要水和饭，但是他没有 <u><strong>goin</strong></u>。</p><p>于是 C 在初始情况下，需要自己去劳动，然后用自己的劳动满足自己的需求，或者干多余的活来换取 A 和 B 的 <u><strong>goin</strong></u>。<br>比如 C 出现后的 Day 1 结尾：</p><table><thead><tr><th>人</th><th>水</th><th>饭</th><th>goin</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>0</td><td>2</td></tr><tr><td>B</td><td>0</td><td>2</td><td>2</td></tr><tr><td>C</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>Day 2 的时候，A 和 B 各自想偷懒，C 就趁机多干活，用多余的物资换取 A 和 B 手中的 <u><strong>goin</strong></u>。</p><table><thead><tr><th>人</th><th>水</th><th>饭</th><th>goin</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>0</td><td>2-x</td></tr><tr><td>B</td><td>0</td><td>1</td><td>2-x</td></tr><tr><td>C</td><td>2</td><td>2</td><td>2x</td></tr></tbody></table><p>x 是多少呢？是 4/6，也就是 0.66666… 个 <u><strong>goin</strong></u>。因为我们说过 <u><strong>goin</strong></u> 的总量永远都是 4 个，而且是可以无限微分的，此时世界上每天会产出 3 个人的水和饭，一共 6 份，所以每个 <u><strong>goin</strong></u> 的价值就是 4/6。<br>同理，如果有人想一劳永逸的一天产出非常多的水，那么购买一份水的价格也会因为分母的增加而降低。用极限的思维来说，水一天可以产出无限多，那么水的价格就会无限接近于 0。</p><blockquote><p>有人可能会疑惑，我干了这么多活，为啥每一份的水价格还降低了？关于这一点我们不深入讨论，可以参考马克思的《政治经济学批判》，用一个简单的原理解释就是：既然你一天能产出无限多的水，那么说明产出一份水耗费你的劳动量就无限接近于 0。此时，x 实际上也不会无限接近于 0，因为即便你产出了无穷多的水，每一份水也不可能以和饭相同的价值在市场上流通，这主要不是因为水的需求是有限的，而是因为分母的 6 并不是在指代商品的个数总量，而是劳动量，因此 6 为分母指的是三个人一天的劳动量为 6，而不是说一共有 6 份商品，否则一碗饭当中还有非常多的米呢。因此如果你一天能产出无限多的水，这无限多的水包含的劳动量并不是无限的，无非就是两碗饭的劳动量罢了，因此此时的 x 也不会无限接近于 0。</p></blockquote><p>因此这种分配其实就是一种缩放，是一个 <u><strong>goin</strong></u> 对于资源总量（或者说商品 / 劳动）的缩放，之所以称之为缩放，是因为 <u><strong>goin</strong></u> 的总量是固定的，而资源总量在某一固定时刻也是固定的。</p><p>而这个缩放的过程必须由神来替人们精准的初始化，否则就会出现上面的情况（<u><strong>goin</strong></u> 没有价值）。并且神在初始化分配完之后，还需要继续发光发热，也就是指导人们进行交易时这个商品的价格 x 是多少, 当然神也可以不指导，让市场无形的大手来替他干这个活。</p><p>那么此时，你会发现，这个 <u><strong>goin</strong></u> 其实与马克思的货币几乎一致了，也就是&quot;货币是商品，商品的价值是劳动量&quot;。</p><p>不同的地方在于，马克思的货币是由人类社会共同决定的，是人的运动最终将一种商品推举出来形成了货币，于是具有其一定的特点和性质。</p><p>而 <u><strong>goin</strong></u> 是由神来决定的，神是那么的公平和万能，可以为你实现精准的缩放和无法篡改的余额，于是省略了商品货币的一些特性也在情理之中。</p><h2 id="最后的胡思乱想">最后的胡思乱想</h2><p>现代的货币体系，已经不再是马克思的商品货币了，而是一种信用体系下的货币。</p><p>于是乎，信用好或者强大的国家可以&quot;肆无忌惮&quot;的发行货币，也就是印钱，并且全球市场仍会为其买单，而信用差的国家一旦效仿则会被市场惩罚 —— 比如津巴布韦。</p><p>如何理解这种货币体系呢？</p><p>个人认为，结合马克思的商品货币来看，可以理解为：</p><ul><li>马克思的商品货币：我有一些商品，我用它来和你交换你的商品。</li><li>现代的信用货币：我有一些商品兑换券，我用它来和你交换你的商品，你乐意接受，是因为你相信我真的有商品供你兑换，（即便事实上，我此时并没有那些商品，但未来我可能会造出来的）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>imagination</category>
      
    </categories>
    
    
    <tags>
      
      <tag>货币</tag>
      
      <tag>Marx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一种基于数据库的分布式锁设计</title>
    <link href="/tech/simple_db_lock/"/>
    <url>/tech/simple_db_lock/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在并发场景中，我们经常使用锁来解决数据的共享问题，但语言标准库中的锁往往只能应用于单机的场景，因为多实例部署的场景下，一个实例并不能获取到另一个实例内存中构建的锁。</p></blockquote><h2 id="分布式锁">分布式锁</h2><p>简单来说，分布式锁一般会额外引入一个“中心化的节点”，让所有服务实例都向它请求锁，这样一来实例与实例之间就能通过这个中心化的节点来进行通信了。</p><p>上面提到的“中心化节点”的选型有很多种选择，在业内比较常见的有 Redis / ZooKeeper / 数据库等，本文介绍一种基于数据库的分布式锁设计，数据库本身的选型没有标准的答案，理论上来说只要支持唯一索引（Unique Index）的数据库都符合选型标准，例如常见的 MySQL 和 MongoDB。</p><p>为什么需要唯一索引？因为支持了唯一索引的数据库都具备以下的能力（不考虑硬件故障等意外情况）：</p><p><u><strong>多个并发请求同时向数据库插入唯一键相同的记录时，只有一个请求能够成功。</strong></u>并且失败的请求往往能够识别出失败的原因是来自竞争，例如 <code>Duplicate Key Error</code>。</p><p>可以看到，唯一索引的表现和语言标准库中的锁非常一致。</p><h2 id="数据库表结构设计">数据库表结构设计</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PLock <span class="hljs-keyword">struct</span> &#123;ID       <span class="hljs-type">string</span> <span class="hljs-comment">// 数据库主键</span>Key      <span class="hljs-type">string</span> <span class="hljs-comment">// 锁定的 key, 与 BizType 组成 uniq key</span>Val      <span class="hljs-type">string</span> <span class="hljs-comment">// 锁的 value, 可以是业务相关的自定义数据</span>BizType  <span class="hljs-type">string</span> <span class="hljs-comment">// 锁的类型, 与 Key 组成 uniq key</span>ExpireAt <span class="hljs-type">int64</span>  <span class="hljs-comment">// 过期时间</span>&#125;</code></pre></div><p>这里为了阅读体验，我们将数据库表结构设计的尽量精简，实际情况中可以根据业务需要自行修改表结构。</p><p>上面可以看出，我们使用 <code>BizType</code> 和 <code>Key</code> 组成了一个唯一索引 <code>(BizType, Key)</code>，然后添加了两个额外的字段 <code>Val</code> / <code>ExpireAt</code> 来存储锁的额外信息。</p><h2 id="加解锁流程设计">加解锁流程设计</h2><p>有了基本的表结构后，我们接下来需要考虑如何基于这张表来实现加解锁的流程。我们在开始前不妨先思考清楚我们想要实现的功能是什么，从业务的角度出发不难得到下面的流程图：</p><pre><code class=" mermaid">flowchart LRdb(Database.PLock)p1(Proc1)p2(Proc2)p3(Proc3)p1 --Lock---&gt; dbp2 --Lock---&gt; dbp3 --Lock---&gt; dbdb --Result---&gt; res(Proc3 Wins!!!)res --&gt; do1(Proc1 quit)res --&gt; do2(Proc2 quit)res --&gt; do3(Proc3 continue)do3 --&gt; ok(job success)do3 --&gt; err(job failed)ok --&gt; e(end)err --&gt; ee --Unlock--&gt; db</code></pre><p>可以看到，我们至少需要两个接口：<code>Lock</code> / <code>Unlock</code>，同时，为了实现一个比较完备的组件，我们在运行过程中可能还需要获取一些别的信息，最终我们将一个“选举器”整理为如下的接口：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Elect, 选举器接口, 确保多实例部署情况下在同一时刻, 同一 key 只有一个实例在运行对应任务</span><span class="hljs-keyword">type</span> Elect <span class="hljs-keyword">interface</span> &#123;<span class="hljs-comment">// Lock, 锁定 key 并运行 cb, 通过 cb 传入的 context 可以用于监听任务的取消信号</span><span class="hljs-comment">// 因此 cb 内部实现应当处理 ctx.Done() 信号, 以便在任务取消时及时退出</span><span class="hljs-comment">// 仅当锁定成功时, 才会运行 cb 并返回 true</span><span class="hljs-comment">// 其余情况均返回 false, 如有错误, 则返回错误</span>Lock(key <span class="hljs-type">string</span>, cb <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context)</span></span>) (ok <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>)<span class="hljs-comment">// Unlock, 解锁 key 并取消运行中的任务</span>Unlock(key <span class="hljs-type">string</span>) (err <span class="hljs-type">error</span>)<span class="hljs-comment">// HoldingKeys, 返回当前持有的所有 key</span>HoldingKeys() []<span class="hljs-type">string</span><span class="hljs-comment">// LockedKeys, 返回当前被锁定的所有 key</span><span class="hljs-comment">// 注意和 HoldingKeys 的区别, HoldingKeys 只返回当前实例持有的 key,</span><span class="hljs-comment">// 而 LockedKeys 返回所有实例持有的 key, 一般从数据库中查询得知</span>LockedKeys() ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>)<span class="hljs-comment">// Close 优雅退出</span>Close()&#125;</code></pre></div><p>接口定义的方法也比较简洁，需要实现的具体功能见代码的注释即可。</p><p>但是我们不难发现，接口内定义的方法似乎没有覆盖到 <code>PLock</code> 表中全部的字段，尤其是唯一键中的 <code>BizType</code>—— 这里稍微解释一下，我个人的编码习惯会将其放入到实现类中去，这里给出一个基于 MongoDB 的实现：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// mongoElect, 基于 MongoDB 的 Elect 实现, 字段含义见 MongoElectConfig</span><span class="hljs-keyword">type</span> mongoElect <span class="hljs-keyword">struct</span> &#123;bizType                          mongodb.PLockBizTypeholder                           <span class="hljs-type">string</span>holdDuration                     time.DurationrefreshInterval, refreshDuration time.Durationmu           *sync.RWMutexrunningTasks <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*lockedTask <span class="hljs-comment">// key: lock key, value: locked task</span>logger *logrus.Entry&#125;<span class="hljs-keyword">type</span> MongoElectConfig <span class="hljs-keyword">struct</span> &#123;<span class="hljs-comment">// BizType 业务类型</span>BizType mongodb.PLockBizType<span class="hljs-comment">// Holder 锁的持有者名称, 例如: 服务实例 ID</span>Holder <span class="hljs-type">string</span><span class="hljs-comment">// HoldDuration 初始锁的持有时间, 例如: 任务执行时间</span>HoldDuration time.Duration<span class="hljs-comment">// RefreshInterval 锁的续期间隔, 例如: 任务执行时间的 1/3</span>RefreshInterval time.Duration<span class="hljs-comment">// RefreshDuration 锁的续期时间(以 now 为标准), 至少为 RefreshInterval 的 2 倍</span>RefreshDuration time.Duration&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMongoElect</span><span class="hljs-params">(conf *MongoElectConfig)</span></span> Elect &#123;<span class="hljs-keyword">if</span> conf == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;conf must not be nil&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.BizType == <span class="hljs-string">&quot;&quot;</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;bizType must not be empty&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.Holder == <span class="hljs-string">&quot;&quot;</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;holder must not be empty&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.HoldDuration &lt;= <span class="hljs-number">0</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;holdDuration must be positive&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.RefreshInterval &lt;= <span class="hljs-number">0</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;refreshInterval must be positive&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.RefreshDuration &lt;= <span class="hljs-number">0</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;refreshDuration must be positive&quot;</span>)&#125;<span class="hljs-keyword">if</span> conf.RefreshDuration &lt; conf.RefreshInterval*<span class="hljs-number">2</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;refreshDuration must be greater than 2 * refreshInterval&quot;</span>)&#125;<span class="hljs-keyword">return</span> &amp;mongoElect&#123;bizType:         conf.BizType,holder:          conf.Holder,holdDuration:    conf.HoldDuration,refreshInterval: conf.RefreshInterval,refreshDuration: conf.RefreshDuration,mu:              <span class="hljs-built_in">new</span>(sync.RWMutex),runningTasks:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*lockedTask),logger: logrus.WithFields(logrus.Fields&#123;<span class="hljs-string">&quot;bizType&quot;</span>:      conf.BizType,<span class="hljs-string">&quot;holder&quot;</span>:       conf.Holder,<span class="hljs-string">&quot;holdDuration&quot;</span>: conf.HoldDuration,<span class="hljs-string">&quot;refresh&quot;</span>:      fmt.Sprintf(<span class="hljs-string">&quot;%v/%v&quot;</span>, conf.RefreshInterval, conf.RefreshDuration),<span class="hljs-string">&quot;module&quot;</span>:       <span class="hljs-string">&quot;mongo_elect&quot;</span>,&#125;),&#125;&#125;</code></pre></div><p>上面这个实现类实现的具体功能是：加锁时，初始设置好锁的过期时间为 <code>HoldDuration</code>，如果加锁成功，则开始运行任务，运行过程中每经过 <code>RefreshInterval</code> 的间隔，就把锁的过期时间延长为 <code>time.Now + RefreshDuration</code>，直到任务结束为止。</p><p>通过这种设计，我们可以“大致”保证<u><strong>在任务完成之前锁不会过期</strong></u>，因为我们会不断的进行 refresh 操作来延长锁的持有时间。当然如果想要让程序健壮地达到这个目标，我们需要引入更多的复杂性，仅仅依赖一个结构体的字段定义是不足以实现的。</p><p>接下来，我们开始实现加解锁的流程（接口中的其他方法比较简单，略过）：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> Lock(key <span class="hljs-type">string</span>, cb <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context.Context)</span></span>) (ok <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;e.mu.Lock()<span class="hljs-keyword">defer</span> e.mu.Unlock()<span class="hljs-comment">// 锁定成功后, 运行任务</span><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">if</span> ok &#123;e.logger.Infof(<span class="hljs-string">&quot;[Lock] elect success, key: %v&quot;</span>, key)task := e.runningTasks[key]<span class="hljs-keyword">if</span> task == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;[Lock] task not found after lock&quot;</span>)&#125;e.runTask(task, cb)&#125;&#125;()<span class="hljs-comment">// 预查询目标锁</span>lock, err := mongodb.PLockDAL.QueryByUniqKey(key, e.bizType)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;e.logger.WithError(err).Error(<span class="hljs-string">&quot;[Lock] elect failed with query error&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 目标锁不存在, 尝试创建</span><span class="hljs-keyword">if</span> lock == <span class="hljs-literal">nil</span> &#123;isDup, err := e.createLock(key)<span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span> &amp;&amp; !isDup, err&#125;<span class="hljs-comment">// 目标锁存在, 但已过期, 精确删除该锁后再尝试创建</span><span class="hljs-keyword">if</span> lock.ExpireAt &lt; common.Millisec(time.Now()) &#123;e.logger.Warnf(<span class="hljs-string">&quot;[Lock] elect for an expired lock, try delete it, key: %v, lock: %v&quot;</span>, key, lock)<span class="hljs-keyword">if</span> err = mongodb.PLockDAL.DeleteByID(lock.ID); err != <span class="hljs-literal">nil</span> &#123;e.logger.WithError(err).Error(<span class="hljs-string">&quot;[Lock] elect failed with delete error&quot;</span>)<span class="hljs-keyword">return</span>&#125;isDup, err := e.createLock(key)<span class="hljs-keyword">return</span> err == <span class="hljs-literal">nil</span> &amp;&amp; !isDup, err&#125;<span class="hljs-comment">// 锁是自己创建的, 报错提示</span><span class="hljs-keyword">if</span> lock.Value == e.holder &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, fmt.Errorf(<span class="hljs-string">&quot;lock of %s already owned&quot;</span>, key)&#125;<span class="hljs-comment">// 锁不是自己创建的, 返回失败</span>e.logger.WithFields(logrus.Fields&#123;<span class="hljs-string">&quot;key&quot;</span>:  key,<span class="hljs-string">&quot;lock&quot;</span>: lock,&#125;).Warn(<span class="hljs-string">&quot;[Lock] elect failed for already locked&quot;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> createLock(key <span class="hljs-type">string</span>) (dup <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>) &#123;expireAt := common.Millisec(time.Now().Add(e.holdDuration))id, isDup, err := mongodb.PLockDAL.Create(key, e.holder, e.bizType, expireAt)e.logger.Infof(<span class="hljs-string">&quot;[createLock] elect result, key: %v, id: %v, err: %v&quot;</span>, key, id, err)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err&#125;<span class="hljs-keyword">if</span> isDup &#123;e.logger.Warnf(<span class="hljs-string">&quot;[createLock] elect failed for already locked, key: %v&quot;</span>, key)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span>&#125;<span class="hljs-keyword">if</span> id == <span class="hljs-literal">nil</span> &#123;err = fmt.Errorf(<span class="hljs-string">&quot;[createLock] elect failed for missing lock id, key: %v&quot;</span>, key)e.logger.WithError(err).Error(<span class="hljs-string">&quot;Unknown error&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 成功创建锁, 记录任务</span>task := defaultLockedTask(key)task.lockID = *ide.runningTasks[key] = task<span class="hljs-keyword">return</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> runTask(task *lockedTask, cb <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context.Context)</span></span>) &#123;refreshFn := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;ticker := time.NewTicker(e.refreshInterval)lockID := task.lockID.(primitive.ObjectID)logger := e.logger.WithField(<span class="hljs-string">&quot;lockID&quot;</span>, lockID.String())<span class="hljs-keyword">for</span> &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-task.canceled():e.logger.Info(<span class="hljs-string">&quot;[refreshFn] refresh lock canceled&quot;</span>)ticker.Stop()e.safeCancelTask(task)<span class="hljs-keyword">return</span><span class="hljs-keyword">case</span> &lt;-ticker.C:<span class="hljs-comment">// 查询锁</span><span class="hljs-keyword">var</span> lock *mongodb.PLock<span class="hljs-keyword">for</span> &#123;<span class="hljs-keyword">var</span> err <span class="hljs-type">error</span>lock, err = mongodb.PLockDAL.QueryByID(lockID)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;logger.WithError(err).Error(<span class="hljs-string">&quot;[refreshFn] refresh lock failed with query error&quot;</span>)time.Sleep(time.Second)<span class="hljs-keyword">continue</span>&#125;<span class="hljs-keyword">break</span>&#125;nowTs := common.Millisec(time.Now())<span class="hljs-comment">// 锁不存在, 异常情况, 直接退出</span><span class="hljs-comment">// 或者续期不及时, 已被其他实例抢占</span><span class="hljs-keyword">if</span> lock == <span class="hljs-literal">nil</span> || lock.ExpireAt &lt; nowTs &#123;logger.Errorf(<span class="hljs-string">&quot;[refreshFn] refresh lock failed for lock not found, maybe released&quot;</span>)e.safeCancelTask(task)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 正常续期</span>expireAt := common.Millisec(time.Now().Add(e.refreshDuration))e.logger.Infof(<span class="hljs-string">&quot;[refreshFn] refresh lock start, new expireAt: %v&quot;</span>, expireAt)<span class="hljs-keyword">if</span> err := mongodb.PLockDAL.UpdateExpireAtByID(lockID, expireAt); err != <span class="hljs-literal">nil</span> &#123;logger.WithError(err).Error(<span class="hljs-string">&quot;[refreshFn] refresh lock failed with update error&quot;</span>)<span class="hljs-comment">// 如果续期失败, 且距离过期时间不足 2 倍的 refresh interval, 则直接退出</span><span class="hljs-comment">// 否则可能导致锁过期时, 任务还在执行</span><span class="hljs-comment">// 其余情况暂时不管, 会在下次续期时重试</span><span class="hljs-keyword">if</span> lock.ExpireAt-nowTs &lt; e.refreshInterval.Milliseconds()*<span class="hljs-number">2</span> &#123;logger.Error(<span class="hljs-string">&quot;[refreshFn] refresh lock failed for too late&quot;</span>)e.safeCancelTask(task)<span class="hljs-keyword">return</span>&#125;&#125;e.logger.Infof(<span class="hljs-string">&quot;[refreshFn] refresh lock success, new expireAt: %v&quot;</span>, expireAt)&#125;&#125;&#125;task.run(cb, refreshFn)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> safeCancelTask(task *lockedTask) &#123;e.mu.Lock()<span class="hljs-keyword">defer</span> e.mu.Unlock()e.cancelTask(task)&#125;<span class="hljs-comment">// WARN: 该方法需要在持有锁的情况下调用</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> cancelTask(task *lockedTask) &#123;<span class="hljs-comment">// 先取消任务</span>task.cancelAndWait()lockID := task.lockID.(primitive.ObjectID)<span class="hljs-comment">// 再删除 db 锁, 重试直到成功</span>common.WithRetry(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<span class="hljs-keyword">if</span> err := mongodb.PLockDAL.DeleteByID(lockID); err != <span class="hljs-literal">nil</span> &#123;e.logger.WithError(err).Error(<span class="hljs-string">&quot;[cancelTask] cancel task failed with delete error&quot;</span>)<span class="hljs-keyword">return</span> err&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;, <span class="hljs-number">-1</span>, time.Second)<span class="hljs-comment">// 最后删除任务</span><span class="hljs-built_in">delete</span>(e.runningTasks, task.key())&#125;</code></pre></div><p>上面的代码比较长，我们逐步进行解释（注，本文将省略数据库层面的代码）：</p><ol><li>加锁时，首先查询想要锁的唯一键是否存在<ol><li>如果不存在，则直接进行加锁即可（可能会由于竞争而加锁失败）</li><li>如果存在，到 2</li></ol></li><li>目标锁存在，进一步检查其是否过期<ol><li>如果过期了，则通过 id 字段精确删除这条锁记录后，再尝试创建</li><li>如果没有过期，是一把正常的锁，到 3</li></ol></li><li>目标锁正常，进一步检查这把锁的持有人是谁<ol><li>如果是自己，则报错，这里我们暂不支持可重入</li><li>如果不是自己，也报错，说明加锁失败的原因</li></ol></li></ol><p>最后，我们回到开头就写好的 <code>defer</code> 函数，如果最终加锁的结果是成功的，则开始运行 <code>cb</code> 函数，上面代码中使用了一个封装好的 <code>lockedTask</code> 类型，具体实现我们放在下文展示，这里先继续关注运行的流程。</p><hr><p>可以看到，在 <code>runTask</code> 函数中，我们定义了一个 <code>refreshFn</code> 用于刷新锁的有效期，然后将这个 <code>refreshFn</code> 和业务的 <code>cb</code> 一起运行了，这里我们聚焦到刷新的逻辑上：</p><ol><li><p>监听 task 的退出信号</p><ol><li>如果退出了，说明 task 以及不再运行了，直接返回即可（当然我们冗余调用了一次 <code>safeCancelTask</code>，目的主要是将 task 从结构体维护的 <code>runningTask</code> 中清理出去）</li><li>如果没有退出，则到 2</li></ol></li><li><p>监听 ticker</p><p>前面我们提到了，我们的设计是每经过 A 时间，就续期 B 时间，所以依赖一个 ticker 来实现 A 的逻辑。</p><p>续期的逻辑如下：</p><p>a. 查询持有的锁记录，不存在或过期则直接调用 <code>safeCancelTask</code> 退出。（事实上，这种情况理论上不应存在，除非前置的查询由于 db 的问题不断重试，但为了以防万一还是写上了这段兜底的代码，具体原因见 b）</p><p>b. 锁存在且未过期的情况下，我们调用 Update 函数进行续期，失败时如下处理：</p><p>​ b.1. 如果 Update 失败，且锁的过期时间小于当前时间 + 2 倍的续期间隔，则直接中断</p><p>​ b.2. 否则暂时忽略，等待下一次续期重试</p><p>看到这里，我们应该能明白，为什么说续期时理论上不会发生锁记录不存在或锁过期的情况了，因为在续期过程中，即使续期的 Update 行为发生了错误，我们也会妥善的进行处理 —— 一旦发现锁临近过期，我们就会立即终止任务，防范于未然；如果锁过期时间较为久远，则容忍本次失败。</p></li></ol><hr><p>接下来看一看解锁的实现：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *mongoElect)</span></span> Unlock(key <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;e.mu.Lock()<span class="hljs-keyword">defer</span> e.mu.Unlock()task, ok := e.runningTasks[key]<span class="hljs-keyword">if</span> !ok &#123;<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;lock of %s not owned&quot;</span>, key)&#125;e.cancelTask(task)<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;</code></pre></div><p>有了加锁的底子，解锁实现起来就比较简单了，只需要调用 <code>cancelTask</code> 方法即可。</p><hr><p>附：lockedTask 具体实现</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> lockedTask <span class="hljs-keyword">struct</span> &#123;ctx    context.Contextcancel context.CancelFunclockKey <span class="hljs-type">string</span>lockID  anydoneCh  <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;runOnce *sync.Once&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">defaultLockedTask</span><span class="hljs-params">(key <span class="hljs-type">string</span>)</span></span> *lockedTask &#123;ctx, cancel := context.WithCancel(context.Background())<span class="hljs-keyword">return</span> &amp;lockedTask&#123;ctx:     ctx,cancel:  cancel,lockKey: key,doneCh:  <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),runOnce: <span class="hljs-built_in">new</span>(sync.Once),&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lt *lockedTask)</span></span> run(cb <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context.Context)</span></span>, refresh <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;lt.runOnce.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">// 后台运行任务</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;cb(lt.ctx)<span class="hljs-built_in">close</span>(lt.doneCh)lt.cancel()log.WithFields(logrus.Fields&#123;<span class="hljs-string">&quot;lockKey&quot;</span>: lt.lockKey,<span class="hljs-string">&quot;lockID&quot;</span>:  lt.lockID,&#125;).Info(<span class="hljs-string">&quot;locked task done&quot;</span>)&#125;()<span class="hljs-comment">// 后台刷新锁有效期</span><span class="hljs-keyword">go</span> refresh()&#125;)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lt *lockedTask)</span></span> cancelAndWait() &#123;lt.cancel()&lt;-lt.doneCh&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lt *lockedTask)</span></span> canceled() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<span class="hljs-keyword">return</span> lt.ctx.Done()&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lt *lockedTask)</span></span> key() <span class="hljs-type">string</span> &#123;<span class="hljs-keyword">return</span> lt.lockKey&#125;</code></pre></div><p>不难看出，<code>lockedTask</code> 类型主要是封装了业务任务的执行流程，为其添加了基于 <code>context.Context</code> 的中断控制以及刷新锁的有效期的方法。</p><hr><p>最终我们得到的选举器的工作过程大致如下图所示：</p><p><img src="/img/simple_db_lock/p1.png" alt="流程图"></p><h2 id="结尾">结尾</h2><p>结束了吗？还没有，即使我们实现了一个 <code>Elect</code> 接口，我们仍需要考虑一个问题：调用方应该怎样合理的进行调用？</p><p>我在实际工作中遇到过这样的需求：一个服务的多实例同时启动后，均匀的让每个实例处理同一个类型的不同任务。比如说，这个服务需要订阅 100 个消息队列的 topic，我将部署 10 台实例，在他们启动后，让这 100 个订阅任务均匀的分配到这些实例上去。</p><p>此时，我们在应用层也有许多工作要做，例如：</p><ol><li>限制每个实例最多处理的任务数量，在本例中可以是 20 （此时允许有 5 台实例挂掉，剩下 5 台实例可以接管）。</li><li>启动异步的监控协程，监控有哪些任务没有实例在处理，一旦发现则尝试抢占对应任务的锁并接管。</li></ol><p>总而言之，本文实现了一个与业务无关的中间组件，目的是向大家展示分布式系统下复杂的情况以及我们可能的处理方式，希望能对读者有所启发。</p><p>如何将程序写得更为健壮一直是计算机领域内的一大难题，我们可以针对不同的场景对其需要的健壮性进行合理评估。对于很多不重要的场景而言，将代码实现得无比健壮也许是浪费时间的，例如，我也会在很多场景下简单地使用 redis 中的 <code>set nx ex</code> 指令来充当一个简单的分布式锁，但对于很多重要的场景而言（例如银行、电商），这种方式往往都是不可取的。</p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从「股市」App 看股市</title>
    <link href="/chores/analyze_stocks/"/>
    <url>/chores/analyze_stocks/</url>
    
    <content type="html"><![CDATA[<blockquote><p>从 Apple Stocks App （股市 App）开始，看懂一支股票。</p><p>注：本文不构成任何投资建议。</p></blockquote><h2 id="前言">前言</h2><p>作为一个程序员，尤其是金融交易相关的程序员，自己或多或少也会与“投资理财”打交道。目前我的日常生活中接触最多的理财产品就是基金，中国内陆市面上可以自由购买的基金的「标的」中，常见的无非是股票和债券两种（当然也有部分稳健的基金会投资于货币或其他标的）。即便是 FOF 类的基金也是如此，绕过中间的层层代理，最终在基金经理的运作下，我的钱会被用于购买股票、债券或是其他产品。</p><p>于我而言，甚至是于大多数人而言，基金最大的意义在于让专业的交易员来替我规划投资组合，避免“吊死在一棵树上”。而在市场上的一揽子基金中，我更倾向于购买 ETF 指数基金，这类基金的目标往往是追踪一个市场上的指数，例如新能源汽车行业的 ETF 指数基金的表现，往往与整个新能源汽车行业的公司股票表现相关。在这类基金中，基金经理的操作空间较小，往往由程序和算法来计算投资组合的比例分配，可以较好的体现一个行业的整体表现，一般不必担心人为因素所造成的偏差。</p><p>于是，作为普通的投资者——往往不具备看准一支股票的预言能力，我可以站在一个更为宏观的角度来选择我的投资方向，比如：“相比于互联网行业，我更看好新能源行业，同时我还看好白酒行业”，那么此时我就可以购买相关行业的指数基金来验证我的想法。相比之下，在“蔚小理和比亚迪”中选择我要购买的具体的股票，就显得较为困难了。</p><h2 id="进入正题">进入正题</h2><p>前面提到了一些简单的背景——看起来当我购买了行业的指数基金之后，我就可以放弃思考了，只要等着新一代的年轻人开始爱上喝茅台、开新能源汽车，我就可以大赚一笔！</p><p>知其然，还要知其所以然，既然我们投资的基金的标的基本是由股票构成，那么我们自然会意识到，占比较重的股票的涨跌，会直接影响到我们的基金价格。</p><p>好巧不巧，最近和一位好友闲聊时，他提到说他正准备开通一个美股的交易账号，我便询问他是想购买哪一支股票，他说他比较看好国内新能源车企中的「理想汽车」。顺势之下，我便打开了 MacBook 上的「股市」App，查看了理想汽车在美股的相关数据。</p><p><img src="/img/analyze-stocks/liauto.png" alt="Li Auto"></p><p>可以看到，除了股价的走势之外，「股市」App 的图表下方还有一系列相关的数据，这些数据代表了什么，我们又能从中获得怎样的信息？</p><h2 id="走势图与-K-Line">走势图与 K Line</h2><p>股市 App 中的“走势图” UI 较为简单，较为简单的反映了股价随着时间的变化曲线，从中我们能获取到的信息比较有限 —— 这是因为股市 App 本身并不是一个交易所 App，用户在这里并不能买卖股票，它的数据来源也注明了是 “yahoo! finance”，因此我们在该 App 上不能获取到详细的交易数据也是可以理解的。</p><p>与之对应的，我们可以看到在数据表中，有「今日开盘价」和「今日最高 / 低价」这几栏数据。实际上，联系上表中缺失的「今日收盘价」，我们可以根据这四维数据绘制出一个“小蜡烛”，将每天的小蜡烛都进行汇总，会得到大名鼎鼎的「K 线图」。</p><p>相反地，从一张已有的 K 线图中，我们可以反向地解读出这四维的数据，也就可以对某一天的交易情况做出一个合理的推测了。相关的信息可以参照 OANDA Lab 撰写的研究文章，该文章十分详细的阐述了这四维数据背后所对应的可能情况，这里就不做展开了：</p><p><a href="https://www.oanda.com/bvi-ft/lab-education/dictionary/k-charts/">K 线及其透露的市场秘密</a></p><h2 id="成交量和平均成交量">成交量和平均成交量</h2><p>「成交量」的定义比较简单，也就是它们的字面意思，代表了一定时间段内的成交量，股市 App 中的单位是“股数”，也就是成交了多少股的意思。</p><p>一般而言，股票的成交量越大，可以说它的流动性越好 —— 也就是说大家都愿意去买卖这支股票，这一点不难理解。从更深层上来说，参与买卖股票的人对股价的评价越冲突时，成交量就越大，因为当大家对股价的看法都比较一致时，也就更难产生交易的行为。</p><p>举例来说，如果持有特斯拉股票的人，都认为特斯拉的股价处于偏低的状态，日后还有较大的升值空间，那么大家就不太愿意在二级市场上抛售自己所持有的股票，会攥在手里等待升值。反之，如果市面上看空和看多的人有激烈的冲突，那么市场上买卖的人就多了起来，有的人急于抛售，害怕股价亏损给自己带来损失，剩下的人则乐意接盘，认为现在是个抄底的好机会。</p><p><u>值得注意的是，股市 App 中的「平均成交量」与金融行业中普遍使用的术语是不同的。</u></p><p>「平均成交量」的计算公式如下：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>平均成交量</mtext><mo>=</mo><mtext>成交量</mtext><mo>÷</mo><mtext>笔数</mtext></mrow><annotation encoding="application/x-tex">平均成交量 = 成交量 \div 笔数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">平均成交量</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">成交量</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">笔数</span></span></span></span></span></p><p>也就是说，平均成交量代表了每一笔交易平均成交了多少股。</p><p>而股市 App 中的「平均成交量」指的是过去一段时间内的「每日成交量」的平均数，也就是用来衡量过去一段时间中，每天大约交易了多少股，而不是指代每笔交易的平均成交额。</p><p>因此，综合来讲，这两个指标都有助于我们评估一支股票的流动性，更为详细的信息则无法获取到了。</p><h2 id="贝塔系数">贝塔系数</h2><p>贝塔系数是一种用来评估股票证券风险的工具，用通俗的话来说，贝塔系数反映的是当前股票与大盘之间的关联关系 —— 贝塔系数绝对值越大，大盘涨的时候，当前股票就涨的越多，反之亦然。</p><p>例如：</p><ol><li>当贝塔系数 = 1.1 时，大盘涨了 10 %，当前股票就会涨 11 %。</li><li>当贝塔系数 = 5.6 时，大盘跌了 10 %，当前股票就会跌 56 %。</li></ol><p>是不是感觉看起来有点像合约交易中的杠杆？从计算上来说确实如此，但这两者有着本质上的不同：</p><p>合约杠杆是用户在开始交易前<u>提前设置</u>好的，而贝塔系数则是根据历史数据<u>回过头计算得到</u>的。</p><p>接下来简单看一眼贝塔系数的计算公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>β</mi><mo>=</mo><mfrac><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><msub><mi>r</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow><msubsup><mi>σ</mi><mi>m</mi><mn>2</mn></msubsup></mfrac><mspace linebreak="newline"></mspace><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>a</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mtext>股票的收益</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>m</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mtext>市场的收益</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>C</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><msub><mi>r</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>m</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mtext>二者的协方差</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>σ</mi><mi>m</mi><mn>2</mn></msubsup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mtext>市场收益的方差</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\beta = \frac{Cov(r_a, r_m)}{\sigma_m^2}\\\begin{cases}r_a &amp;= 股票的收益\\r_m &amp;= 市场的收益\\Cov(r_a, r_m) &amp;= 二者的协方差\\\sigma_m^2 &amp;= 市场收益的方差\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.36em;vertical-align:-0.933em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.933em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord cjk_fallback">股票的收益</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord cjk_fallback">市场的收益</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord cjk_fallback">二者的协方差</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord cjk_fallback">市场收益的方差</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>协方差的值可以反映两个指标之间的相关性：</p><p>协方差为正数，则指标 A 增加📈时，指标 B 也有增加📈的趋势；</p><p>协方差为负数，则指标 A 增加📈时，指标 B 有减小📉的趋势；</p><p>协方差为 0 ，则两个指标之间的关联性不强。</p><p>方差则表明了数据的分散程度，方差越大数据越分散。</p></blockquote><p>公式表明，贝塔系数本身其实<u><strong>并不能表明股票和市场之间的直接联系</strong></u>，但可以帮助我们大致的判断一支股票在过去一段时间内的“股性”。</p><blockquote><p>从数学上来说，贝塔系数为 0 只能推导出“证券价格波动与市场价格波动无关”，而不能说明这个证券是没有风险的。但反过来说，如果一个证券没有风险，那么它的贝塔系数一定为 0。</p><p>但其实根据个人经验来说，我们一般在市场中交易的股票都能够使用贝塔系数来当作「股票和市场间的联系」看待，因为普通人交易的股票中的绝大部分都与市场情绪是强相关的。</p></blockquote><p>一般来说，熊市时我们可以选择贝塔系数低的股票来帮助我们抵御风险，牛市来临时我们可以选择贝塔系数高的股票来帮助我们放大收益。</p><h2 id="每股收益，越高越好！">每股收益，越高越好！</h2><p>每股收益的定义也比较简单：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mi>P</mi><mi>S</mi><mo>=</mo><mfrac><mtext>期末净利润</mtext><mtext>期末股份总数</mtext></mfrac></mrow><annotation encoding="application/x-tex">EPS = \frac{期末净利润}{期末股份总数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">EPS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">期末股份总数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">期末净利润</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>可以看到，每股收益越高，在市场中往往说明该公司的净利润越高（减少股份总数的情况比较少，这里暂不考虑）。</p><p>市场上往往使用 EPS 排名来区分优质股和垃圾股。</p><h2 id="市盈率是什么，越高越好？">市盈率是什么，越高越好？</h2><p>前面提到了每股收益 EPS 是越高越好的，那么对于市盈率 PE 是否也是这样呢？</p><p>先看市盈率 PE 的计算公式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>E</mi><mo>=</mo><mfrac><mtext>股价</mtext><mrow><mi>E</mi><mi>P</mi><mi>S</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">PE = \frac{股价}{EPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">PE</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">EPS</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>可以看到，EPS 的计算与前文提到的 EPS 是息息相关的。而我们前面又提到，EPS 是越高越好的，因为 EPS 越高往往说明公司的净利润越高，股票越优质。</p><p>那么 PE 是不是也是越高越好呢？通过公式我们可以看到，PE 越高往往说明股价越高，或是 EPS 越小。而这两种情况都不算是好消息 —— 我们既不希望在股价处于高点时买入，也不希望购入 EPS 很低的“垃圾股”。</p><p>举例来说，随着一家优秀公司的成长和发展，这家公司股票的 EPS 会不断增加，此时购入其股票的人也会越来越多，于是其股价也会不断上升，最终这家公司的市盈率 PE 会落在一个合理的区间中（分子和分母都在不断增大）。</p><p>但是只有一家公司的 PE 值，其参考价值往往不够大，最好的方式是<u><strong>在同行业中对不同公司的 PE 进行对比</strong></u>，例如对比五粮液和茅台两家公司的 PE 值，或是对比理想和比亚迪之间的 PE 值。通过这种对比我们可以大致的看出一家公司在行业中的股价是否“偏高”。</p><p>接下来我们将 EPS 带入公式，从另一个角度来理解市盈率：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>E</mi><mo>=</mo><mfrac><mtext>股价</mtext><mrow><mi>E</mi><mi>P</mi><mi>S</mi></mrow></mfrac><mo>=</mo><mfrac><mtext>股价</mtext><mfrac><mtext>期末净利润</mtext><mtext>期末股份总数</mtext></mfrac></mfrac><mo>=</mo><mfrac><mrow><mtext>股价</mtext><mo>⋅</mo><mtext>期末股份总数</mtext></mrow><mtext>期末净利润</mtext></mfrac><mo>≈</mo><mfrac><mtext>市值</mtext><mtext>期末净利润</mtext></mfrac></mrow><annotation encoding="application/x-tex">PE = \frac{股价}{EPS} = \frac{股价}{\frac{期末净利润}{期末股份总数}}= \frac{股价\cdot期末股份总数}{期末净利润}\approx \frac{市值}{期末净利润}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">PE</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">EPS</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4677em;vertical-align:-1.1073em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.2377em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">期末股份总数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">期末净利润</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1073em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">期末净利润</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cjk_fallback">期末股份总数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">期末净利润</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">市值</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>最终公式中的分子为<code>股价*股数</code>，我们可以将其理解为一家公司的市值，于是 PE 就被化简为市值比上利润了，这种形式是不是看起来更好理解一些 —— PE 过高要么说明其市值过高，要么说明其利润太少。</p><p>最后我们再回归 PE 公式本身，从最后一个视角来理解 PE：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>E</mi><mo>=</mo><mfrac><mtext>股价</mtext><mrow><mi>E</mi><mi>P</mi><mi>S</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">PE = \frac{股价}{EPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">PE</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">EPS</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>思考我购入一只股票后，永不卖出并且及时提取分红的情况下，我需要多少时间才能回本？</p><p>假设公司 A 的股价是每股 100 元，A 公司的每股收益 EPS = 10，那么当我花了 100 元购买一股之后，单纯吃股息的情况下，我每年能够获得 10 元收益，于是我需要 <code>100 / 10 = 10</code> 年的时间才能回本。</p><hr><p>MBA 智库中有一个 PE 的参考范围：</p><ul><li>0-13：即价值被低估</li><li>14-20：即正常水平</li><li>21-28：即价值被高估</li><li>28+：反映股市出现投机性泡沫</li></ul><hr><p>OANDA Lab 中也有下方表格供参考：</p><table><thead><tr><th>股价范围</th><th>PE 范围</th><th>预期投资回报率</th></tr></thead><tbody><tr><td>偏高</td><td>20 &lt; PE</td><td>&lt; 5%</td></tr><tr><td>合理</td><td>10 &lt; PE &lt; 20</td><td>&lt; 6.7%</td></tr><tr><td>偏低</td><td>PE &lt; 10</td><td>&lt; 8.3%</td></tr></tbody></table><hr><p>作为普通的投资者，如何根据上述提到的诸多信息来选购一家公司的股票呢？下面是根据公式推导的一个结论表格：</p><table><thead><tr><th>股价</th><th>EPS 每股收益</th><th>PE 市盈率</th></tr></thead><tbody><tr><td>A = B</td><td>越高越好</td><td>股价相同，EPS 越高，PE 越低，回本时间越短</td></tr><tr><td>越低越好</td><td>A = B</td><td>EPS 相同，股价越低，PE 越低，回本时间越短</td></tr><tr><td>A ≠ B</td><td>A ≠ B</td><td>此时一般只看 PE，PE 越低，回本时间越短</td></tr></tbody></table><h2 id="市净率又是什么，和市盈率有关系吗？">市净率又是什么，和市盈率有关系吗？</h2><p>市净率 PB 指的是股价和每股净资产的比值：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>B</mi><mo>=</mo><mfrac><mtext>股价</mtext><mtext>每股净资产</mtext></mfrac></mrow><annotation encoding="application/x-tex">PB = \frac{股价}{每股净资产}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">PB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">每股净资产</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>每股净资产是净资产 / 股数</p><p>净资产就是一家公司的<strong>总资产-总负债</strong>，也就是当公司卖掉所有资产和付清所有负债之后剩余的价值</p></blockquote><p>同样我们代入公式进行进一步推导：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mi>B</mi><mo>=</mo><mfrac><mtext>股价</mtext><mtext>每股净资产</mtext></mfrac><mo>=</mo><mfrac><mtext>股价</mtext><mfrac><mtext>净资产</mtext><mtext>股数</mtext></mfrac></mfrac><mo>=</mo><mfrac><mrow><mtext>股价</mtext><mo>⋅</mo><mtext>股数</mtext></mrow><mtext>净资产</mtext></mfrac><mo>≈</mo><mfrac><mtext>市值</mtext><mtext>净资产</mtext></mfrac></mrow><annotation encoding="application/x-tex">PB = \frac{股价}{每股净资产} = \frac{股价}{\frac{净资产}{股数}} = \frac{股价\cdot股数}{净资产} \approx \frac{市值}{净资产}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">PB</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">每股净资产</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4677em;vertical-align:-1.1073em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.2377em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">股数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">净资产</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1073em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">净资产</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">股价</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cjk_fallback">股数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">净资产</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">市值</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>可以看到 PB 越等于市值除以净资产。</p><p>看过了前面内容，这里我们也能迅速的得出，一般而言 PB 越低的股票投资价值越高，这一点和 PE 是基本相同的。</p><p>举例来说：在理想情况下，公司的 Day 1 当天，PB 应该为 1，即：公司价值 100 万，那么我花 1 万就能买到 1% 的公司；随着时间增长，公司股票越来越值钱，在股价涨了 10 倍之后，公司价值 1000 万时，我花 1 万只能买到 0.1% 的公司了，此时 PB 也就变成了 10。</p><p>一般来说，我们会认为 PB 比 PE 更为稳定，因为从公式中我们就能看出来，PE 随着盈利变化，而 PB 随着净资产变化，在短期时间内，公司的盈利也许会发生巨大的波动，例如苹果举行发布会后，手机的销量也许会大幅上升，但公司的净资产的变化却非常少。</p><p>其次，PE 不适用于亏损的企业，因为亏损的企业没有盈利无法计算 PE，但是这类企业是有净资产的，PB 仍然能够被计算出来。</p><h2 id="AI-时代，交给-AI">AI 时代，交给 AI</h2><p>写在最后，AI 的时代，再让我们请教一下 AI。</p><p>根据 GuruFocus 给出的数据，我们不难看出 Li Auto 的股票在同行业中，呈现出高 PE 低 PB 的情况，交给 ChatGPT 来对其进行分析：</p><p><img src="/img/analyze-stocks/pe.png" alt="PE"></p><p><img src="/img/analyze-stocks/pb.png" alt="PB"></p><p><img src="/img/analyze-stocks/chatgpt.png" alt="ChatGPT"></p><p>AI 给出的分析仅供参考，这里给出个人的一些思考：</p><p>理想汽车最近在新能源行业中扭亏为盈，刚刚进入盈利阶段的理想由于盈利不多，因此在 PE 的计算中分母比较小，造成了 PE 本身很大，而 PB 较低，则代表了理想公司的账面资产比较多（分母较大）。也就是说，PB 低，PE 高的情况，针对当前阶段的理想来说，基本都是因为分母造成的。</p><p>按照彼得林奇的说法，针对强周期性的股票，就应该在 PB 低 PE 高的情况下买入，因为在弱周期来临时，由于盈利不佳，PE 会升高，但资产不太变动的情况下，PB 即使在弱周期也可能较低。在此刻买入就越等于在弱周期买入，针对周期性股票，在弱周期买入显然是有利的。</p><p>一般来说，低 PB 高 PE 的情况往往会出现在即将实现困境反转型的企业或是周期股的底部，理想比较偏向前者，但这类股票也往往比较难把握，因为“很可能它反转不了呢”。或者说，虽然 PB 很低，我此时能用相同的钱买入更多的公司资产，但也许“都是些产生不了利润的垃圾资产呢”。总而言之，这类情况的股票在一般情况下“即使低价，也很难吸引人”，把握这类资产需要很强的专业能力。</p>]]></content>
    
    
    <categories>
      
      <category>chores</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Finance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解 Golang context.Context</title>
    <link href="/tech/golang_ctx/"/>
    <url>/tech/golang_ctx/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Go 在 1.7 版本中引入了标准库 context，现在在各大开源库中已经变得随处可见。</p><p>本文基于 go1.21.1 darwin/arm64 源码编写。</p></blockquote><h2 id="入门-Context">入门 Context</h2><h3 id="Context-是什么？">Context 是什么？</h3><p>在 <code>context.go</code> 文件的开头，Go Authors 定义了主角 <code>Context interface</code> ，并对其做出了如下描述：</p><blockquote><p><em>A Context carries a deadline, a cancellation signal, and other values across API boundaries.</em></p><p><em>Context’s methods may be called by multiple goroutines simultaneously.</em></p></blockquote><p>也就是说，Context 具备如下 4 个功能：</p><ol><li>可以携带用于控制「超时」的 Deadline 信息</li><li>可以携带用于控制「取消」的 Signal 信息</li><li>可以携带自定义数据</li><li>可能被多个 <code>goroutine</code> 并发调用</li></ol><p>从这几个基本功能及其命名中，我们可以大致看出，<code>Context</code> 是一个数据结构，它不仅可以用于保存自定义的数据，还额外携带了被动超时和手动取消的功能，除此之外，它本身还是<u>并发安全</u>的 —— 我们该如何运用起来？它对我们的编程有什么实际的帮助？</p><hr><h3 id="Context-的基本编程范式">Context 的基本编程范式</h3><p>前面我们已经了解到 <code>Context</code> 的大致概念，接下来我们将目光放在代码层面，看看这个数据结构在 Go 语言中基本的编程范式是怎样的。</p><p>在 Golang 官方的<a href="https://pkg.go.dev/context">文档</a>中，明确地指出了 <code>context.Context</code> 的使用场景：</p><blockquote><p><em>Incoming requests to a server should create a <a href="https://pkg.go.dev/context#Context">Context</a>, and outgoing calls to servers should accept a Context. The chain of function calls between them must propagate the Context …</em></p></blockquote><p>一个服务器收到请求之后，应该创建一个 <code>Context</code> ，而下游的服务器也应该接受一个 <code>Context</code> ，在函数调用链中，<code>Context</code> 也应该不间断的被传递。</p><p>也就是说，<code>Context</code> 这个数据结构，<u>应该伴随一整个请求的完整链路</u>：</p><p><img src="/img/go-ctx/pass-ctx.png" alt="向下游传递的 ctx"></p><p>除此之外，在服务的内部，<code>Context</code> 也<u>应该在函数调用链中不断的被传递</u>：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()chainRoot(ctx, ...)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chainRoot</span><span class="hljs-params">(ctx context.Context, ...)</span></span> &#123;...chainSecond(ctx, ...)...&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chainSecond</span><span class="hljs-params">(ctx context.Context, ...)</span></span> &#123;...chainThird(ctx, ...)...&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chainThird</span><span class="hljs-params">(ctx context.Context, ...)</span></span> &#123;...&#125;</code></pre></div><p>至此，我们对 <code>Context</code> 的基本使用方式有了一个基本的了解 —— 将其放在函数参数列表中的第一位，然后在编码时手动传递。在跨服务调用的场景下，我们应该将 ctx 序列化后伴随请求传递到下游服务中，下游服务再将其反序列化出来继续使用。</p><p>此外，从上面的代码中，我们也不难理解为什么在 Golang 官方的注释中描述道：<code>Context</code> 可能被多个 <code>goroutine</code> 并发调用 —— 在整个调用链中，我们很有可能开启若干协程来处理业务，且每个协程都对 <code>Context</code> 都具备访问权限。</p><hr><h3 id="Context-的具体使用">Context 的具体使用</h3><p>通过上面的描述，我们已经大致了解到 <code>Context </code> 在实际编码中的编程范式 —— 作为参数进行传递。一些有经验的程序员在初见时，自然而然会觉得：“这不是在对代码造成侵入吗？”，就像 Golang 中处理错误的方式一样，也会有人觉得这十分不优雅。</p><p>让我们先抛开这些“审美观念”不谈，把目光先聚焦在 <code>Context</code> 的具体使用方式上，看看它能对我们的编程过程带来多大的帮助。理解了它真正能起到的作用之后，我们再根据实际业务情况来做权衡也不迟。</p><p>接下来根据第一节中提到的前三种数据承载的能力，我们分别给出相应的 demo 进行演示。</p><h4 id="1-传递自定义数据">1. 传递自定义数据</h4><p>我们可以使用 <code>context.Background()</code> 来获得一个初始化的 <code>Context</code>，再使用 <code>context.WithValue()</code> 来给一个现有的 <code>Context</code> 注入自定义数据:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()ctx = context.WithValue(ctx, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>)ctx = context.WithValue(ctx, <span class="hljs-string">&quot;key2&quot;</span>, errors.New(<span class="hljs-string">&quot;value2&quot;</span>))ctx = context.WithValue(ctx, <span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-number">3</span>)fn(ctx)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fn</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<span class="hljs-built_in">println</span>(ctx.Value(<span class="hljs-string">&quot;key1&quot;</span>).(<span class="hljs-type">string</span>))<span class="hljs-built_in">println</span>(ctx.Value(<span class="hljs-string">&quot;key2&quot;</span>).(<span class="hljs-type">error</span>).Error())<span class="hljs-built_in">println</span>(ctx.Value(<span class="hljs-string">&quot;key3&quot;</span>).(<span class="hljs-type">int</span>))&#125;</code></pre></div><p>从这段代码中可以看出，<code>Context</code> 的行为就像是一个 <code>map[string]any</code> ，我们在获取数据时可能会需要用到类型断言。</p><p>传递自定义数据相关的使用比较简单，这里不再展开。</p><hr><h4 id="2-用于超时控制">2. 用于超时控制</h4><p>很多时候，我们需要对一个过程（可以是本地函数调用，也可以是远程过程调用）设置好时间的限制，避免其运行太久。</p><p>我们可以使用如下四个函数来给一个 <code>Context</code> 注入超时信息：</p><ol><li><code>context.WithTimout()</code></li><li><code>context.WithTimeoutCause()</code></li><li><code>context.WithDeadline()</code></li><li><code>context.WithDeadlineCause()</code></li></ol><p>其中，函数末尾带有 <code>Cause</code> 意味这你可以「自定义一个超时错误」传入函数中，当发生超时的时候 <code>Context</code> 会将这个自定义错误返回出来，否则它会返回一个默认的超时错误。</p><p>并且，<code>WithTimout*</code> 本质上是 <code>WithDeadline*</code> 的一个封装，封装过程也极其简单，即：将 <code>time.Duration</code> 与 <code>time.Now</code> 求和从而计算得出 <code>Deadline</code>。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()<span class="hljs-comment">// 给 ctx 设置 3s 后超时</span>ctx, cancel := context.WithTimeout(ctx, time.Second*<span class="hljs-number">3</span>)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">defer</span> cancel()longTimeWork(ctx)&#125;()<span class="hljs-comment">// ctx 超时结束后，从中获取导致其结束的 err 信息</span><span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main:&quot;</span>, ctx.Err().Error())&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longTimeWork</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; ;i++ &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done(): <span class="hljs-comment">// 监听超时信号</span><span class="hljs-keyword">return</span><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 未超时则继续处理业务逻辑</span><span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;doing sth inside&quot;</span>, i)time.Sleep(time.Second)&#125;&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">Output:doing sth inside 1doing sth inside 2doing sth inside 3main: context deadline exceeded</code></pre></div><p><strong>代码解析：</strong></p><p>在上面的例子中，我们在外层设置了一个过期时间为 3 秒的 <code>Context</code> ，然后将这个 <code>Context</code> 作为参数传递给了一个耗时很长的函数，该函数内部不断监听着这个 <code>Context</code> 的超时信号，当超时发生时立即退出。</p><p>最后在外层，我们监测到 <code>Context</code> 超时后，可以通过 <code>Context.Err()</code> 来获取错误信息，即输出中的 <code>context deadline exceeded</code>。</p><p><strong>思考：</strong></p><p>仔细观察上面对于超时过程的监控过程，我们不难发现，对于超时信号的监控侵入了 <code>longTimeWork</code> 的代码实现。</p><p>这种方式看起来让我们的代码变得不够优雅，但它也给我们带来一个好处 —— 极细粒度的超时检测，例如我们可以将代码改写为下方这样：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longTimeWork</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<span class="hljs-comment">// 封装一个判断是否超时的函数</span>timeouted := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">bool</span> &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;&#125;subwork1(...)<span class="hljs-keyword">if</span> timeouted() &#123;<span class="hljs-keyword">return</span>&#125;subwork2(...)<span class="hljs-keyword">if</span> timeouted() &#123;<span class="hljs-keyword">return</span>&#125;subwork3(...)<span class="hljs-keyword">if</span> timeouted() &#123;<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>可以看到，我们甚至可以将检测超时的粒度细分为「行级」，每执行一行代码就检测一次。</p><p>通过 <code>Context</code> 赋予我们的超时机制，我们可以用一行代码为基本单位来实现细粒度的超时检测（粒度可以从 1 行到 n 行），在 <code>Context</code> 的帮助下，我们可以容易地避免掉大量无意义的运算行为。</p><hr><h4 id="3-用于手动终止">3. 用于手动终止</h4><p>在上一节中，我们看到了基于超时的行为控制，但有时我们的业务逻辑可能需要更精准的控制，例如：虽然现在还尚未超时，但是我当下就想立马取消后续的所有运算。</p><p>比如 javascript 中 <code>Promise.Race()</code> 就是一个很好的例子。我们有时会开启多个异步任务让他们进行“比赛”，任何一个任务完成都意味着这场比赛已经结束，因为我们已经拿到了我们想要的计算结果，此时别的任务再进一步去做运算已经失去了意义，这时我要是能手动取消这些任务就能节省大量的运算资源。</p><p>在 <code>Context</code> 中，我们可以使用<code>context.WithCancel</code> 来给 <code>Context</code> 设置一个手动取消的信号监听器：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()ctx, cancel := context.WithCancel(ctx)<span class="hljs-keyword">go</span> longTimeWork(ctx)<span class="hljs-comment">// 3s 后手动取消</span>timer := time.NewTimer(time.Second * <span class="hljs-number">3</span>)<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-timer.C:cancel()&#125;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;main:&quot;</span>, ctx.Err().Error())&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longTimeWork</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;<span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; ; i++ &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():<span class="hljs-keyword">return</span><span class="hljs-keyword">default</span>:<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;doing sth inside&quot;</span>, i)time.Sleep(time.Second)&#125;&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">Output:doing sth inside 0doing sth inside 1doing sth inside 2main: context canceled</code></pre></div><p>可以看到，这次我们在外层等待 3s 后手动调用 <code>cancel()</code>取消了异步任务，而之前是在外部仅设置超时时间，ctx 内部自主取消，差别还是比较明显的。</p><p>同样，内部响应取消信号的粒度与之前前文是一致的，可以进行自定义，甚至可以忽略这个信号 —— 只要你不去监听 <code>ctx.Done()</code> 即可。</p><hr><h4 id="4-综合使用">4. 综合使用</h4><p>我们在实际应用的过程中，可以将前面提到的若干特性结合起来一并使用。</p><p>这里举一个实用的例子：</p><blockquote><p>我们往往在生产环境会部署若干个服务，用户的请求会经过网关到达一个又一个的服务，最后经过一系列处理后返回结果给客户端。</p><p>此时我们面临着若干的问题：</p><ol><li><p>网关设置的超时时间如何与后端服务进行联动？</p><p>注意，网关虽然有自己的超时时间，在超时发生时，网关会拒绝等待后端服务的响应，直接给用户返回 HTTP 504 错误。但是此时如果后端服务没有感知到这一点，就会继续进行无意义的处理和运算，最终返回给网关的结果也会被网关丢弃，造成不必要的资源浪费。同理，服务调用链上的每个节点之间也都面临相同的问题，不局限于网关和网关的下一跳节点。</p></li><li><p>通用数据的传递有没有更简洁的方式？</p><p>客户端发起的请求，在处理过程中往往需要很多额外的信息（请求本身的信息可能并不足够），这些信息往往在前置的节点中会被查询出来，然后捎带给下游节点。但是，在服务内部的函数调用链上，如何将所有这些额外的数据进行传递呢？一种简单方式就是将这些中途得到的信息以参数的形式传给函数内部，但是这可能随着数据种类的增多，导致函数的参数列表变得臃肿。</p></li><li><p>能不能灵活的终止进行中的任务？</p><p>与前面「用于手动终止」一节提到的原理类似，仅仅依赖超时时间来进行流程控制是不够灵活的，我们希望可以自己决定何时终止。</p></li></ol></blockquote><p>下面给出一段伪代码演示综合使用的方式（实际使用中可能会封装得更加抽象和优雅，这里只做展示用）</p><ul><li>代码使用了 <code>gin</code> 框架作为 http 服务器</li><li>我们首先定义了通用的数据和特定接口的请求体</li><li>然后编写了一个中间件用于前置解析请求并生成 <code>ctx</code></li><li>随后在接口的 handler 中我们可以直接获取到解析好的 <code>ctx</code> 并传递给业务函数进行使用了</li></ul><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BaseCtx <span class="hljs-keyword">struct</span> &#123;UserID    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;userID&quot;`</span>AccountID <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;accountID&quot;`</span>&#125;<span class="hljs-keyword">type</span> UserRequest <span class="hljs-keyword">struct</span> &#123;Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span>&#125;<span class="hljs-comment">// Middleware 解析请求中的 JSON 请求体并将参数存储到 Context 中</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ContextMiddleware</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<span class="hljs-comment">// 读取请求体</span>body, err := io.ReadAll(c.Request.Body)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to read request body&quot;</span>&#125;)c.Abort()<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 将请求体重新放回请求中</span>c.Request.Body = io.NopCloser(bytes.NewBuffer(body))<span class="hljs-comment">// 解析 JSON 请求体到 BaseCtx 结构</span><span class="hljs-keyword">var</span> baseCtx BaseCtx<span class="hljs-keyword">if</span> err := json.Unmarshal(body, &amp;baseCtx); err != <span class="hljs-literal">nil</span> &#123;c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to parse JSON&quot;</span>&#125;)c.Abort()<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 将参数存储到 Context 中</span>ctx := context.WithValue(context.Background(), <span class="hljs-string">&quot;userID&quot;</span>, baseCtx.UserID)ctx = context.WithValue(ctx, <span class="hljs-string">&quot;accountID&quot;</span>, baseCtx.AccountID)<span class="hljs-comment">// 将新的 Context 替换原有的 Context</span>c.Request = c.Request.WithContext(ctx)<span class="hljs-comment">// 继续处理请求</span>c.Next()&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;r := gin.Default()<span class="hljs-comment">// 注册解析 ctx 的中间件</span>r.Use(ContextMiddleware())r.POST(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<span class="hljs-comment">// 获取 Context</span>ctx := c.Request.Context()<span class="hljs-comment">// 超时时间为 5 秒</span>ctx, cancel := context.WithTimeout(ctx, <span class="hljs-number">5</span>*time.Second)<span class="hljs-keyword">defer</span> cancel()<span class="hljs-comment">// 读取请求体</span>body, err := io.ReadAll(c.Request.Body)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to read request body again&quot;</span>&#125;)c.Abort()<span class="hljs-keyword">return</span>&#125;userReq := &amp;UserRequest&#123;&#125;<span class="hljs-keyword">if</span> err := json.Unmarshal(body, userReq); err != <span class="hljs-literal">nil</span> &#123;c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Failed to parse JSON again&quot;</span>&#125;)c.Abort()<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 在处理程序中使用 ctx 和请求体</span><span class="hljs-built_in">println</span>(ctx, userReq)c.String(http.StatusOK, <span class="hljs-string">&quot;ok&quot;</span>)&#125;)r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)&#125;</code></pre></div><p>上面大致演示了一下在实际生产中如何使用 ctx，一般来说，我们会在接到请求后利用一些中间件来提前做好解析，包括配置好当前请求的超时时间等，后续在业务逻辑相关的代码中就可以拿来即用了。</p><p>当然，需要注意的是，我们在业务逻辑中可能会调用下游服务，此时我们还需要在调用下游服务前实现一个类似的中间件，将 ctx 中必要的参数序列化到请求中，从而可以传递到下游中去。</p><p>但是，我们不难发现 ctx 中非常规的数据是无法进行序列化的，例如 <code>function</code> 、<code>chan</code> 等，甚至包括设置好的超时监听器。因此，我们可能需要将超时时间等信息，以时间戳或字符串的形式进行序列化，这些同样可以封装在中间件的逻辑中。</p><hr><h2 id="Context-原理">Context 原理</h2><p>前面介绍了 <code>Context</code> 的使用方式，接下来介绍 <code>Context</code> 的实现原理。</p><h3 id="接口定义">接口定义</h3><p><code>Context</code> 本身是一个接口，对外提供的方法比较少，常用的方法已经在上文演示过了：</p><ol><li><code>ctx.Done()</code> ，用于监听取消 / 超时信号</li><li><code>ctx.Err()</code> ，用于获得取消 / 超时的原因</li><li><code>ctx.Value()</code> ，用于获得自定义数据</li></ol><p>除此之外还有一个方法叫做 <code>Deadline() (ddl time.Time, ok bool)</code>，这个方法用于获得设置好的超时时间。</p><hr><h3 id="实现类">实现类</h3><p>既然是一个接口，那么就应该有相对应的实现：</p><ul><li><code>valueCtx</code>，对应 <code>context.WithValue()</code>，是一个用于承载自定义数据的实现。</li><li><code>timerCtx</code>，对应 <code>context.WithDeadline*|WithTimout*()</code>，是一个用于承载超时逻辑的实现。</li><li><code>cancelCtx</code>，对应 <code>context.WithCancel*()</code>，是一个用于承载取消逻辑的实现。</li></ul><hr><h3 id="继承关系">继承关系</h3><p>从上面的几个 <code>context.With*(parent Context)</code> 方法的参数定义中，我们发现 <code>Context</code> 与 <code>Context</code> 之间是存在继承关系的，比如：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.WithValue(context.Background(), <span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>)ctx, _ = context.WithTimeout(ctx, <span class="hljs-number">5</span>*time.Second)&#125;</code></pre></div><p>这段代码能够生成一个既带有自定义数据 <code>&lt;k1, v1&gt;</code> 又带有超时时间 <code>5*time.Second</code> 的 <code>Context</code>。</p><p>由此，我们从最简单的 <code>valueCtx</code> 开始，先探寻 <code>Context</code> 之间的继承关系是如何实现的。</p><hr><h3 id="valueCtx">valueCtx</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> valueCtx <span class="hljs-keyword">struct</span> &#123;Contextkey, val any&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithValue</span><span class="hljs-params">(parent Context, key, val any)</span></span> Context &#123;<span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)&#125;<span class="hljs-keyword">if</span> key == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;nil key&quot;</span>)&#125;<span class="hljs-keyword">if</span> !reflectlite.TypeOf(key).Comparable() &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;key is not comparable&quot;</span>)&#125;<span class="hljs-keyword">return</span> &amp;valueCtx&#123;parent, key, val&#125;&#125;</code></pre></div><p>可以看到，<code>valueCtx</code> 本身就是一个单链表结构，通过内部的 <code>Context</code> 字段指向父节点来完成一个反向的连接。</p><p>当我们连续调用三次 <code>context.WithValue</code> 时，如下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()ctx = context.WithValue(ctx, <span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>)ctx = context.WithValue(ctx, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>)ctx = context.WithValue(ctx, <span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>)&#125;</code></pre></div><p>会得到一个如图所示的链表结构，很好理解：</p><p><img src="/img/go-ctx/valueCtx.png" alt="反向关联的 valueCtx"></p><p>也就是说，当我们调用 <code>Context.Value(key string)</code> 的时候，我们会从当前的 <code>valueCtx</code> 一路往前寻找，直到链表的首节点为止：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *valueCtx)</span></span> Value(key any) any &#123;<span class="hljs-keyword">if</span> c.key == key &#123;<span class="hljs-keyword">return</span> c.val&#125;<span class="hljs-keyword">return</span> value(c.Context, key)&#125;</code></pre></div><hr><h3 id="cancelCtx">cancelCtx</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;Contextmu       sync.Mutex            <span class="hljs-comment">// protects following fields</span>done     atomic.Value          <span class="hljs-comment">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span>children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// set to nil by the first cancel call</span>err      <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span>cause    <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span>&#125;</code></pre></div><p>这里变得稍微复杂一些了，但是我们可以发现，反向链表的数据结构仍然得到了保留，多余的字段都是用于服务 <code>cancel</code> 功能的。</p><p>那么我们看一看 <code>context.WithCancel()</code> 做了什么，是如何初始化一个 <code>cancelCtx</code> 并用它构建起一个链表节点的：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCancel</span><span class="hljs-params">(parent Context)</span></span> (ctx Context, cancel CancelFunc) &#123;c := withCancel(parent)<span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled, <span class="hljs-literal">nil</span>) &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">withCancel</span><span class="hljs-params">(parent Context)</span></span> *cancelCtx &#123;<span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)&#125;c := &amp;cancelCtx&#123;&#125;c.propagateCancel(parent, c)<span class="hljs-keyword">return</span> c&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span></span> propagateCancel(parent Context, child canceler) &#123;c.Context = parentdone := parent.Done()<span class="hljs-keyword">if</span> done == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-comment">// parent is never canceled</span>&#125;...<span class="hljs-keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;<span class="hljs-comment">// parent is a *cancelCtx, or derives from one.</span>p.mu.Lock()<span class="hljs-keyword">if</span> p.err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">// parent has already been canceled</span>child.cancel(<span class="hljs-literal">false</span>, p.err, p.cause)&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span> p.children == <span class="hljs-literal">nil</span> &#123;p.children = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125;)&#125;p.children[child] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;&#125;p.mu.Unlock()<span class="hljs-keyword">return</span>&#125;...<span class="hljs-comment">// 这里实现了取消的逻辑</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-parent.Done():child.cancel(<span class="hljs-literal">false</span>, parent.Err(), Cause(parent))<span class="hljs-keyword">case</span> &lt;-child.Done():&#125;&#125;()&#125;</code></pre></div><p>上面的代码可能看起来比较复杂，但是本质上实现了一个大致如下的功能：</p><ul><li>将当前的 <code>cacelCtx</code> 与链表中与自己最近的父级 <code>cancelCtx</code> 关联起来</li><li>开启一个 <code>goroutine</code> 监听父级 <code>cancelCtx</code> 的取消信号</li></ul><p>也就是说，当一个可以进行取消操作（比如 <code>valueCtx</code> 就不具备取消功能）的 ctx 被取消时，它在链表上的所有关联起来的子级 ctx 也会被取消。</p><p><img src="/img/go-ctx/cancelCtx.png" alt="额外产生的正向关联"></p><p>从上图可以看到，<code>cancelCtx</code> 在链表上与自己最近的父级 <code>cancelCtx</code> 建立起了一个正向的关联，这个关联正是使用 <code>children map[canceler]struct&#123;&#125;</code> 字段来实现的。</p><p>有了这个关联关系，当父级节点进行 <code>cancel()</code> 操作时，所有的可以取消的子级节点也会被 <code>cancel()</code>。但是反过来则不行，也就是说一个子级节点取消后并不会影响它的父级节点。</p><p>具体的取消实现逻辑这里略过，Golang 本身利用了原子变量和锁机制保证了并发安全，最终实现的目标便是在 <code>cancelCtx.done</code> 中安全的放入一个已经被关闭的 <code>chan</code>，从而让外界能够通过 <code>&lt;-ctx.Done()</code> 语法来感知到当前 ctx 已经被取消了；同时还给 <code>ctx.err</code> 赋予了对应的信息，外界便可以通过 <code>ctx.Err()</code> 来获取到这个信息。</p><hr><h3 id="timerCtx">timerCtx</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> timerCtx <span class="hljs-keyword">struct</span> &#123;cancelCtxtimer *time.Timer <span class="hljs-comment">// Under cancelCtx.mu.</span>deadline time.Time&#125;</code></pre></div><p>从定义中，我们不难看出，<code>timerCtx</code> 继承了 <code>cancelCtx</code>，也就是说 <code>timerCtx</code> 也是「可取消」的 <code>Context</code>，在上面图中的链表结构中，它的关联方式与 <code>cancelCtx</code> 是保持一致的。</p><p>只不过，<code>timerCtx</code> 本身还依赖于一个额外的 <code>timer *timer.Timer</code> 来实现它的超时逻辑。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithDeadlineCause</span><span class="hljs-params">(parent Context, d time.Time, cause <span class="hljs-type">error</span>)</span></span> (Context, CancelFunc) &#123;<span class="hljs-keyword">if</span> parent == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;cannot create context from nil parent&quot;</span>)&#125;...c := &amp;timerCtx&#123;deadline: d,&#125;c.cancelCtx.propagateCancel(parent, c)...c.mu.Lock()<span class="hljs-keyword">defer</span> c.mu.Unlock()<span class="hljs-keyword">if</span> c.err == <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">// 注意这里，timer 中的 goroutine 在到期之后会调用这个 cancel 方法</span>c.timer = time.AfterFunc(dur, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;c.cancel(<span class="hljs-literal">true</span>, DeadlineExceeded, cause)&#125;)&#125;<span class="hljs-keyword">return</span> c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; c.cancel(<span class="hljs-literal">true</span>, Canceled, <span class="hljs-literal">nil</span>) &#125;&#125;</code></pre></div><p>从上面的代码中可以看到，整体上 <code>timerCtx</code> 与 <code>cancelCtx</code> 行为保持一致，但是利用了一个 <code>time.Timer</code> 启动了一个额外的 <code>goroutine</code> 来实现超时之后自动调用 <code>cancel()</code> 的逻辑。</p><p>至此，我们的 <code>Context</code> 继承关系大致如下所示：</p><p><img src="/img/go-ctx/timerCtx.png" alt="context.Context 组成的树"></p><hr><h2 id="后话">后话</h2><p>不管 Context 使用起来是否优雅，毋庸置疑的是它是 Golang 团队官方提出的编程范式和解决方案，我在字节跳动工作期间，整个团队都在以规范的方式使用着 Context。</p><p>具体来说，有以下几个典型的应用场景：</p><ul><li>我们会使用 Context 来传递一些在网关层就可以使用插件植入的 “租户/ 用户 ID” 以及 “租户密钥” 之类的数据，配合 <code>gorm</code> 框架提供的回调功能，可以让业务无感知的情况下，进行数据库查询条件的修改，以及写前加密、读后解密的逻辑。</li><li>字节跳动开源的 <code>KiteX</code> RPC 框架（<a href="https://github.com/cloudwego/kitex">Link</a>）中，实现了 Context 的自动序列化 / 反序列化，让业务方无感知的就能够获取并传递 Context。</li><li>团队的基建中，也依赖 Context 进行流量染色和链路追踪的功能。</li><li>…</li></ul><p>Golang 官方对于 Context 的使用还有诸多建议，就个人而言，我认为最需要注意的是我们不应该将 Context 视为一个万能的参数传递容器，否则将导致代码的可读性和可维护性大打折扣 —— 试想如果项目中所有函数都如下定义该是多么可怕的一件事：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Xxx</span><span class="hljs-params">(ctx context.Context)</span></span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Yyy</span><span class="hljs-params">(args <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]any)</span></span></code></pre></div><p>PS：我目前所在的团队从不使用 Context（虽然我本人非常倾向使用），链路上也没有通过 <code>TracingId / LogId</code> 之类的参数进行串联，但是就目前来看，这也没有对我们的运维和迭代造成太大的困扰。</p><p>总而言之，Context 不是银弹，但它已经证明了它的强大。</p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫画图解 AWS KMS 与 AWS Secret Manager 的集成</title>
    <link href="/tech/aws_kms_and_secret_mgr/"/>
    <url>/tech/aws_kms_and_secret_mgr/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在 AWS 中，用户时常容易混淆「AWS KMS」与「AWS Secrets Manager」—— 不仅是从名字上容易混淆，而且在实际使用的过程中，二者在<u>某些场景中</u>也存在一定的可互换性。</p><p>从顶层的设计出发点来说，KMS 是一种允许用户管理加密密钥的服务，用于加密、解密、签名和其他操作。</p><p>而「Secrets Manager」则更像是一种用来存储密码和 API 密钥等高等级数据的数据库。有了它，我们就可以避免应用程序中进行硬编码 API Key，也可以无需自行存储用户密码（除非你的团队有极强的专业水准和工程能力，否则自己维护一个包含了用户账号密码的数据库是极其困难且不安全的，而 AWS 提供的加密服务甚至武装到了硬件）。</p><p>与此同时，为了更好地保护机密数据，AWS Secrets Manager 也可以配合使用 KMS 对其内容进行加密来获取更高的安全性。</p><p>下面用一则漫画来演示二者集成的大致工作流程：</p><p><img src="/img/comic_kms/comic.png" alt="漫画图解"></p><h2 id="后话">后话</h2><p>在上面的漫画中，忽略了一个重要问题——谁有权限从 Secrets Manager 中获取解密的明文数据？</p><p>AWS 根据使用的密钥管理方式都实现了类似的授权机制：</p><ol><li>用户基于 KMS 自动托管的加密密钥可以使用 KMS 来管理授权范围，需要配合 IAM 系统在 AWS 平台上进行配置，客户端通过 AWS Credential 来表明自己的身份。</li><li>用户基于自行管理的 KMS 密钥来加密的数据也可以使用类似的方式在平台上配置 Policy 和 IAM 等来实现鉴权，区别在于自行管理的 KMS 密钥的 id 是自定义的，需要自己找到对应密钥的配置进行更改。</li></ol><p>综上所述，通过对二者的观察，可以看到一个比较明显的区别在于——Secrets Manager可以获取到存进去的数据的明文，而 KMS 只是提供了加解密等比较原子的功能，KMS 是无论如何都不会将设置进去的密钥返回出来的，它所做的只是在安全的黑盒中使用你最初配置的密钥对你的输入进行加解密操作（当然还有一些额外的功能，例如签名和验签等，这里不再赘述）。</p><p>本文只是大致介绍了两者的集成流程，并比较了二者的区别，有兴趣的读者可以阅读下面的参考资料和 AWS 的官方文档进行查阅。</p><h2 id="参考资料">参考资料</h2><p><a href="https://blog.lightspin.io/understanding-the-integration-between-kms-and-secrets-manager-on-aws">Understanding the Integration Between KMS and Secrets Manager on AWS</a></p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWS</tag>
      
      <tag>Auth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一种高性能的 Kafka 消费模型</title>
    <link href="/tech/high_perf_kafka_consumer/"/>
    <url>/tech/high_perf_kafka_consumer/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Kafka 无疑是现在最流行的消息队列。</p></blockquote><h2 id="闲话">闲话</h2><p>对于消息队列的选型，在国内环境中， RocketMQ 是一个强大的对手，网络上也有各种各样的对比和指导思想，有兴趣的读者可以自行搜索查看，在本文中并不会让这两者分个高下。</p><p>网络上林林总总的文档中，比较有参考意义的是 Apache RocketMQ 官方文档中的对比：<a href="https://rocketmq.apache.org/zh/docs/">Apache RocketMQ 5.0 中文文档</a>。</p><p>可以看到，相比之下RocketMQ 是一个更为“现代化”的消息队列中间件，原生支持了 Kafka 不具备的许多功能，同时也对 Kafka 已有的功能做了一些补充和改进。同时，从文中也可以看到 RocketMQ 相比 Kafka 有着“低延时”和“高可用”的优点，但 Kafka 相比之下拥有更高的“吞吐量”。</p><p>此外，官方文档中没有对两者的性能做出详细的说明，而阿里巴巴官方在外网发布了这篇文章作为补充：<a href="https://alibaba-cloud.medium.com/kafka-vs-rocketmq-multiple-topic-stress-test-results-d27b8cbb360f">基于 Topic 数量的性能压测</a>。</p><p>但是，就我的经验来说，在大部分实际的技术选型中，有以下三个“反直觉”的真相：</p><ol><li>许多细节上的差异并不会给项目带来明显的优势。举一个实际的例子来说：在绝大部分情况下，将接口响应时间从 10s 优化至 100ms，对比将响应时间从 100ms 优化至 1ms ，给用户带来的体感是完全不同的（后者远小于前者），同时付出的成本也是完全不同的（后者远大于前者）。</li><li>社区活跃度的重要程度往往被我们轻视——当你遇见问题的时候，更活跃的社区往往能给你带来更短的定位 / 解决时间。这里是一个自带活跃度对比的外网社区的统计结果：<a href="https://stackshare.io/stackups/kafka-vs-rocketmq">社区活跃度的对比</a>。从中可以看到，RocketMQ 在全球范围内的社区影响力远低于 Kafka。</li><li>不同的公司的技术选型思路有巨大的差异。举例来说，我在字节跳动工作期间，公司内部所使用的云平台是自研的“字节云”。在字节云中，从 Golang 的镜像，到云服务器的 Linux 内核，都是公司自研的——根据公司的实际情况做出了相应的优化。当时在云平台的官方文档中，基础架构的同学写下了一段大致如下的描述：“强烈推荐各业务方从 Kafka / BMQ 切换到 RocketMQ，当前字节云中的 RocketMQ 中间件从各方位对比前者都有显著的优势” 。</li></ol><p>总的来说，所有技术选型都应该基于实际情况进行决策，到底是否应该“以牺牲部分吞吐量为代价，来获得 RocketMQ 同步刷盘的能力”，还是“它们都太差了，我要自研一款属于我的 MQ”，是需要根据实际业务场景来决定的。</p><p>而我现在所处的公司，在决策时面临的困难显然不那么强烈——我们使用亚马逊的 AWS 来部署服务，而 AWS 官方并没有提供基于 RocketMQ 的 Paas 服务，但 AWS MSK （Managed Streaming for Apache Kafka）已经相当成熟了，我们也就自然而然的选择了 Kafka 作为我们的消息队列中间件。</p><h2 id="正文">正文</h2><h3 id="基于-Golang-的-Kafka-SDK">基于 Golang 的 Kafka SDK</h3><p>相同的中间件在不同编程语言中的实现的 SDK 必然是有差异的，它们往往会根据语言自身的特点做出相应的适配和优化。我所采用的 sdk 是 segmentio 公司研发的 <a href="https://github.com/segmentio/kafka-go">kafka-go</a>，是 golang 中非常流行的一个库，也是适配得较好的一个库。</p><p>这个库的实现原理大致如下：</p><p><img src="/img/kafka-go/kafka-go-sdk.png" alt="kafka-go sdk"></p><ol><li>kafka-go 会向 Kafka Broker 拉取一定数量的消息放入内存中的 msg chan（该 chan 的缓存大小是可配置的）</li><li>然后应用程序通过调用 <code>FetchMessage</code> 方法来从这个 chan 中获取到一个消息并进行消费</li><li>当消费成功后，应用程序通过调用 <code>CommitMessages</code> 方法来提交 commit request</li><li>根据配置，kafka-go 会将 commit chan 中的请求立即提交，或将其 merge 合并为一个请求异步提交</li></ol><hr><h3 id="简单的阻塞消费模型">简单的阻塞消费模型</h3><p>最简单的消费模型其实和上面描述的过程是一致的，如下：</p><p><img src="/img/kafka-go/simple.png" alt="一次消费一条消息"></p><p>当消费成功时直接提交；当消费失败时，根据需要进行无限重试，或是直接丢弃（提交 commit 请求视为成功）。</p><p>为什么我们一定要阻塞在某一条消息的处理上，为什么不能使用一个 <code>sync.WaitGroup</code> 来进行一定程度的并发呢？</p><p>因为对于 Kafka 而言，它的提交行为是不区分 <code>ACK</code> / <code>NACK</code> 的，它的 commit 请求中只包含一个 <code>offset</code> 参数来标识当前消费者的消费进度。与此同时，kafka-go sdk 又在内存中将消息缓存到 chan 中，当我开启若干个协程调用 FetchMessage 方法时，获取到的消息是完全不同的。也就是说，当我开启三个协程处理三条消息时，可能分别在处理 offset = <code>1</code> / <code>2</code> / <code>3</code> 的 3 条消息，当 1 和 2 处理失败但 3 处理成功时，一旦将 3 commit 到 Kafka 中，1 和 2 就永久的丢失了（再也不会被消费了）。</p><p>这种模型虽然很简单，但也十分低效，适合的场景也非常有限，举几个实际的例子：</p><ol><li>新增 / 注销账号产生的消息。类似的场景下消息产生的 QPS 很可能 &lt; 1，因此使用该模型并不会造成性能瓶颈，反而在一定程度上可以提升开发效率。</li><li>需要使用顺序消费的场景。也就是说，在消费某条消息之前，必须消费完这条消息之前的所有消息，例如涉及到某些状态流转的场景，阶段 A 不能直接转换为阶段 C，而是必须经过阶段 B，此时我们需要顺序消费 A-&gt;B、B-&gt;C 这两条消息。</li></ol><hr><h3 id="高性能的批量消费模型">高性能的批量消费模型</h3><p>在 Kafka 不支持 <code>ACK</code> / <code>NACK</code> 的情况之下，如果我们仍需要保证消费的有序性，是不是就无法使用并发消费了呢？</p><h4 id="以-Partition-为维度并发">以 Partition 为维度并发</h4><p>Kafka 同一个 Topic 下的消息是分为多个 Partition 进行存储的，每个 Partition 中的消息都是按照投递的顺序进行排序的，也就是说，我们在消费同一个 Topic 的情况下，至少可以进行 Partition 维度的并发——就像在 RocketMQ 中，每个 Queue 中的消息是局部有序的。</p><p>因此，我们可以以 Partition 为维度进行并发消费。于此同时，我们还可以对于每个 Partition 都批量的拉取消息，然后进行批量的处理，但是需要消费方保证消息处理的幂等性，避免重复消费。</p><p><img src="/img/kafka-go/by_partition.png" alt="根据 partition 并发处理"></p><p>在这种模型中，我们需要做的主要有两件事：</p><ol><li>实现一个简单的 Dispatcher，根据 Kafka Message 的 Partition 进行分组后，将这条消息投入对应 Partition 的 chan 中</li><li>实现一个通用的 Worker，用于处理 Partition Chan 中的消息</li></ol><p>以下是我写的一段核心代码：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> KafkaConsumer[T msgtype.KafkaMessage] <span class="hljs-keyword">struct</span> &#123;callback           <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(msgs ...T)</span></span>partitionMsgs      <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">chan</span> TpartitionQueueSize <span class="hljs-type">int</span>minBatchSize   <span class="hljs-type">int</span>maxBatchSize   <span class="hljs-type">int</span>forceFlushTime time.DurationcloseCh <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *KafkaConsumer[T])</span></span> Run() &#123;<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;log.Info(<span class="hljs-string">&quot;kafka consumer started&quot;</span>)<span class="hljs-keyword">for</span> &#123;msg := c.fetchMsg()<span class="hljs-comment">// 优雅退出</span><span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-c.closeCh:log.Info(<span class="hljs-string">&quot;kafka consumer stopped&quot;</span>)<span class="hljs-keyword">return</span><span class="hljs-keyword">default</span>:&#125;c.parallelHandle(msg)&#125;&#125;()&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *KafkaConsumer[T])</span></span> Stop() &#123;<span class="hljs-built_in">close</span>(c.closeCh)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *KafkaConsumer[T])</span></span> parallelHandle(msg T) &#123;partition := msg.RawMessage().Partition<span class="hljs-keyword">if</span> _, ok := c.partitionMsgs[partition]; !ok &#123;c.startPartitionHandler(partition)&#125;c.partitionMsgs[partition] &lt;- msg&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *KafkaConsumer[T])</span></span> startPartitionHandler(partition <span class="hljs-type">int</span>) &#123;<span class="hljs-comment">// 初始化分区消息队列</span>c.partitionMsgs[partition] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> T, c.partitionQueueSize)<span class="hljs-comment">// 启动分区消费者</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;flushTimer := time.NewTimer(c.forceFlushTime)<span class="hljs-keyword">for</span> &#123;msgBatch := <span class="hljs-built_in">make</span>([]T, <span class="hljs-number">0</span>, c.maxBatchSize)<span class="hljs-comment">// 先取一条消息, 避免直接进入计时</span>msgBatch = <span class="hljs-built_in">append</span>(msgBatch, &lt;-c.partitionMsgs[partition])flushTimer.Reset(c.forceFlushTime)<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(msgBatch) &lt; c.maxBatchSize &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-comment">// 超时退出</span><span class="hljs-keyword">case</span> &lt;-flushTimer.C:<span class="hljs-keyword">return</span><span class="hljs-comment">// 接收到新的 msg</span><span class="hljs-keyword">case</span> msg := &lt;-c.partitionMsgs[partition]:msgBatch = <span class="hljs-built_in">append</span>(msgBatch, msg)<span class="hljs-comment">// 暂时没有新的消息到来，但也尚未超时，此时缓存的消息若满足最小接收量则退出</span><span class="hljs-keyword">default</span>:<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msgBatch) &gt; c.minBatchSize &#123;<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 再次 select, 避免空转</span><span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;- flushTimer.C:<span class="hljs-keyword">return</span><span class="hljs-keyword">case</span> msg := &lt;-c.partitionMsgs[partition]:msgBatch = <span class="hljs-built_in">append</span>(msgBatch, msg)&#125;&#125;&#125;&#125;()<span class="hljs-comment">// callback 中根据业务自行实现重试保证成功或是 drop</span>c.callback(msgBatch...)c.CommitMessages(msgBatch...)&#125;&#125;()&#125;</code></pre></div><p>可以看到，在实际的代码实现中，会加入许多额外的细节来提供健壮性，其中使用了 <code>map[int]chan T</code> 结构来维护消息的分组过程，也就是实现了上述的 <code>Dispatcher</code>。除此之外，在 <code>startPartitionHandler(int)</code> 方法中，以异步的形式实现了前文中的<code>Worker</code>。</p><p>在 Worker 的具体实现中，我使用了 3 个可配置的选项来根据实际情况动态的调控消费行为，分别是：</p><ol><li><code>forceFlushTime</code> ，每次处理消息前最大的循环时间——防止一直接收不到足量的消息而阻塞</li><li><code>maxBatchSize</code>，每次批量处理消息的最大数量——防止一次性接收过多消息</li><li><code>minBatchSize</code>，每次批量处理消息的最小数量——某些时候上游已经暂时不再产生消息，此时为了避免持续空转到超时，可以提前返回</li></ol><hr><h4 id="批量发送消息">批量发送消息</h4><p>除了消费可以实现批量之外，生产也可以实现批量。</p><p>伪代码如下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> KafkaPartitionProducer[T msgtype.KafkaMessage] <span class="hljs-keyword">struct</span> &#123;brokers   []<span class="hljs-type">string</span>topic     <span class="hljs-type">string</span>partition <span class="hljs-type">int</span>conn      *kafka.Conncodec     *kafka.CompressionCodeclogger *logrus.Entry&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pp *KafkaPartitionProducer[T])</span></span> ProduceMust(msgs ...T) &#123;<span class="hljs-keyword">if</span> pp.codec == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;codec is nil&quot;</span>)&#125;<span class="hljs-keyword">if</span> pp.conn == <span class="hljs-literal">nil</span> &#123;pp.connectMust()&#125;<span class="hljs-comment">// 构造 kafka 消息</span>kmsgs := <span class="hljs-built_in">make</span>([]kafka.Message, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msgs))<span class="hljs-keyword">for</span> _, msg := <span class="hljs-keyword">range</span> msgs &#123;kmsg := pp.buildKafkaMessage(msg)<span class="hljs-keyword">if</span> kmsg == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">continue</span>&#125;kmsgs = <span class="hljs-built_in">append</span>(kmsgs, *kmsg)&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(kmsgs) == <span class="hljs-number">0</span> &#123;pp.logger.Warn(<span class="hljs-string">&quot;no messages to produce&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 无限重试直到发送成功</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; ; i++ &#123;nbytes, _, offset, _, err := pp.conn.WriteCompressedMessagesAt(*pp.codec, kmsgs...)<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;log.Infof(<span class="hljs-string">&quot;write compressed messages success&quot;</span>)<span class="hljs-keyword">break</span>&#125;<span class="hljs-keyword">switch</span> err &#123;<span class="hljs-keyword">case</span> kafka.MessageSizeTooLarge:log.WithError(err).Errorf(<span class="hljs-string">&quot;kafka message size too large&quot;</span>)<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(kmsgs) &lt;= <span class="hljs-number">1</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;kafka message size too large&quot;</span>)&#125;<span class="hljs-comment">// 消息过多对半递归重发</span>mid := <span class="hljs-built_in">len</span>(kmsgs) / <span class="hljs-number">2</span>pp.ProduceMust(msgs[:mid]...)pp.ProduceMust(msgs[mid:]...)<span class="hljs-keyword">default</span>:<span class="hljs-comment">// 其它错误直接重连</span>log.WithError(err).Errorf(<span class="hljs-string">&quot;failed to write compressed messages&quot;</span>)pp.connectMust()&#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pp *KafkaPartitionProducer[T])</span></span> connect() <span class="hljs-type">error</span> &#123;<span class="hljs-keyword">if</span> pp.conn != <span class="hljs-literal">nil</span> &#123;pp.conn.Close()pp.conn = <span class="hljs-literal">nil</span>&#125;<span class="hljs-keyword">for</span> _, addr := <span class="hljs-keyword">range</span> pp.brokers &#123;log := pp.logger.WithField(<span class="hljs-string">&quot;addr&quot;</span>, addr)ctx, canceler := context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<span class="hljs-keyword">defer</span> canceler()<span class="hljs-comment">// 连接到指定 broker 的 topic / partition</span>conn, err := kafka.DialLeader(ctx, <span class="hljs-string">&quot;tcp&quot;</span>, addr, pp.topic, pp.partition)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.WithError(err).Errorf(<span class="hljs-string">&quot;failed to dial leader for partition&quot;</span>)<span class="hljs-keyword">continue</span>&#125;<span class="hljs-comment">// 测试 kafka 连接是否正常</span>first, err := conn.ReadFirstOffset()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.WithError(err).Error(<span class="hljs-string">&quot;failed to read first offset&quot;</span>)conn.Close()<span class="hljs-keyword">continue</span>&#125;last, err := conn.ReadLastOffset()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.WithError(err).Error(<span class="hljs-string">&quot;failed to read last offset&quot;</span>)conn.Close()<span class="hljs-keyword">continue</span>&#125;log.WithFields(logrus.Fields&#123;<span class="hljs-string">&quot;first&quot;</span>: first,<span class="hljs-string">&quot;last&quot;</span>:  last,&#125;).Info(<span class="hljs-string">&quot;dial conn success&quot;</span>)pp.conn = conn<span class="hljs-keyword">break</span>&#125;<span class="hljs-comment">// 没有可用的 broker 连接</span><span class="hljs-keyword">if</span> pp.conn == <span class="hljs-literal">nil</span> &#123;pp.logger.WithField(<span class="hljs-string">&quot;brokers&quot;</span>, pp.brokers).Error(<span class="hljs-string">&quot;failed to dial leader from all brokers&quot;</span>)<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;failed to dial leader for partition %d&quot;</span>, pp.partition)&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;</code></pre></div><div class="note note-light">            <p>值得一提的是，上面代码中的 <code>buildKafkaMessage</code> 可能会成为一个瓶颈点，比如我们的构造逻辑包含一些压缩或者 IO 密集的操作。</p><p>此时我们可以使用协程池并发构造，以提升生产的吞吐量。</p><p>除此之外，它还有可能成为对于 kafka broker 的压力点，比如假设我的消息消费逻辑是一个转发逻辑，从上游获取消息后进行处理再转发给下游 kafka，我们利用上一小节的 <code>KafkaConsumer</code> 进行消费会构造出 <code>Partition</code> 级别的并发，可能会导致下游 kafka 的压力过大。</p><p>此时我们可以使用 <code>chan</code> 进行解耦和限流，实现并发消费+串行生产的转发模型。</p>          </div><hr><h4 id="消费过程的流水线">消费过程的流水线</h4><p>考虑到 Kafka 的消费过程本质上也是一个不同流程的串联，于是我们可以在消费过程上进一步的进行优化。</p><p>举例来说，我们的消费需要进行如下几个步骤：</p><ol><li>消息内容解析，例如有的消息里面包含紧凑的二进制数据，需要进行反序列化等操作才能被程序继续处理</li><li>风控检查，拒绝掉不合理的消息</li><li>日志记录，记录消息的来临</li><li>业务处理，根据消息的内容进行业务处理</li><li>落库，将消息的处理结果落库</li></ol><p>不难发现，其中可能有的步骤并不强烈依赖顺序处理，而有的步骤又需要。</p><p>假设我们基于前面的消费模型构建了我们的应用，那么在合理配置 Kafka 的硬件和配置参数的情况下，瓶颈将很容易的出现在上面这个消费过程上。</p><p>这里列举一个极简的优化方案：</p><ul><li>我们在每一步中都使用 golang 的 <code>chan</code> 进行解耦，比如 1 处理完之后通过 <code>chan</code> 传递给 2 继续处理。</li><li>而前面的每一个数字序号，都是一个单独的 <code>goroutine</code>，仅仅通过 <code>chan</code> 来接收消息。</li><li>然后对于首尾的两个环节进行特殊处理<ul><li>首个环节需要接入 Kafka，真正的从 Kafka 中拉取消息</li><li>末尾环节需要将处理结果落库后，向 Kafka 提交 offset</li></ul></li></ul><p>如此一来，我们便可以实现所谓: “业务处理第一条消息时，我们的程序已经开始解析并反序列化第二条消息了”。<br>于是我们在消费过程中的吞吐量将会得到极大的提升。</p><p>当然，也有另外一种粗暴的方案，就是使用多个 <code>goroutine</code> 来批量消费一批消息，然后 <code>wg.Wait()</code> 等待所有消息处理完毕后再提交 offset。这种方案的优势在于实现简单，但是劣势在于无法保证消息的有序性，需要业务方自行保证消息的幂等性。</p><h2 id="后话">后话</h2><h3 id="Consumer-Group">Consumer Group</h3><p>Kafka 的 Consumer Gourp 离不开 Rebalance 机制，所谓 Rebalance 指的就是将一个 Topic 下若干 Partition 通过协商的过程平均分配给同一个 Consumer Group 中不同 Consumer 的过程。也就是说，一个 Partition 只能被一个 Consumer Group 中的一个消费者消费，也就让我们可以容易的实现局部顺序消费，配合上 Producer 端的少许逻辑，就可以达成业务上的顺序性。</p><p><img src="/img/kafka-go/kafka-consumergroup.png" alt="consumer group 与 partition"></p><p>在上图中，以订单的流转为例，只需要 Producer 在生产消息时根据订单 id 分配固定的 Partition 有序的发送消息（如对于订单221，将发起订单、流转订单、完成订单三个操作依次发送到 P1 中），下游的 Consumer 就能保证同一个订单的消息被按序处理，因为同一个 Partition 中的消息不会同时被两个 Consumer 消费。</p><p>但是有些极端的情况仍可能导致重复消费的错误，例如 C1 在消费完「发起订单」后，还没来得及 Commit 就挂掉了，Rebalance 后 C2 或 C3 又会重新接收到该消息，并尝试再次发起订单，因此业务方自行保证消息消费的幂等性是十分有必要的。</p><hr><h3 id="Ack-Insync">Ack &amp;&amp; Insync</h3><p><strong>Ack 的种类:</strong></p><ul><li><code>Ack = 0</code>，producer 不需要等待任何 broker 确认收到消息的回复</li><li><code>Ack = 1</code>，producer 只需要等待 leader broker 确认收到消息的回复</li><li><code>Ack = all</code>，producer 需要等待所有 min.insync.replicas 确认收到消息的回复</li></ul><p><strong>Insync:</strong><br>in-sync replicas (ISR) 是指能够与主节点保持同步的副本集合。这些副本需要持续跟踪主节点上的最新写入消息，并将其应用到自己的日志中。</p><p>为了避免消息写入消息后，主节点立即宕机导致的消息丢失问题，我们一般会配置 <code>min.insync.replicas</code> 参数，然后协同使用 <code>Ack = all</code> 来保证消息写入多个节点才确认。</p><p><strong>配置思路:</strong></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mi>e</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mtext> </mtext><mi>f</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>y</mi><mi>n</mi><mi>c</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>s</mi><mo>+</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">replication\ factor=min.insync.replicas+N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">min</span><span class="mord">.</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">sy</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord">.</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">pl</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>上述公式能够保证我们在 N 个节点宕机的情况下，仍然能够保证系统的可用性。</p><p>举例来说，假设我们需要让某个 topic 的消息至少被 3 个节点保存（一主两从），此时我们能够接受一个（主）节点宕机，那么 <code>min.insync.replicas</code> 为 2。<br>这也就是我之前在加密货币交易所的交易系统团队工作时，内部默认的配置。（这里再次提醒，我们需要使用 <code>Ack = all</code> 才能与上述配置协同工作保证消息可靠）。</p><p><strong>抄答案:</strong></p><table><thead><tr><th>configuration item</th><th>value</th><th>type</th><th>explain</th></tr></thead><tbody><tr><td>unclean.leader.election.enable</td><td>false</td><td>brokers</td><td>disallow unclean leader election</td></tr><tr><td>replication factor</td><td>3</td><td>topic</td><td>we need to have at least 3 replicas</td></tr><tr><td>min.insync.replicas</td><td>2</td><td>topic</td><td>we need to have at least 2 in-sync replicas</td></tr><tr><td>ack</td><td>all</td><td>producer</td><td>we need to wait for all in-sync replicas to acknowledge the message</td></tr><tr><td>block.on.buffer.full</td><td>true</td><td>producer</td><td>we need to block when the buffer is full</td></tr><tr><td>broker cnt</td><td>4</td><td>brokers</td><td>we need to deploy 4 brokers</td></tr></tbody></table><p>注意上面 broker cnt 必须 &gt;= replication factor，相等的情况(=3)比较好理解，每个 partition 在上述配置下，在每个 broker 都存了一份；大于的情况下，有的 broker 未必会有某个 partition 的数据。</p><p>也就是说，当我们配置的 broker 多于 replication factor 数量时，主要起到下面两个作用：</p><ol><li>减轻每一个 broker 的压力，因为每个 broker 上需要 handle 的 partition 数量变少了。</li><li>假设一个 broker 挂掉，它可能对某些 partition 的消费完全没有任何影响，因为它没有存储这个 partition 的数据。</li></ol><p><strong>吞吐量 vs 延迟:</strong></p><blockquote><p>除上述之外，还有部分用于提升 Kafka 消费吞吐量的配置（注意，提升吞吐量的同时往往都会造成延迟的增加，请根据业务选择）</p></blockquote><ul><li>producer<ul><li><code>linger.ms</code>, default 0, 消息在缓冲区中的停留时间, 增大该值可以等待更多消息加入批次，提高吞吐量，但也会增加延迟。</li><li><code>batch.size</code>, default 16KB, 一次批量发送消息的大小, 增大该值可以减少网络开销，提高吞吐量，但也会增加延迟。</li><li><code>buffer.memory</code>, 生产者本地缓冲区大小, 用于存储待发送的消息。适当增大可以提高吞吐量，但过大会增加内存使用风险。</li></ul></li><li>broker<ul><li><code>socket.send.buffer.bytes / socket.receive.buffer.bytes</code>, 控制生产者与代理、代理与消费者之间的网络缓冲区大小（默认值 100 KB）。</li><li><code>log.segment.bytes</code>, 日志分段文件大小。适当增大可以减少文件数量，提高磁盘写入性能，但也会增加延迟。</li><li><code>log.buffer.size</code>, Kafka 日志文件缓存大小，与底层 I/O 性能相关。</li></ul></li><li>consumer<ul><li><code>fetch.min.bytes / fetch.max.bytes</code>, 定义消费者每次拉取的最小/最大数据量，增大可以减少请求次数，提高吞吐量。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Career 2023</title>
    <link href="/career/career_2023/"/>
    <url>/career/career_2023/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天是 2023 年 4 月 26 日，是我在字节跳动的第 <u><strong><em>1046</em></strong></u> 天。</p></blockquote><h2 id="平淡的学生时代">平淡的学生时代</h2><p>和大多数人一样，我的学生时代没有做出什么出彩的成就，没有参加过任何竞赛，也没有去争取过保研资格，毕业论文也和优秀毫无关联。</p><p>和大多数人不一样的是，我没有参加过大学的开学典礼，也没有参加过大学的校运会，甚至在毕业的时候连张毕业照也没去拍，领完毕业证就走了。</p><p>但是从某些角度来看，也许，<u>只是说也许</u>，做的还算不错——从没有名牌大学的江西省考入了985、选择了计算机专业、毕业就加入了字节跳动。</p><p>其实客观的来看，这也不是什么特别“不错”的事情，尤其是当你身处这座围城的时候更是如此。在成都，电子科大在计算机专业有更响亮的名声；在业内，字节跳动也有不少同事在往外看更好的机会。</p><p><u>总而言之，选择计算机行业这件事，是我至今都很少去反思、怀疑的，想必未来也是如此。</u></p><p>川大是一个包容的学校，条条框框很少，至少对我来说是这样，我的大学四年基本都是过着“放养式”的生活。学校给的约束不多，引导也不多，所以我的选择更多的还是围绕一些自己偶然预见的机会，以及友好的同学/学长/学姐抛出的橄榄枝来进行决策的。</p><p>其实在我身处川大的四年的经历中，能称之为 Milestone 的事情并不多，主要是以下几个：</p><ol><li>大一上学期的「数字逻辑」课，期末总分是 63 分。</li></ol><p><img src="/img/career_2023/grade.png" alt="我的大一上学期期末总成绩"></p><ol start="2"><li>大二上学期开始学习Java，并决定以它作为自己的主要语言。</li><li>大二上学期在室友的帮助下进入了「403 实验室」。</li></ol><p><img src="/img/career_2023/lab403.png" alt="403实验室"></p><ol start="4"><li>大二下开始决定备战 2020 年的春招实习。</li></ol><p>数字逻辑这门课就像是浇灭我初入大学校园热情的第一盆冷水（后面还有汇编语言，微机系统等… …），双语的教学模式让人猝不及防，闻所未闻的「门」让人摸不清楚头脑，甚至在期末考试前的几次课前小测验，我都不知道要算在期末的总分当中。看到期末成绩的那一刻，我第一反应就是<u><strong><em>“我肯定不能保研了”</em></strong></u>。—— 这也难免为后续出来找工作打下了心里基础。</p><p>大二上学期学了 Java 之后（在大一学的是C/C++），第一次见到“集合类 Collections”，发现写代码变的简单了，也就提起了对编程的兴趣。当时正好在学计算机网络这门课程，老师讲到 DHCP 协议的时候，我就联想到川大的校园网 SCUNET 经常登陆不上去，后来发现是 IP 池不足以给上下课人员高峰期的每个同学使用，就用 Java 写了个抢校园网的工具，给当时 Java 程序设计协会的同学使用了一段时间，后来也被一个学弟拿去改了改放 Github 上了，<a href="https://github.com/Stevewy/NetworkAssistant">代码在这里</a>。这里顺便感谢学校的前辈总结的 SCUNET 前世今生，这篇博客的详细程度至今都令我叹为观止，想必是耗费了大量心血制作而成，<a href="https://scunet.syaoran.top/">传送门在此</a>。</p><p>在大二上学期的时候，我在一个同寝的室友的帮助下进入了一个计算机社团，当时叫做「四川大学Java程序设计协会」，这个协会配有一个很大的实验室，其实就是一个有空调有大型办公桌的机房，甚至还可以在里面抽烟🚬。当时在这个实验室里面遇到了几个同级的同学，还有几个学长学姐，他们教了我不少关于 SSM 开发的知识；但我觉得更重要的是，在很多同学每天早起去图书馆占座的时候，我有了一个更好的硬件环境，可以帮助我心无旁骛的学习。</p><p>大二下学期是个转折点，四年的大学生涯已经过去了<code>3/4</code>，之所以这么说是因为当时我们都倾向于尽量在前三年修完所有必修课，以及凑够毕业所需要的学分。所以在当时，大家对自己能否保研/出国，心里都有了个底，我就是那一类“不能保研，又不想考研”的人。而且当时在403实验室，有一个比我大一届的学长已经拿到了拼多多的 offer，所以也算是有了个目标，就这么开始了几乎为期一年的长跑。其实当时准备的也不见得有多好，但倒确实是坚持了整整一年。</p><p>春招的结果是挺圆满的，可能是因为当时<u><strong>大环境比较好</strong></u>，最后拿到了一个成都字节跳动的 offer，还有一个杭州阿里巴巴企业智能事业部的 offer。最后我还是因为舍不得成都，就选择去了字节，20 年 6 月份以实习生入职，同年 10 月通过了转正答辩。顺带一提的是，阿里的那个部门，在当时不久后的未来就开发出了全国都在用的「支付宝健康码」。</p><p>补充一个很真实的帖子截图：</p><p><img src="/img/career_2023/zhihu.jpeg" alt="&quot;知识改变命运&quot;"></p><p>20-23 年互联网行业的形势真是潮起潮落。</p><h2 id="“Always-Day-1”-to-Day-1046">“Always Day 1” to Day 1046</h2><p>2020 年 6 月 15 号我以实习生的身份加入了字节跳动，那个时候我所在的部门叫做 EE —— Efficiency Engineering，翻译过来就是「效率工程」，主要是负责字节跳动内部效能工具的开发，比如字节自研的一整套 People 应用 —— 涵盖了 OKR、CoreHR（人事系统）、招聘系统和薪酬系统等，当然还有一些横向的工具，比如 aPaaS 低代码平台等。那时候整个大部门的 Slogan 让我印象很深刻：“<u><em>以字节跳动为实验对象，以敏捷为理念，学习优秀企业的实践，开发、改变现代企业交流沟通和业务开展效率的工具系统。</em></u>”</p><p>我的团队是负责招聘系统的，内部代号 ATSX，即 Application Tracking System X。当时团队还不大，后端一共二三十人，产品也还没有商业化，我进去的时候，我们的产品正处在商业化的前夕（同年年底完成的商业化），所以当时从 6 月到 11 月的这段时间，团队内的业务还是非常繁忙的，后来为了冲刺，团队内还喊出了“决战 930” 和 “再战 1031” 的口号。</p><p>顺带一提的是，当时互联网的形势还算不错，一共二三十人的后端团队内，包括我在内有大概 6，7 个实习生 —— 后来我是唯一转正并留下来的。</p><h3 id="“艰难”的转正之路">“艰难”的转正之路</h3><p>之所以称转正“艰难”，一是因为同批的 6，7 个实习生中只有两人通过 —— 除我之外的另一个女生后来没有选择留下来；二是因为当时正常的同学一般在实习三个月之后就会发起转正答辩，我花了整整四个半月才将整个流程走完。</p><p>我是怎么通过转正的？概括来说，是遇见了一些同批次同学没遇见的机遇，换成俗套的句式来描述，就是运气好：性格和 Leader 很对付、需求交付的也比较及时。</p><p>在我刚加入团队的时候，团队内部有一个新人 landing 必须要做的事情，就是在熟悉自己组内的业务一个月后，写一篇串讲文档，再约一个很大的会议室邀请组内所有同学来旁听。你需要一篇详细的文档来描述你所负责的业务，然后在有限的时间内讲解完文档上的所有内容，并且过程中你需要回答任何同学对你提出的问题 / 质疑，过程中你的 Leader / Scrum Master / Mentor 会在你的文档上留言记录全过程。只有串讲通过的实习生同学，才会开始被安排业务需求，否则只有做一些横向的/业务无关的任务；如果串讲失败，则需要在会后修改文档然后找时间再次发起会议。</p><p>当时串讲的严格程度令我汗颜，简单来说，串讲的考核是打分制的，准确的说是“扣分制”，过程中每答错一个问题就扣 10 分，低于 60 分就宣告失败。一次串讲的时长从 30 分钟到一个小时不等，参与的人数从 10 到 20 人不等，形形色色的问题个数也从 5 到 10 个不等。最令人感到窒息的是，同学们问出的问题往往都是你的串讲文档以外的内容，时而上浮到业务逻辑，时而下潜到服务使用的 RPC 框架、中间件、数据库表设计的理念，甚至还有云平台的配置和 Golang 的基础知识。当时同一批的实习生，有连续两次串讲失败的，我在一旁看得焦虑无比。</p><p>后来我在两位 Leader 的支持下跳过了串讲的流程直接进入了转正答辩环节，并且答辩环节也是所谓“走个过场”，不过那都是后话了。</p><p>我进来的第二周，我的 Leader 就给我安排了一个对新人不太友好的任务 —— 写一个飞书机器人来追踪代码上线前后的一些发布流程，将他每次发布时需要做的很多人工操作进行自动化。之所以说不友好，是因为作为一个大学生（也可能只是我自己），其实在面对陌生的工业环境时，很难立马融入到一些“平台化”、“标准化”的流程中去。具体来说，就是阅读飞书开放平台的服务端文档对当时的我而言是一件很困难的事情，这倒不是因为那些文档写的有多么晦涩难懂，而是在于让你在毫无实践经验的情况之下，只通过阅读文档来进行一些开发工作。这个问题稍一延伸，就变化为：“从理论跨越到实践”。</p><p>幸运的是，飞书团队在 Github 上开源了一套机器人的 SDK，简化了不少基于 OAuth 2.0 的应用鉴权流程；并且在武汉一位同事的帮助下，通过一些非常 trick 的方式赋予了机器人用户身份 —— 让机器人使用我 Leader 的身份来操作云文档；与此同时，字节内部对网络隔离的要求还不是那么严格，我可以方便的把编译出来的可执行文件直接部署运行在我个人的开发机上，省去了不少关于服务部署的学习成本。最后这个机器人成功的跑了起来，虽然内部的实现非常简陋，就连很多持久化的功能都是直接依赖于开发机上部署的 redis 来做的。</p><p>总结来说，站在现在的角度来回顾当时短短一周的过程，有两件事是比较重要的：</p><p>第一是打开思路：xx 平台提供了官方文档，我们未必就一定要按照这个文档去做对接，在这个具体的例子里是恰好飞书团队官方就开源了一套 SDK，即使没有官方的 SDK，我们也大概率能够在网络上找到别人封装好的轮子。当然上面这个例子只是一个具体现实的映射，我们还有很多别的场景不适用于上面这个具体的解决思路，重要的事情是不要局限于问题的表象、现有的解决思路可能是一种束缚。</p><blockquote><p>这里稍微展开一下，我在字节跳动听过几次<a href="https://baike.baidu.com/item/%E6%9D%A8%E9%9C%87%E5%8E%9F/55833965">震原</a>的分享，其中有一个分享的主题叫做《工程师成长的真相：“成长是自己的事情”》，里面他举了一个例子，也是他早期在百度期间听<a href="https://baike.baidu.com/item/%E7%8E%8B%E5%A4%A2%E7%A7%8B/10198826">王梦秋</a>分享的：捕鼠器案例的启示。</p><p>简单来说，当你被安排了一个“优化捕鼠器🪤”的任务来提升捕鼠效率之后，你可能会 focus 在捕鼠器本身去优化物理结构，然后在一段时间后就达到瓶颈；但是后来你可能会发现任务的目标在于灭鼠，于是你下一步会想到舍弃捕鼠器而转为使用灭鼠药，于是你又开始 focus 在灭鼠药的配方和投放位置上；最后你会发现老鼠没了之后也保护不了粮食，因为你的粮仓时常漏水；step by step，你可能会将你的目标转移到「粮食保护」这件事情上去，制定具体的粮食保护评估指标，然后你可能会成立“粮食保护小组”，最后上升到更高层面的“政策”、“法律法规”上去，最后可能在国家层面就形成了粮食保护局，或者世界范围内的粮食保护组织，就像 WTO 这些组织一样。</p></blockquote><p>第二是主动寻求帮助，如果确实觉得文档对于当前阶段的你是晦涩的，坚持一段时间也无果，那么不妨去问问前辈，我们常说“不耻下问”，在这里对应的是“不畏上问”。我当时在飞书上点开了我们行政群的一个“提醒你按时吃饭”机器人的详细信息，在里面看到了开发者是 xx 同学，我就直接小窗私聊那位同学请教机器人的开发细节了。First thing first，大多数时候解决问题比较重要，个人的想法、情绪先摆到一旁，解决问题带来的正反馈与自己克服自己的心理障碍所造成的损耗，这二者综合起来的数学期望往往都是 &gt; 0 的。</p><blockquote><p>这里也稍微展开说一说，在上面引文中震原的分享中还有一点，就是“成长是自己的事情”，这里震原想表述的主要是你要有自己的目标，有了明确的目标之后，那么你身边的人和物都是资源。你的 Leader 是资源，你的同事也是资源，站在这个视角来看，公司也就是组织资源的一种形式，能够通过一些“权威”的方式来降低交易成本。那么对应到这个例子中，我就是利用了飞书机器人的 profile 详情页查看到机器人的作者，然后利用飞书提供的方便快捷的“视频通话”的资源，来触达到身在武汉的机器人作者这个资源，最后利用这个资源完成了我的目标。</p></blockquote><h3 id="转正后的长期迷茫">转正后的长期迷茫</h3><p>2021 年 7 月，我结束了为期一年的实习，无缝衔接到正式工作中去。</p><p>从 7 月到第二年的 3 月，我都处在一个长期的迷茫过程中。22 年 3 月之后其实也只是略有改善，并没有好多少，直到 22 年的 6 月我才真正结束了为期一年的迷茫。</p><p>之所以称那段时间为迷茫，是因为那段时间迷茫的太过明显 —— 没有目标，也没有压力，完全是听从别人的安排去做事，做的事情也非常简单。</p><p>具体地说，别人都在做业务需求的时候，我在做杂活，别人当项目 Owner 的时候，我在里面打辅助，而且辅助的不见得有多好。</p><p>之所以会这样，主要有两方面原因：</p><p>一是个人原因。初入职场的同学往往没有明确的目标，总是被动的去解决问题；在高一层的 level 上缺乏思考，或是想不清楚，亦或是想清楚了但懒得解决，也可能是不敢提出来解决，于是就形成了一种“高不成低不就”的状态。我当时就是如此，虽然在团队内有一年的实习经历，对流程和套路都比较熟悉，但也仅限于此。我当时没有主动的去研究组里的服务代码，所以对不是自己负责的业务不熟悉，也没有主动的去研究团队的服务架构，导致对系统流量的链路不熟悉。</p><p>体现到实际工作中最明显的一点就是，每当线上用户对业务提出咨询时（招聘系统作为一个 B 端的产品，虽然技术架构做的没有 C 端深，但其功能逻辑异常复杂，有时甚至需要专门的同学给客户进行培训后才能投入使用），我都是一头雾水，会直接将别的同学拉入咨询群中帮我解答。更严重的是，有时线上出现了故障，我都不清楚如何排查。</p><blockquote><p>这里说一件真实发生的故事，现在的大部分业务都是由多个微服务组成的，我们团队也不例外；在团队内我们细分了多个小组，简称 Scrum，每个 Scrum 会负责一到三个微服务。当时作为新人，我养成了一个非常狭隘的视角 —— 我只要关注自己组里的一到两个微服务的代码仓库就行了。</p><p>有一次接到需求之后去找我的 Leader 询问如何开发，他告诉我相关的代码在 xxx 服务的代码仓库里面，然后顺手就要在我的电脑上打开那个仓库，想直接一口气帮我找到相关文件。然后他找了半天发现我压根就没有拉过那个仓库的代码到我电脑上，没忍住吐槽了我几句。</p></blockquote><p>那么为什么会这样呢，直接因是自己对于工作的 Scope 圈的太小，终极因是自己没有明确的目标。</p><p>二是团队原因。团队始终处于一个高速成长的阶段，时至今日也是如此，团队一直在面临的不仅仅是层出不穷的新需求，更多的是过于追求高速度而欠下的技术债。团队如何应对上面的情况不是这里的关注点，重要的是当时确实缺乏一些对于新人的引导，大家都在忙自己手上的活，Leader 那边没有给我制定明确的发展计划，我自己也没意识到这一点 —— 最后就好像一只被放养的羊，自娱自乐，自给自足。</p><p>总的来说，作为一个新人，我并没有想清楚自己要什么，也就没有利用任何的资源来达成任何目标。也许大多数人在一开始的时候都会面临这样的窘境，但我不知道我让这种情况持续了接近一年的时间，是不是超过了同批次同学的中位数。</p><h3 id="向“独当一面”出发">向“独当一面”出发</h3><p>直到 22 年的 3 月，这个情况才略有改善，改善的直接因是组里有个关系很好的同事 w 晋升了，想缓一缓，然后把后续的一些需求交给我来当 Owner。说到这里还是要感谢 w 同学，我当时负责的第一个需求，连方案都是他预先帮我出好的，而且开发过程中他的贡献的代码量并不比我低。</p><p>虽然是被动的，但好在整个需求交付的过程和结果都还不错。被动的被推上战场，并不代表过程中的事情都会变的格外艰难，跨团队沟通、对交付风险的把控、项目整体 Milestone 的制定对于没有经验的人来说虽然有挑战，但是“hone by doing（事上磨炼）”的感觉也会给人带来不少的正反馈。不过比较特殊的是，我做的这个需求本身可能和业务不太挂钩，还是偏横向，而且当时也因为个人的一些情况导致有些不在状态；但总的来说，这件事是个开始，多少改善了大家对我的印象，也为后续逐渐成长为“业务主要支撑同学”打下了基础。</p><p>22 年的 6 月，我接到了第一个需要我独立完成的较大的业务需求，业务的复杂度很低，总的来说就是批量勾选一些实体，然后将实体上挂的一些文件进行打包导出，然后用户就可以把这个包下载下来，也就是一个批量的文件下载功能。需求虽然简单，但是当时我们团队并没有一个好的流处理文件的解决方案，现成的方案都是需要借助容器里的本地磁盘作为介质来存储中间产物的，也就是会先把源文件下载下来到 <code>/tmp</code> 文件夹中，然后压缩成一个 <code>xx.zip</code> 压缩包，也存在 <code>/tmp</code> 文件夹中，最后再把压缩包进行上传。所以当时我从技术的视角出发，写了一个基于 Golang 的流式「下载-压缩-上传」的 SDK，只需要在在两个流的对接处留下一定大小的 Buffer，就可以实现完整的多文件传输链路，而无需依赖硬盘来保存中间文件，这个 SDK 完成后也得到了很多需求的服用，目前已经是团队内的一个标准解决方案了。</p><p>我想说的是，这可能和字节范里的“追求极致”没有太大的关系，而更多的是作为一个工程师的工程素养的问题。你需要敏锐的意识到现有方案的种种问题，然后评估其风险，接着思考是否有更优解，以及更优解是否有业界成熟的经验可以复用，最后盘点其 <code>ROI</code> 是不是足够的高，同样关键的是，这个过程需要在有限的时间内完成。听起来可能会很困难，事实上也确实不简单，要做好这些事情确实需要一些时间的沉淀，需要丰富的经验，对于新人来说确实不够友好。</p><blockquote><p>时间管理是永恒的话题，每个人的时间都是有限的，工作时间的很大一部分都会花在工作本身，留给自己沉淀积累的时间永远不会太多，关于改进的方式，可以参照「<a href="https://wiki.mbalib.com/wiki/5%E5%B0%8F%E6%97%B6%E5%8E%9F%E5%88%99">5小时原则</a>」和「<a href="https://wiki.mbalib.com/wiki/%E4%B8%80%E4%B8%87%E5%B0%8F%E6%97%B6%E5%AE%9A%E5%BE%8B">一万小时定律</a>」。</p><p>经验积累的方面，我想数据库索引的思维也许能够带来一些启发。既然时间是有限的，那么我们<u><em>在有限的时间内如何能够获取到更多的信息</em></u>这一问题，也许可以转变为 —— <u><em>如何加快获取信息的速度</em></u>。我的一个想法是，你可以通过各类搜索引擎，不管是 Google、Github 还是企业内的文档搜索工具，来获取到大量成熟、现成的解决方案，然后你可以对这些方案做一个初步的了解，尤其是“这个方案到底解决了什么问题”是必须要弄清楚的，这一系列过程就像是在你的脑海中建立了数据库的 <code>二级索引</code>，以后当你遇到这类问题的时候，你就能够迅速通过这个索引来找到 <code>primary key</code> 然后回表查询，所谓的回表也就是通过各类搜索引擎来帮助获取详细信息了。</p><p>举个例子来说，我的实际工作中并不需要我亲身接触到 Elastic Search，但我会知道它是业内实现搜索功能最常用的中间件；与此同时，我还记得我曾经在逛 Github 的时候，通过 Golang 的标签偶然看见过最近点赞量很高的 <a href="https://github.com/zincsearch/zincsearch">Zinc</a> 引擎，然后我通过它的简介知道它也能够很好的实现搜索功能，只是相比 ES 而言显得更轻量。所以也许在未来的某一天，当我的团队需要从 0 到 1 的去搭建搜索服务的时候，我能够迅速的通过这些“索引”来获取对应的知识帮助团队完成技术决策。</p></blockquote><p>当有了一些积淀之后，后续的规划和目标也理应变的清晰起来，不管是晋升的计划还是对于业务的责任感。字节一直都很强调的 “Ownership” 也许在管理手段上会显得较为严苛，但是毕竟成长是自己的事情，不管外界是如何变化，自己的想法是否明确总是更为重要的。</p><p>具体的说，如果你正在待着的地方，所属行业发展快、团队氛围好、回报比较公平且周围有比你厉害的前辈可以借鉴，那么你所在的环境就已经是很好的了。</p><p>当然，上面所说的这些点，在我看来并不是符合「安娜·卡列尼娜」原则的，很多同行都会为了上述中的一到两点而选择加入一个团队。</p><h3 id="正面思考，用脚投票">正面思考，用脚投票</h3><p>“正面思考，用脚投票”这八个字是我在字节期间某一次听 「Tech Talk 定坤震原面对面」所接触到的。</p><p>任何公司发展到一定规模之后，组织架构的层级就会变得更为复杂，导致我们无法（或是很难）与上层（你的 +2 / +3，或是公司的 CEO）直接进行跨级沟通，也就是说我们往往都只会和自己团队内的 Leader 或别的同事进行沟通。所以这也就是为什么大家常说：“转岗换团队和换公司并没有什么区别。”</p><p>不过这类问题往往是与工作/业务相关的，换句话说就是和你的个人发展相关的 —— 根据我的经验，大家对于“停车场停车不方便”、“下午茶的质量堪忧”、“疫情要来了，我们什么时候居家办公”之类的问题会表现地更坦诚清晰，<u><em>其实无非就是，针对大家共同面临的问题，我们会显得更有底气</em></u>。</p><p>人与人之间的沟通也是一个永恒的话题，过程中不可避免的会有很多矛盾的产生。关于这点，在《<em>Guns, Germs, and Steel</em>: The Fates of Human Societies》（<em>枪炮</em>、<em>病菌与钢铁</em>：人类社会的命运）一书中有许多详细的论证。</p><blockquote><p>书中的第14章《<u>从人人平等到盗贼统治</u>》中描述了人类社群的发展过程：游群-部落-酋邦-国家，每个社群的规模和组成结构都很大差异。书中提出，当社群发展到酋邦阶段时，内部冲突的问题十分严重，主要是因为酋邦人口众多且大部分人彼此之间并没有血缘或姻亲关系，所以酋邦在 7500 年兴起后，人类开始学习面临陌生人的第一课：如何面对经常遇见的陌生人，不互相残杀？</p><p>虽然现代社会的公司和社群的发展不能相提并论，但是 Jared Diamond 在书中的论述还是有可借鉴的点。如果我们按照书中的人数指标来看待公司，那么公司整体就类似于一个酋邦，各个业务线的大部门就相当于一个部落，而我们每个小团队就像是一个游群。但是这么划分之后，显然我们会发现实际的工作体验与 Jared 的论述有极大的出入，我个人的想法是我们一个 5，60 人的业务团队更像是一个融合了“部落”和“酋邦”的社群。</p><p><img src="/img/career_2023/book.jpeg" alt="&quot;社群的种类&quot;"></p></blockquote><p>显然我们不能像治理酋邦或是国家一样，通过宗教和卸除人民武装等手段来解决人与人之间的矛盾，更现实的解决方式还是要从每个人自身出发。在《<em>Selfish Gene</em>》（<em>自私的基因</em>）一书中有提到作者不支持“以进化论为基础的道德观”，在实际工作中我们往往也能发现，基于善意的假设去开展工作往往会比恶意假设带来的结果更好。</p><p>在工作中，我们时常会觉得自己的想法不被别人理解，比如对于自己的绩效不满意，觉得领导给自己的晋升规划过于滞后，或是单纯觉得他人就是在针对自己，在遇到这种情况的时候，往往需要我们去正面思考和应对，当矛盾和 Gap 产生的时候，你是否思考过你是不是有哪些事情没有沟通清楚，如果是的话，你有没有思考过可以找谁去进一步了解信息，有没有理性的劝说对方，举个初高中老师常说的例子：</p><blockquote><p>请计算 x 的值</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x^2 + 2x + 1 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>同学 A：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mtext>解</mtext><mo>:</mo><mtext>原式</mtext><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mtext>答：综上，</mtext><mi>x</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}解: 原式=(x+1)^2 &amp;= 0\newlinex+1   &amp;= 0\newlinex     &amp;= -1\newline答：综上，x = -1\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.0241em;vertical-align:-2.7621em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2621em;"><span style="top:-5.3979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">解</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord cjk_fallback">原式</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-2.3979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-0.8979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">答：综上，</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7621em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2621em;"><span style="top:-5.3979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.8979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.3979em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2621em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>同学 B：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></span></p></blockquote><p>阅卷人可能会给同学 B 的答案上打一个“半勾”，然后扣 1-2 分，如果是严格的阅卷人，也可能给 0 分，当然也不排除有的阅卷人不在意这些细节，经常有的同学被扣分之后，也许就直呼阅卷人是个 **。</p><p>实际工作中遇到的情形可能更复杂，不是一个非黑即白的场景，比如也许确实之前在某件事上没做好，然后被领导和同事质疑了，但是那件事之后表现的还不错，甚至还有一些小的亮点，然而年底的绩效还是不及预期，于是可能就觉得大家对自己有偏见了。这种情况下，也许真实的原因，只是团队内有别人在你不知道的方向上表现得更好，或者是今年业务的财报不佳，团队整体的绩效都不好。那么在这种情况下，你是否有和他人积极的沟通过，还是说一直回避这个问题，会对后续发展产生截然不同的两种影响。</p><p>当然也不排除有时自己已经正面的尝试去解决过这个问题，仍然没有什么改善，这种情况下可能你需要尝试跨级沟通，只是这样成本可能会显得“格外的高”；或者你选择离开，寻求更好的环境，也就是标题中的后半段 —— “<a href="https://wiki.mbalib.com/zh-tw/%E7%94%A8%E8%84%9A%E6%8A%95%E7%A5%A8">用脚投票</a>”，当然这样做的成本也不见得有多低，如果当前的环境确实很糟糕，且长时间得不到改善，那么大家也就会用脚来表达自己的意愿和想法。</p><p>但是总的来说，正面思考是首先要做的事情，在一个越大的群体里面，沟通的效率就越低，就越容易产生不信任的感觉，就像软件工程没有银弹一样，是一个永恒存在的问题。既然知道问题的根源来自于此，那么我们应该意识到在绝大多数情况下，都是有一些误会存在而导致的。</p><p>当然，理解“用脚投票”也同样重要，之前在网络上有看过一个言论：</p><blockquote><p>“每个人的每个选择，都是在权衡当下之后做出的最优解。”</p></blockquote><p>但是要注意到权衡的过程往往是不够客观的，比如有的同学会觉得换个工作太麻烦，需要重新复习“八股文”和算法题，也有的同学会因为在网络上看到很多言论说今年的就业形势紧张，现在出来没有什么机会，于是就选择“委屈一下“，保持现状。这样想其实是没有错的，只是你务必要去辨认清楚信息来源的真实性，”网上说的就业形势紧张是我的行业吗？“，”同行找不到工作，那我是不是也找不到？“，”每天早起一小时刷算法题和复习八股文是否会对我的生活造成很大的影响？“ 我有遇见过不少同学，甚至简历都没敢投递出去，就认为自己肯定得不到面试机会。</p><p>除此之外，在权衡过程中除了需要辨认信息的真实性，还需要避免采用单一的“<a href="https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95#:~:text=%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%88%E8%8B%B1%E8%AA%9E%EF%BC%9Agreedy%20algorithm,%E5%B0%B1%E6%98%AF%E4%B8%80%E7%A7%8D%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E3%80%82">贪心算法</a>”，这个算法的使用场景是很有限的，这里就不展开了。</p><p>补充一个例子：</p><blockquote><p>这里从另一个广泛的现象来阐述一下“正面思考”。大多数实施绩效考核的公司想必都发生过员工对绩效不满意，于是在网络上掀起舆论风暴的情况。我们把视角稍微延伸一下，就会发现其实不只是绩效的问题，当今任何没有得到公正处理（不管是主观还是客观）的事情，都有可能在媒体和网络上发酵出一阵轰动。</p><p>然后作为旁观者、事不关己者、义愤填膺者或是杞人忧天者，我们最终都会经历一个阶段，就是对<u>热度的退减</u>而产生愤怒或失望的情绪。</p><p>之前我也是这么想的，直到在一些分享中听到定坤对于这种现象的理解，才算是释怀了。其中的关键点在于，“让一件事情发酵的目的到底是什么”，这个问题是绝大多数人都没有想清楚的，或是压根就没有去想过的，就是单纯的吃瓜心理在背后作祟，甚至略显刻薄的说，很多人需要一些类似的事情来让自己的情绪得到调节。其实这个问题的答案还是比较单一的，用计算机的术语来说就是“索引的区分度不高”，一个事情发酵出来的目的往往是希望这件事最后会在群众的监督下解决，于是解决的结果会更为公平，即使不能让所有人满意，解决的过程至少也是秉公的。</p><p>那么在事情发酵之后，已经进入处理阶段之后，目的可能也就达成了，那么进一步的扩散应该是毫无必要的，也许还会带来许多诸如违反公司内部保密原则、损害公司的形象的弊端，所以会有一个人为的管控过程。</p><p>当然，也有一些特殊的情况，例如也许有些人让事情发酵的原因不是单纯的希望解决问题，或是管控之后没有进一步的推进问题的处理，不过这些情况不在我们的论证范围内了。</p></blockquote><p>现在，在加入字节跳动后的第 10xx 天，我决定离开这个地方，离开的原因很简单，我的团队经常用 <code>ROI（投资回报率）</code> 来衡量做一个需求的性价比——我觉得现阶段的我继续在这里做下去的 ROI 不高。</p><p>虽然我没有那么好的运气，去经历字节跳动，甚至是<u>国内</u>互联网行业的黄金发展期，但是我幸运地经历了我们业务的高速发展期（虽然看起来这边的业务一直都处在高速发展的道路上），见证了一个团队将业务商业化的全过程，于是自己也在其中获得了很快的成长。</p><p>“ROI 不高” 这个话术过于抽象，具体来说我思考的主要是以下几点：</p><ol><li>产品已经商业化 x 年，正处于稳定的迭代期，亮点和机会相对变少，逐渐到达瓶颈期。</li><li>除了业务稳定之外，我个人对其未来在市场上的发展也不抱太大的希望。</li><li>B 端的 HR 领域产品的复杂性往往体现在业务逻辑，技术深度相对不足。</li><li><strong><u>团队和产品内暴露出来的某些问题，当前的我并没有能力去解决、甚至是推动。</u></strong></li><li>相对来说，当前获得的回报无法掩盖上述的问题。</li></ol><p>通俗的说，对我而言，“打工”中很重要的一环是价值交换的过程，公司可以用物质来换取：我的 idea、我的劳动力、我的人脉（比如猎头行业），也就是说公司可以提供他的资源来换取我的资源。一般来说，在合作关系开始的时候达成这一点是必然的，只是随着时间的发展，平衡会逐渐被打破。</p><p>比如我会觉得随着时间流逝，我对业务日益熟悉，我的产出也日益变高，于是我的工资也理应上升；或者是我觉得团队的工作量相比去年翻了 1.x 倍，如果不给我涨薪，那我的时薪就在下降；除了物质层面，可能我们还会逐渐在技术上也到达瓶颈，比如我们可能会在 x 年的时间里把团队的技术架构和选型基本摸透。当然，更坏的情况是当前的环境会带来直接的负面影响——上面列举的例子充其量也只是“不进则退”，比如职场里“不顺畅的沟通“和”不正当的竞争“也许会给你带来更大的心理负担，又或许过长的工作时间会直接影响你的身体健康。</p><p>当然上面讨论的只是一些可能发生的具体问题，而问题如果能解决的话，就不是什么问题，这也就是为什么我标记了第三点思考的原因。总而言之，我已经正面思考过，思考的结果驱动我“用脚投票”了。</p><h2 id="End">End</h2><blockquote><p>我喜欢出发。凡是到达了的地方，都属于昨天，哪怕那山再青，那水再秀，那风再温柔。 —— 汪国真</p></blockquote><p>感谢字节的三年，庆幸自己的清醒，也佩服自己的勇气。</p>]]></content>
    
    
    <categories>
      
      <category>career</category>
      
    </categories>
    
    
    <tags>
      
      <tag>四川大学</tag>
      
      <tag>ByteDance</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
